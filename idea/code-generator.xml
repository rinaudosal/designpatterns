<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<codeTemplateList>
    <templates>
        <templates version="1.3">
            <id>5860979c-a3da-40eb-914c-e86fd84db846</id>
            <name>PierTest_Fast</name>
            <fileNamePattern>.*\.java$</fileNamePattern>
            <type>caret</type>
            <enabled>true</enabled>
            <template>
#foreach($field1 in $class1.fields)
#set($name2 = $StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field1.element, $project))))
#set($getter = "get${name2}")
#if ($field1.boolean)
#set($getter = "is${name2}")
#else
#set($getter = "get${name2}")
#end
#if ("$field1.name" != "serialVersionUID")
Assert.assertEquals(,$class1.name.substring(0,1).toLowerCase()$class1.name.substring(1).${getter}());
#end
#end
#if ($class1.superName)
/*generate code also for super class $class1.superName*/
#end




## Tutorial for writing your templates
##
## 1. First you need to know basic syntax of velocity[1].
## 2. Then it is necessary to understand the variable that CodeGenerator provides
##    and its inner structure for retrieving the information you need for generating code.
## 3. Learn to use the utils provided so that you can ask for further information
##    or reduce your workload.
##
## Variables Provided (Class Mode)
## -------------------------------
## Class mode means you want to create new classes(file).
##
## - ClassName: String     The name spcified by `Target Class Name`
## - PackageName: String   The package name specified by `Target Class Name`
## - class0: ClassEntry    The class that the action is triggered upon
##   - raw: PsiClass
##   - String packageName
##   - importList: List&lt;String&gt;
##   - fields: List&lt;FieldEntry&gt;
##   - allFields: List&lt;FieldEntry&gt;
##   - methods: List&lt;MethodEntry&gt;
##   - allMethods: List&lt;MethodEntry&gt;
##   - innerClasses: List&lt;ClassEntry&gt;
##   - allInnerClasses: List&lt;ClassEntry&gt;
##   - typeParamList:  List&lt;String&gt;
##   - name: String
##   - superName: String
##   - superQualifiedName: String
##   - qualifiedName: String
##   - typeParams: int
##   - hasSuper: boolean
##   - deprecated: boolean
##   - enum: boolean
##   - exception: boolean
##   - abstract: boolean
##   - implementNames: String[]
##   - isImplements(String): bool
##   - isExtends(String): bool
##   - matchName(String): bool
##
## - class1: ClassEntry    The first selected class, where `1` is the postfix
##                         you specify in pipeline
##   ...
##
## - MemberEntry (FieldEntry/MethodEntry common properties)
##    - raw: PsiField(for field), PsiMethod(for method)
##    - name: String
##    - accessor: String
##    - array: boolean
##    - nestedArray: boolean
##    - collection: boolean
##    - map: boolean
##    - primitive: boolean
##    - string: boolean
##    - primitiveArray: boolean
##    - objectArray: boolean
##    - numeric: boolean
##    - object: boolean
##    - date: boolean
##    - set: boolean
##    - list: boolean
##    - stringArray: boolean
##    - calendar: boolean
##    - typeName: String
##    - typeQualifiedName: String
##    - type: String
##    - boolean: boolean
##    - long: boolean
##    - float: boolean
##    - double: boolean
##    - void: boolean
##    - notNull: boolean
##    - char: boolean
##    - byte: boolean
##    - short: boolean
##    - modifierStatic: boolean
##    - modifierPublic: boolean
##    - modifierProtected: boolean
##    - modifierPackageLocal: boolean
##    - modifierPrivate: boolean
##    - modifierFinal: boolean
##
## - FieldEntry
##   - constant: boolean
##   - modifierTransient: boolean
##   - modifierVolatile: boolean
##   - enum: boolean
##   - matchName(String): bool
##
## - MethodEntry
##   - methodName: String
##   - fieldName: String
##   - modifierAbstract: boolean
##   - modifierSynchronzied: boolean
##   - modifierSynchronized: boolean
##   - returnTypeVoid: boolean
##   - getter: boolean
##   - deprecated: boolean
##   - matchName(String): bool
##
## Variables for Body Mode
## -----------------------
## - class0: ClassEntry         The current class
## - fields: List&lt;FieldEntry&gt;   All selected fields
## - methods: List&lt;MethodEntry&gt; All selected methods
## - members: List&lt;MemberEntry&gt; selected fields+methods
## - parentMethod: MethodEntry  The nearest method that surround the current cursor
##
## Utilities
## ---------
## - settings: CodeStyleSettings settings of code style
## - project: Project            The project instance, normally used by Psi related utilities
## - helper: GenerationHelper
## - StringUtil: Class
## - NameUtil: Class
## - PsiShortNamesCache: Class   utility to search classes
## - PsiJavaPsiFacade: Class     Java specific utility to search classes
## - GlobalSearchScope: Class    class to create search scopes, used by above utilities
## - EntryFactory: Class         EntryFactory.of(...) to turn PsiXXX to XXXEntry.
##
## Other feature
## -------------
## - Auto import.      If the generated code contains full qualified name, Code Generator will try to
##                     import the packages automatically and shorten the name.
##                     For example `java.util.List&lt;&gt;` -&gt; `List&lt;&gt;`
##
## References
## ----------
## - Velocity syntax: http://velocity.apache.org/engine/1.7/user-guide.html

</template>
            <fileEncoding>UTF-8</fileEncoding>
            <pipeline>
                <classSelection>
                    <initialClass>$class1.qualifiedName</initialClass>
                    <enabled>true</enabled>
                    <postfix>1</postfix>
                </classSelection>
            </pipeline>
            <insertNewMethodOption>AT_CARET</insertNewMethodOption>
            <whenDuplicatesOption>ASK</whenDuplicatesOption>
            <jumpToMethod>true</jumpToMethod>
            <classNameVm>$class0.name</classNameVm>
            <alwaysPromptForPackage>false</alwaysPromptForPackage>
        </templates>
    </templates>
</codeTemplateList>
