/**
* MMC - Backend API
* Motore di messaggistica API
*
* OpenAPI spec version: 0.3.0
* Contact: d.ghilardi@reply.it
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.server.apis

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.basicAuthentication
import io.ktor.auth.oauth
import io.ktor.auth.Principal
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.*
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.*

import kotlinx.coroutines.experimental.asCoroutineDispatcher

import io.swagger.server.ApplicationAuthProviders
import io.swagger.server.Paths
import io.swagger.server.ApplicationExecutors
import io.swagger.server.HTTP.client
import io.swagger.server.infrastructure.ApiPrincipal
import io.swagger.server.infrastructure.apiKeyAuth

// ktor 0.9.x is missing io.ktor.locations.DELETE, this adds it.
// see https://github.com/ktorio/ktor/issues/288
import io.swagger.server.delete

import io.swagger.server.models.CheckMessageResponse
import io.swagger.server.models.ErrorResponse
import io.swagger.server.models.NewDeviceRequest
import io.swagger.server.models.SendMessageRequest
import io.swagger.server.models.SendResponse
import io.swagger.server.models.UnprocessableEntityResponse



fun Route.DefaultApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    

    route("/management/device") {
        post {
            



call.respond(HttpStatusCode.NotImplemented)


        }
    }
    
    
    
    
    

    

    
    

    
    delete<Paths.deleteDevice> {  it: Paths.deleteDevice ->
        



call.respond(HttpStatusCode.NotImplemented)


    }
    
    
    
    

    

    
    

    
    get<Paths.messageCheck> {  it: Paths.messageCheck ->
        



call.respond(HttpStatusCode.NotImplemented)


    }
    
    
    
    

    

    

    route("/message/send") {
        post {
            



call.respond(HttpStatusCode.NotImplemented)


        }
    }
    
    
    
    
    

    

}
