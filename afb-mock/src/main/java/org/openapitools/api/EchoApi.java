/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.DateMessage;
import org.openapitools.model.EchoMessage;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "echo", description = "the echo API")
public interface EchoApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "deleteEcho", nickname = "deleteEchoUsingDELETE", notes = "This is a simple Echo service. It will simply output the message passed as parameter.  It is meant to facilitate the testing of a new infrastructure or deployment.  It is not meant to be used in a production environment. ", response = EchoMessage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "echo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EchoMessage.class) })
    @RequestMapping(value = "/echo",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<EchoMessage> deleteEchoUsingDELETE(@ApiParam(value = "A Simple EchoMessage" ,required=true )  @Valid @RequestBody EchoMessage echoMessage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEchoLegacy", nickname = "getEchoLegacyUsingGET", notes = "This is a simple Echo service. It will simply output the message passed as parameter.  It is meant to facilitate the testing of a new infrastructure or deployment.  It is not meant to be used in a production environment. ", response = EchoMessage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "echo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EchoMessage.class) })
    @RequestMapping(value = "/echo/legacy",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EchoMessage> getEchoLegacyUsingGET(@ApiParam(value = "message") @Valid @RequestParam(value = "message", required = false) String message) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEchoLocale", nickname = "getEchoLocaleUsingGET", notes = "Simple ECHO service that allows to test the Locale handling code", response = EchoMessage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "echo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EchoMessage.class) })
    @RequestMapping(value = "/echo/locale",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EchoMessage> getEchoLocaleUsingGET(@ApiParam(value = "message") @Valid @RequestParam(value = "message", required = false) String message) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEchoMe", nickname = "getEchoMeUsingGET", notes = "This is a simple Echo service. It will output information about the current user. It is meant to facilitate the testing of a new infrastructure or deployment. It is not meant to be used in a production environment. ", response = EchoMessage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "echo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EchoMessage.class) })
    @RequestMapping(value = "/echo/me",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EchoMessage> getEchoMeUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEcho", nickname = "getEchoUsingGET", notes = "This is a simple Echo service. It will simply output the message passed as parameter.  It is meant to facilitate the testing of a new infrastructure or deployment.  It is not meant to be used in a production environment. ", response = EchoMessage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "echo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EchoMessage.class) })
    @RequestMapping(value = "/echo",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EchoMessage> getEchoUsingGET(@ApiParam(value = "message") @Valid @RequestParam(value = "message", required = false) String message) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "postEcho", nickname = "postEchoUsingPOST", notes = "This is a simple Echo service. It will simply output the message passed as parameter.  It is meant to facilitate the testing of a new infrastructure or deployment.  It is not meant to be used in a production environment. ", response = EchoMessage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "echo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EchoMessage.class) })
    @RequestMapping(value = "/echo",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<EchoMessage> postEchoUsingPOST(@ApiParam(value = "A Simple EchoMessage" ,required=true )  @Valid @RequestBody EchoMessage echoMessage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "putEcho", nickname = "putEchoUsingPUT", notes = "This is a simple Echo service. It will simply output the message passed as parameter.  It is meant to facilitate the testing of a new infrastructure or deployment.  It is not meant to be used in a production environment. ", response = EchoMessage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "echo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EchoMessage.class) })
    @RequestMapping(value = "/echo",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<EchoMessage> putEchoUsingPUT(@ApiParam(value = "A Simple EchoMessage" ,required=true )  @Valid @RequestBody EchoMessage echoMessage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "testDate", nickname = "testDateUsingPOST", notes = "This is a simple Echo service. It will output the current server date in several formats (as string using the  default date format of the server), as an epoch and a date (to validate the Jackson conversion)... ", response = DateMessage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "echo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DateMessage.class) })
    @RequestMapping(value = "/echo/testDate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DateMessage> testDateUsingPOST(@ApiParam(value = "A Simple date" ,required=true )  @Valid @RequestBody DateMessage dateMessage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"serverDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"clientDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"clientString\" : \"clientString\",  \"serverString\" : \"serverString\",  \"clientEpoch\" : 0,  \"serverEpoch\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "testGeneralErrorException", nickname = "testGeneralErrorExceptionUsingGET", notes = "This is a simple Echo service. It will output information about the current user. It is meant to facilitate the testing of a new infrastructure or deployment. It is not meant to be used in a production environment. ", response = EchoMessage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "echo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EchoMessage.class) })
    @RequestMapping(value = "/echo/testGeneralErrorException",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EchoMessage> testGeneralErrorExceptionUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "testIllegalInputException", nickname = "testIllegalInputExceptionUsingGET", notes = "This is a simple Echo service. It will output information about the current user. It is meant to facilitate the testing of a new infrastructure or deployment. It is not meant to be used in a production environment. ", response = EchoMessage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "echo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EchoMessage.class) })
    @RequestMapping(value = "/echo/testIllegalInputException",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EchoMessage> testIllegalInputExceptionUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "testNotFoundException", nickname = "testNotFoundExceptionUsingGET", notes = "This is a simple Echo service. It will output information about the current user. It is meant to facilitate the testing of a new infrastructure or deployment. It is not meant to be used in a production environment. ", response = EchoMessage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "echo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EchoMessage.class) })
    @RequestMapping(value = "/echo/testNotFoundException",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EchoMessage> testNotFoundExceptionUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
