/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.BenchmarkFilterAndPageFilter;
import org.openapitools.model.BrokerFilterAndPageFilter;
import org.openapitools.model.CollectiveInvestmentSchemeFilterAndPageFilter;
import org.openapitools.model.CorporateActionExcelFilterAndPageFilter;
import org.openapitools.model.CorporateActionFilterAndPageFilter;
import org.openapitools.model.DealingFundHouseFilterAndPageFilter;
import org.openapitools.model.DealingInstrumentFilterAndPageFilter;
import org.openapitools.model.DepositaryFilterAndPageFilter;
import org.openapitools.model.DistributorFilterAndPageFilter;
import org.openapitools.model.DocumentAndPage;
import org.openapitools.model.DocumentEngineFilterAndPageFilter;
import org.openapitools.model.DocumentFilterAndPageFilter;
import org.openapitools.model.DocumentLegalFilterAndPageFilter;
import org.openapitools.model.EmployeeAndPage;
import org.openapitools.model.EmployeeFilterAndPageFilter;
import org.openapitools.model.FundHouseFilterAndPageFilter;
import org.openapitools.model.FundHouseGroupFilterAndPageFilter;
import org.openapitools.model.InstrumentSearchAnyClassExcelFilterAndPageFilter;
import org.openapitools.model.InstrumentSearchAnyClassFilterAndPageFilter;
import org.openapitools.model.InstrumentSearchByCodeFilterAndPageFilter;
import org.openapitools.model.InstrumentSearchClassFilterAndPageFilter;
import org.openapitools.model.InstrumentSearchExcelFilterAndPageFilter;
import org.openapitools.model.InstrumentSearchFilterAndPageFilter;
import org.openapitools.model.InstrumentSearchPopularExcelFilterAndPageFilter;
import org.openapitools.model.InstrumentSearchPricesExcelFilterAndPageFilter;
import org.openapitools.model.PageFilter;
import org.openapitools.model.PopularFilterAndPageFilter;
import org.openapitools.model.RankingAndResourceReferenceAndPage;
import org.openapitools.model.RawSearchClassInstrumentResultAndPage;
import org.openapitools.model.RawSearchInstrumentResultAndPage;
import org.openapitools.model.ResourceReferenceAndPage;
import org.openapitools.model.SolvencyDistributorAndPage;
import org.openapitools.model.SolvencyDistributorFilterAndPageFilter;
import org.openapitools.model.SolvencyFundAndPage;
import org.openapitools.model.SolvencyFundHouseGroupAndPage;
import org.openapitools.model.SolvencyFundHouseGroupSearchFilterAndPageFilter;
import org.openapitools.model.TheoreticalPortfolioFilterAndPageFilter;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "search", description = "the search API")
public interface SearchApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "searchAnyInstrumentsClassesAsXls", nickname = "searchAnyInstrumentsClassesAsXlsUsingPOST", notes = "", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/classes/any/raw/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> searchAnyInstrumentsClassesAsXlsUsingPOST(@ApiParam(value = "The InstrumentSearchAnyClassExcelFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchAnyClassExcelFilterAndPageFilter instrumentSearchAnyClassExcelFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchAnyInstrumentsClasses", nickname = "searchAnyInstrumentsClassesUsingPOST", notes = "", response = RawSearchClassInstrumentResultAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = RawSearchClassInstrumentResultAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/classes/any/raw",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RawSearchClassInstrumentResultAndPage> searchAnyInstrumentsClassesUsingPOST(@ApiParam(value = "The InstrumentSearchAnyClassFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchAnyClassFilterAndPageFilter instrumentSearchAnyClassFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"results\" : [ {    \"fundGroupName\" : \"fundGroupName\",    \"instrumentType\" : \"instrumentType\",    \"fundHouseGroupId\" : 6,    \"riskLevel\" : 9,    \"shareTypeCode\" : \"shareTypeCode\",    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"classInstrument\" : {      \"mifid2ClassCode\" : \"mifid2ClassCode\",      \"classClientTypeCode\" : \"classClientTypeCode\",      \"classServiceTypeCode\" : \"classServiceTypeCode\"    },    \"transferable\" : true,    \"fundHouseId\" : 1,    \"minimunInvestmentInitial\" : 5.63737665663332876420099637471139430999755859375,    \"classStatus\" : \"NOT_CLASSIFICABLE\",    \"hedge\" : true,    \"informationProvider\" : \"informationProvider\",    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"feeData\" : {      \"appliedManagementFee\" : 5.63737665663332876420099637471139430999755859375,      \"appliedDistributionFee\" : 5.962133916683182377482808078639209270477294921875,      \"totalFeeApplied\" : 7.061401241503109105224211816675961017608642578125,      \"feesCorrelationPercentage\" : 2.3021358869347654518833223846741020679473876953125    },    \"subscriptionType\" : \"subscriptionType\",    \"name\" : \"name\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"id\" : 5,    \"operatingCashFlow\" : 7.061401241503109105224211816675961017608642578125,    \"currencyCode\" : \"currencyCode\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"productComplexity\" : \"COMPLEX\",    \"minimunInvestmentSubsequent\" : 2.3021358869347654518833223846741020679473876953125  }, {    \"fundGroupName\" : \"fundGroupName\",    \"instrumentType\" : \"instrumentType\",    \"fundHouseGroupId\" : 6,    \"riskLevel\" : 9,    \"shareTypeCode\" : \"shareTypeCode\",    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"classInstrument\" : {      \"mifid2ClassCode\" : \"mifid2ClassCode\",      \"classClientTypeCode\" : \"classClientTypeCode\",      \"classServiceTypeCode\" : \"classServiceTypeCode\"    },    \"transferable\" : true,    \"fundHouseId\" : 1,    \"minimunInvestmentInitial\" : 5.63737665663332876420099637471139430999755859375,    \"classStatus\" : \"NOT_CLASSIFICABLE\",    \"hedge\" : true,    \"informationProvider\" : \"informationProvider\",    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"feeData\" : {      \"appliedManagementFee\" : 5.63737665663332876420099637471139430999755859375,      \"appliedDistributionFee\" : 5.962133916683182377482808078639209270477294921875,      \"totalFeeApplied\" : 7.061401241503109105224211816675961017608642578125,      \"feesCorrelationPercentage\" : 2.3021358869347654518833223846741020679473876953125    },    \"subscriptionType\" : \"subscriptionType\",    \"name\" : \"name\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"id\" : 5,    \"operatingCashFlow\" : 7.061401241503109105224211816675961017608642578125,    \"currencyCode\" : \"currencyCode\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"productComplexity\" : \"COMPLEX\",    \"minimunInvestmentSubsequent\" : 2.3021358869347654518833223846741020679473876953125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchBenchmarks", nickname = "searchBenchmarksUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/benchmarks/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchBenchmarksUsingPOST(@ApiParam(value = "The {BenchmarkFilterAndPageFilter} object to use for this search"  )  @Valid @RequestBody BenchmarkFilterAndPageFilter benchmarkFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchBrokers", nickname = "searchBrokersUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/brokers/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchBrokersUsingPOST(@ApiParam(value = "The BrokerFilterAndPageFilter object to use for this search" ,required=true )  @Valid @RequestBody BrokerFilterAndPageFilter brokerFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchCollectiveInvestmentSchemesForSavingPlans", nickname = "searchCollectiveInvestmentSchemesForSavingPlansUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/collectiveInvestmentSchemes/savingPlans/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchCollectiveInvestmentSchemesForSavingPlansUsingPOST(@ApiParam(value = "The PageFilter object to use for this search" ,required=true )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchCollectiveInvestmentSchemes", nickname = "searchCollectiveInvestmentSchemesUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/collectiveInvestmentSchemes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchCollectiveInvestmentSchemesUsingPOST(@ApiParam(value = "The CollectiveInvestmentSchemesFilterAndPageFilter object to use for this search" ,required=true )  @Valid @RequestBody CollectiveInvestmentSchemeFilterAndPageFilter collectiveInvestmentSchemeFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchCorporateActionsSummariesAsXls", nickname = "searchCorporateActionsSummariesAsXlsUsingPOST", notes = "Generates a report of {CorporteActions} as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/corporateActions/summaries/list/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> searchCorporateActionsSummariesAsXlsUsingPOST(@ApiParam(value = "The CorporateActionExcelFilter object to use for this search" ,required=true )  @Valid @RequestBody CorporateActionExcelFilterAndPageFilter corporateActionExcelFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchCorporateActionsSummaries", nickname = "searchCorporateActionsSummariesUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/corporateActions/summaries/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchCorporateActionsSummariesUsingPOST(@ApiParam(value = "The CorporateActionSearchFilterAndPageFilter object to use for this search" ,required=true )  @Valid @RequestBody CorporateActionFilterAndPageFilter corporateActionFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchDealingFundHouses", nickname = "searchDealingFundHousesUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/dealingFundHouses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchDealingFundHousesUsingPOST(@ApiParam(value = "The DealingFundHouseSearchFilterAndPageFilter object to use for this search" ,required=true )  @Valid @RequestBody DealingFundHouseFilterAndPageFilter dealingFundHouseFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchDealingInstruments", nickname = "searchDealingInstrumentsUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/dealingInstruments/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchDealingInstrumentsUsingPOST(@ApiParam(value = "The DealingInstrumentSearchFilterAndPageFilter object to use for this search" ,required=true )  @Valid @RequestBody DealingInstrumentFilterAndPageFilter dealingInstrumentFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchDepositaries", nickname = "searchDepositariesUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/depositaries/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchDepositariesUsingPOST(@ApiParam(value = "The DepositaryFilterAndPageFilter object to use for this search" ,required=true )  @Valid @RequestBody DepositaryFilterAndPageFilter depositaryFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchDistributors", nickname = "searchDistributorsUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/distributors/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchDistributorsUsingPOST(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody DistributorFilterAndPageFilter distributorFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchDocumentsHome", nickname = "searchDocumentsHomeUsingPOST", notes = "", response = DocumentAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DocumentAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/documentsHome/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DocumentAndPage> searchDocumentsHomeUsingPOST(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody DocumentFilterAndPageFilter documentFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"documents\" : [ {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  }, {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchDocuments", nickname = "searchDocumentsUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/documents/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchDocumentsUsingPOST(@ApiParam(value = "The {DocumentFilterAndPageFilter} object to use for this search" ,required=true )  @Valid @RequestBody DocumentFilterAndPageFilter documentFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchEmployees", nickname = "searchEmployeesUsingPOST", notes = "Search for all the employees based on a provided filter.", response = EmployeeAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EmployeeAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/search/employees/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<EmployeeAndPage> searchEmployeesUsingPOST(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody EmployeeFilterAndPageFilter employeeFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"employees\" : [ {    \"departmentName\" : \"departmentName\",    \"officeName\" : \"officeName\",    \"globalName\" : \"globalName\",    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"companyName\" : \"companyName\",    \"departmentId\" : \"departmentId\",    \"countryId\" : \"countryId\",    \"companyId\" : \"companyId\",    \"genderCode\" : \"MALE\",    \"areaId\" : \"areaId\",    \"mobilePhone\" : \"mobilePhone\",    \"areaName\" : \"areaName\",    \"officeId\" : \"officeId\",    \"phone\" : \"phone\",    \"employeeTypeCode\" : \"NA\",    \"surname\" : \"surname\",    \"imageUrl\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"name\" : \"name\",    \"countryName\" : \"countryName\",    \"id\" : \"id\",    \"email\" : \"email\",    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  }, {    \"departmentName\" : \"departmentName\",    \"officeName\" : \"officeName\",    \"globalName\" : \"globalName\",    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"companyName\" : \"companyName\",    \"departmentId\" : \"departmentId\",    \"countryId\" : \"countryId\",    \"companyId\" : \"companyId\",    \"genderCode\" : \"MALE\",    \"areaId\" : \"areaId\",    \"mobilePhone\" : \"mobilePhone\",    \"areaName\" : \"areaName\",    \"officeId\" : \"officeId\",    \"phone\" : \"phone\",    \"employeeTypeCode\" : \"NA\",    \"surname\" : \"surname\",    \"imageUrl\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"name\" : \"name\",    \"countryName\" : \"countryName\",    \"id\" : \"id\",    \"email\" : \"email\",    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchEtfInstrumentsAsXls", nickname = "searchEtfInstrumentsAsXlsUsingPOST", notes = "Generate operational report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/etfs/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> searchEtfInstrumentsAsXlsUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchExcelFilterAndPageFilter instrumentSearchExcelFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchEtfInstrumentsResource", nickname = "searchEtfInstrumentsResourceUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/etfs/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchEtfInstrumentsResourceUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchFilterAndPageFilter instrumentSearchFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchEtfInstruments", nickname = "searchEtfInstrumentsUsingPOST", notes = "", response = RawSearchInstrumentResultAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = RawSearchInstrumentResultAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/etfs/raw",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RawSearchInstrumentResultAndPage> searchEtfInstrumentsUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchExcelFilterAndPageFilter instrumentSearchExcelFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"results\" : [ {    \"performanceCumulativeWeek\" : 6.683562403749608193948006373830139636993408203125,    \"transferable\" : true,    \"fundHouseId\" : 2,    \"statisticAbsoluteMaxDrawdown\" : 9.0183481860707832566959041287191212177276611328125,    \"feesInitialMax\" : 5.63737665663332876420099637471139430999755859375,    \"productStructure\" : \"productStructure\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"whiteassimilatedAnt\" : 3.35319334701124294184637619764544069766998291015625,    \"id\" : 4,    \"statisticAbsoluteSharpeRatio\" : 3.557195227068097320710649000830017030239105224609375,    \"statisticAbsoluteVolatility\" : 6.96511769763884558415156789124011993408203125,    \"replicationMethod\" : \"replicationMethod\",    \"rebalanceFrequency\" : \"rebalanceFrequency\",    \"shareTypeCode\" : \"shareTypeCode\",    \"statisticAbsolutePerformance\" : 6.438423552598546706349225132726132869720458984375,    \"indexName\" : \"indexName\",    \"fundAum\" : 9.301444243932575517419536481611430644989013671875,    \"dateAum\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeSixMonths\" : 9.965781217890562260208753286860883235931396484375,    \"statisticRelativeInfoRatio\" : 6.87805222012787620400331434211693704128265380859375,    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"performanceCumulativeOneYear\" : 5.02500479152029466689555192715488374233245849609375,    \"subscriptionType\" : \"subscriptionType\",    \"fundTypeCode\" : \"fundTypeCode\",    \"name\" : \"name\",    \"statisticRelativeTrackingError\" : 5.94489560761401580890606055618263781070709228515625,    \"fundCurrencyAumCode\" : \"fundCurrencyAumCode\",    \"performanceCumulativeThreeYears\" : 9.3693102714106686335071572102606296539306640625,    \"fundHouseGroupId\" : 3,    \"riskLevel\" : 8,    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"minimunInvestmentInitial\" : 1.231513536777255612975068288506008684635162353515625,    \"performanceAnnualYtd\" : 7.4577447736837658709418974467553198337554931640625,    \"dealingAvailable\" : true,    \"feesDistribution\" : 1.46581298050294517310021547018550336360931396484375,    \"performanceCumulativeDay\" : 1.173074250955943309548956676735542714595794677734375,    \"statisticRelativeBeta\" : 2.884162126668780246063761296682059764862060546875,    \"priipsReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"feesPerformance\" : 7.061401241503109105224211816675961017608642578125,    \"datePortfolio\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"feesAnnual\" : 6.02745618307040320615897144307382404804229736328125,    \"feesOperatingCashFlow\" : 2.3021358869347654518833223846741020679473876953125,    \"mifid2ReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceAnnualHistory1\" : 1.489415909854170383397331534069962799549102783203125,    \"performanceAnnualHistory2\" : 6.8468526983526398765889098285697400569915771484375,    \"statisticRelativeAlpha\" : 1.2846590061165319429647979632136411964893341064453125,    \"whiteassimilated\" : 6.70401929795003592715829654480330646038055419921875,    \"instrumentType\" : \"instrumentType\",    \"statisticRelativeCorrelation\" : 6.77832496304801335185175048536621034145355224609375,    \"feesExitMax\" : 5.962133916683182377482808078639209270477294921875,    \"collectiveInvestmentTransferableSecurities\" : true,    \"distributionFrequency\" : \"distributionFrequency\",    \"domicilie\" : \"domicilie\",    \"informationProvider\" : \"informationProvider\",    \"lastPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"baseCurrencyCode\" : \"baseCurrencyCode\",    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeFiveYears\" : 4.9652184929849543237878606305457651615142822265625,    \"currencyCode\" : \"currencyCode\",    \"lastPrice\" : 7.3862819483858839220147274318151175975799560546875,    \"minimunInvestmentSubsequent\" : 1.024645700144157789424070870154537260532379150390625  }, {    \"performanceCumulativeWeek\" : 6.683562403749608193948006373830139636993408203125,    \"transferable\" : true,    \"fundHouseId\" : 2,    \"statisticAbsoluteMaxDrawdown\" : 9.0183481860707832566959041287191212177276611328125,    \"feesInitialMax\" : 5.63737665663332876420099637471139430999755859375,    \"productStructure\" : \"productStructure\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"whiteassimilatedAnt\" : 3.35319334701124294184637619764544069766998291015625,    \"id\" : 4,    \"statisticAbsoluteSharpeRatio\" : 3.557195227068097320710649000830017030239105224609375,    \"statisticAbsoluteVolatility\" : 6.96511769763884558415156789124011993408203125,    \"replicationMethod\" : \"replicationMethod\",    \"rebalanceFrequency\" : \"rebalanceFrequency\",    \"shareTypeCode\" : \"shareTypeCode\",    \"statisticAbsolutePerformance\" : 6.438423552598546706349225132726132869720458984375,    \"indexName\" : \"indexName\",    \"fundAum\" : 9.301444243932575517419536481611430644989013671875,    \"dateAum\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeSixMonths\" : 9.965781217890562260208753286860883235931396484375,    \"statisticRelativeInfoRatio\" : 6.87805222012787620400331434211693704128265380859375,    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"performanceCumulativeOneYear\" : 5.02500479152029466689555192715488374233245849609375,    \"subscriptionType\" : \"subscriptionType\",    \"fundTypeCode\" : \"fundTypeCode\",    \"name\" : \"name\",    \"statisticRelativeTrackingError\" : 5.94489560761401580890606055618263781070709228515625,    \"fundCurrencyAumCode\" : \"fundCurrencyAumCode\",    \"performanceCumulativeThreeYears\" : 9.3693102714106686335071572102606296539306640625,    \"fundHouseGroupId\" : 3,    \"riskLevel\" : 8,    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"minimunInvestmentInitial\" : 1.231513536777255612975068288506008684635162353515625,    \"performanceAnnualYtd\" : 7.4577447736837658709418974467553198337554931640625,    \"dealingAvailable\" : true,    \"feesDistribution\" : 1.46581298050294517310021547018550336360931396484375,    \"performanceCumulativeDay\" : 1.173074250955943309548956676735542714595794677734375,    \"statisticRelativeBeta\" : 2.884162126668780246063761296682059764862060546875,    \"priipsReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"feesPerformance\" : 7.061401241503109105224211816675961017608642578125,    \"datePortfolio\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"feesAnnual\" : 6.02745618307040320615897144307382404804229736328125,    \"feesOperatingCashFlow\" : 2.3021358869347654518833223846741020679473876953125,    \"mifid2ReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceAnnualHistory1\" : 1.489415909854170383397331534069962799549102783203125,    \"performanceAnnualHistory2\" : 6.8468526983526398765889098285697400569915771484375,    \"statisticRelativeAlpha\" : 1.2846590061165319429647979632136411964893341064453125,    \"whiteassimilated\" : 6.70401929795003592715829654480330646038055419921875,    \"instrumentType\" : \"instrumentType\",    \"statisticRelativeCorrelation\" : 6.77832496304801335185175048536621034145355224609375,    \"feesExitMax\" : 5.962133916683182377482808078639209270477294921875,    \"collectiveInvestmentTransferableSecurities\" : true,    \"distributionFrequency\" : \"distributionFrequency\",    \"domicilie\" : \"domicilie\",    \"informationProvider\" : \"informationProvider\",    \"lastPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"baseCurrencyCode\" : \"baseCurrencyCode\",    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeFiveYears\" : 4.9652184929849543237878606305457651615142822265625,    \"currencyCode\" : \"currencyCode\",    \"lastPrice\" : 7.3862819483858839220147274318151175975799560546875,    \"minimunInvestmentSubsequent\" : 1.024645700144157789424070870154537260532379150390625  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchEtfPricesInstrumentsAsXls", nickname = "searchEtfPricesInstrumentsAsXlsUsingPOST", notes = "Generate operational report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/etfs/prices/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> searchEtfPricesInstrumentsAsXlsUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchPricesExcelFilterAndPageFilter instrumentSearchPricesExcelFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchFundHouseGroups", nickname = "searchFundHouseGroupsUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/fundHouseGroups/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchFundHouseGroupsUsingPOST(@ApiParam(value = "The FundHouseGroupFilterAndPageFilter object to use for this search" ,required=true )  @Valid @RequestBody FundHouseGroupFilterAndPageFilter fundHouseGroupFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchFundHouses", nickname = "searchFundHousesUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/fundHouses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchFundHousesUsingPOST(@ApiParam(value = "The FundHousesSearchFilterAndPageFilter object to use for this search" ,required=true )  @Valid @RequestBody FundHouseFilterAndPageFilter fundHouseFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchFundInstrumentsAsXls", nickname = "searchFundInstrumentsAsXlsUsingPOST", notes = "Generate operational report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/funds/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> searchFundInstrumentsAsXlsUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchExcelFilterAndPageFilter instrumentSearchExcelFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchFundInstrumentsResource", nickname = "searchFundInstrumentsResourceUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/funds/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchFundInstrumentsResourceUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchFilterAndPageFilter instrumentSearchFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchFundInstruments", nickname = "searchFundInstrumentsUsingPOST", notes = "", response = RawSearchInstrumentResultAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = RawSearchInstrumentResultAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/funds/raw",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RawSearchInstrumentResultAndPage> searchFundInstrumentsUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchExcelFilterAndPageFilter instrumentSearchExcelFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"results\" : [ {    \"performanceCumulativeWeek\" : 6.683562403749608193948006373830139636993408203125,    \"transferable\" : true,    \"fundHouseId\" : 2,    \"statisticAbsoluteMaxDrawdown\" : 9.0183481860707832566959041287191212177276611328125,    \"feesInitialMax\" : 5.63737665663332876420099637471139430999755859375,    \"productStructure\" : \"productStructure\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"whiteassimilatedAnt\" : 3.35319334701124294184637619764544069766998291015625,    \"id\" : 4,    \"statisticAbsoluteSharpeRatio\" : 3.557195227068097320710649000830017030239105224609375,    \"statisticAbsoluteVolatility\" : 6.96511769763884558415156789124011993408203125,    \"replicationMethod\" : \"replicationMethod\",    \"rebalanceFrequency\" : \"rebalanceFrequency\",    \"shareTypeCode\" : \"shareTypeCode\",    \"statisticAbsolutePerformance\" : 6.438423552598546706349225132726132869720458984375,    \"indexName\" : \"indexName\",    \"fundAum\" : 9.301444243932575517419536481611430644989013671875,    \"dateAum\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeSixMonths\" : 9.965781217890562260208753286860883235931396484375,    \"statisticRelativeInfoRatio\" : 6.87805222012787620400331434211693704128265380859375,    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"performanceCumulativeOneYear\" : 5.02500479152029466689555192715488374233245849609375,    \"subscriptionType\" : \"subscriptionType\",    \"fundTypeCode\" : \"fundTypeCode\",    \"name\" : \"name\",    \"statisticRelativeTrackingError\" : 5.94489560761401580890606055618263781070709228515625,    \"fundCurrencyAumCode\" : \"fundCurrencyAumCode\",    \"performanceCumulativeThreeYears\" : 9.3693102714106686335071572102606296539306640625,    \"fundHouseGroupId\" : 3,    \"riskLevel\" : 8,    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"minimunInvestmentInitial\" : 1.231513536777255612975068288506008684635162353515625,    \"performanceAnnualYtd\" : 7.4577447736837658709418974467553198337554931640625,    \"dealingAvailable\" : true,    \"feesDistribution\" : 1.46581298050294517310021547018550336360931396484375,    \"performanceCumulativeDay\" : 1.173074250955943309548956676735542714595794677734375,    \"statisticRelativeBeta\" : 2.884162126668780246063761296682059764862060546875,    \"priipsReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"feesPerformance\" : 7.061401241503109105224211816675961017608642578125,    \"datePortfolio\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"feesAnnual\" : 6.02745618307040320615897144307382404804229736328125,    \"feesOperatingCashFlow\" : 2.3021358869347654518833223846741020679473876953125,    \"mifid2ReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceAnnualHistory1\" : 1.489415909854170383397331534069962799549102783203125,    \"performanceAnnualHistory2\" : 6.8468526983526398765889098285697400569915771484375,    \"statisticRelativeAlpha\" : 1.2846590061165319429647979632136411964893341064453125,    \"whiteassimilated\" : 6.70401929795003592715829654480330646038055419921875,    \"instrumentType\" : \"instrumentType\",    \"statisticRelativeCorrelation\" : 6.77832496304801335185175048536621034145355224609375,    \"feesExitMax\" : 5.962133916683182377482808078639209270477294921875,    \"collectiveInvestmentTransferableSecurities\" : true,    \"distributionFrequency\" : \"distributionFrequency\",    \"domicilie\" : \"domicilie\",    \"informationProvider\" : \"informationProvider\",    \"lastPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"baseCurrencyCode\" : \"baseCurrencyCode\",    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeFiveYears\" : 4.9652184929849543237878606305457651615142822265625,    \"currencyCode\" : \"currencyCode\",    \"lastPrice\" : 7.3862819483858839220147274318151175975799560546875,    \"minimunInvestmentSubsequent\" : 1.024645700144157789424070870154537260532379150390625  }, {    \"performanceCumulativeWeek\" : 6.683562403749608193948006373830139636993408203125,    \"transferable\" : true,    \"fundHouseId\" : 2,    \"statisticAbsoluteMaxDrawdown\" : 9.0183481860707832566959041287191212177276611328125,    \"feesInitialMax\" : 5.63737665663332876420099637471139430999755859375,    \"productStructure\" : \"productStructure\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"whiteassimilatedAnt\" : 3.35319334701124294184637619764544069766998291015625,    \"id\" : 4,    \"statisticAbsoluteSharpeRatio\" : 3.557195227068097320710649000830017030239105224609375,    \"statisticAbsoluteVolatility\" : 6.96511769763884558415156789124011993408203125,    \"replicationMethod\" : \"replicationMethod\",    \"rebalanceFrequency\" : \"rebalanceFrequency\",    \"shareTypeCode\" : \"shareTypeCode\",    \"statisticAbsolutePerformance\" : 6.438423552598546706349225132726132869720458984375,    \"indexName\" : \"indexName\",    \"fundAum\" : 9.301444243932575517419536481611430644989013671875,    \"dateAum\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeSixMonths\" : 9.965781217890562260208753286860883235931396484375,    \"statisticRelativeInfoRatio\" : 6.87805222012787620400331434211693704128265380859375,    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"performanceCumulativeOneYear\" : 5.02500479152029466689555192715488374233245849609375,    \"subscriptionType\" : \"subscriptionType\",    \"fundTypeCode\" : \"fundTypeCode\",    \"name\" : \"name\",    \"statisticRelativeTrackingError\" : 5.94489560761401580890606055618263781070709228515625,    \"fundCurrencyAumCode\" : \"fundCurrencyAumCode\",    \"performanceCumulativeThreeYears\" : 9.3693102714106686335071572102606296539306640625,    \"fundHouseGroupId\" : 3,    \"riskLevel\" : 8,    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"minimunInvestmentInitial\" : 1.231513536777255612975068288506008684635162353515625,    \"performanceAnnualYtd\" : 7.4577447736837658709418974467553198337554931640625,    \"dealingAvailable\" : true,    \"feesDistribution\" : 1.46581298050294517310021547018550336360931396484375,    \"performanceCumulativeDay\" : 1.173074250955943309548956676735542714595794677734375,    \"statisticRelativeBeta\" : 2.884162126668780246063761296682059764862060546875,    \"priipsReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"feesPerformance\" : 7.061401241503109105224211816675961017608642578125,    \"datePortfolio\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"feesAnnual\" : 6.02745618307040320615897144307382404804229736328125,    \"feesOperatingCashFlow\" : 2.3021358869347654518833223846741020679473876953125,    \"mifid2ReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceAnnualHistory1\" : 1.489415909854170383397331534069962799549102783203125,    \"performanceAnnualHistory2\" : 6.8468526983526398765889098285697400569915771484375,    \"statisticRelativeAlpha\" : 1.2846590061165319429647979632136411964893341064453125,    \"whiteassimilated\" : 6.70401929795003592715829654480330646038055419921875,    \"instrumentType\" : \"instrumentType\",    \"statisticRelativeCorrelation\" : 6.77832496304801335185175048536621034145355224609375,    \"feesExitMax\" : 5.962133916683182377482808078639209270477294921875,    \"collectiveInvestmentTransferableSecurities\" : true,    \"distributionFrequency\" : \"distributionFrequency\",    \"domicilie\" : \"domicilie\",    \"informationProvider\" : \"informationProvider\",    \"lastPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"baseCurrencyCode\" : \"baseCurrencyCode\",    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeFiveYears\" : 4.9652184929849543237878606305457651615142822265625,    \"currencyCode\" : \"currencyCode\",    \"lastPrice\" : 7.3862819483858839220147274318151175975799560546875,    \"minimunInvestmentSubsequent\" : 1.024645700144157789424070870154537260532379150390625  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchFundPricesInstrumentsAsXls", nickname = "searchFundPricesInstrumentsAsXlsUsingPOST", notes = "Generate operational report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/funds/prices/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> searchFundPricesInstrumentsAsXlsUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchPricesExcelFilterAndPageFilter instrumentSearchPricesExcelFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchFundsReports", nickname = "searchFundsReportsUsingPOST", notes = "", response = DocumentAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DocumentAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/documents/fundsReports/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DocumentAndPage> searchFundsReportsUsingPOST(@ApiParam(value = "The {SearchDocumentEngineFilter} object to use for this search" ,required=true )  @Valid @RequestBody DocumentEngineFilterAndPageFilter documentEngineFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"documents\" : [ {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  }, {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchInstrumentsAnyResource", nickname = "searchInstrumentsAnyResourceUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/any/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchInstrumentsAnyResourceUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchFilterAndPageFilter instrumentSearchFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchInstrumentsAsXls", nickname = "searchInstrumentsAsXlsUsingPOST", notes = "Generate operational report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/any/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> searchInstrumentsAsXlsUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchExcelFilterAndPageFilter instrumentSearchExcelFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchInstrumentsClassesResource", nickname = "searchInstrumentsClassesResourceUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/classes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchInstrumentsClassesResourceUsingPOST(@ApiParam(value = "The InstrumentSearchClassFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchClassFilterAndPageFilter instrumentSearchClassFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchInstrumentsCodesResource", nickname = "searchInstrumentsCodesResourceUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/codes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchInstrumentsCodesResourceUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchByCodeFilterAndPageFilter instrumentSearchByCodeFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchInstrumentsResource", nickname = "searchInstrumentsResourceUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchInstrumentsResourceUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchFilterAndPageFilter instrumentSearchFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchInstruments", nickname = "searchInstrumentsUsingPOST", notes = "", response = RawSearchInstrumentResultAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = RawSearchInstrumentResultAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/any/raw",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RawSearchInstrumentResultAndPage> searchInstrumentsUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchExcelFilterAndPageFilter instrumentSearchExcelFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"results\" : [ {    \"performanceCumulativeWeek\" : 6.683562403749608193948006373830139636993408203125,    \"transferable\" : true,    \"fundHouseId\" : 2,    \"statisticAbsoluteMaxDrawdown\" : 9.0183481860707832566959041287191212177276611328125,    \"feesInitialMax\" : 5.63737665663332876420099637471139430999755859375,    \"productStructure\" : \"productStructure\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"whiteassimilatedAnt\" : 3.35319334701124294184637619764544069766998291015625,    \"id\" : 4,    \"statisticAbsoluteSharpeRatio\" : 3.557195227068097320710649000830017030239105224609375,    \"statisticAbsoluteVolatility\" : 6.96511769763884558415156789124011993408203125,    \"replicationMethod\" : \"replicationMethod\",    \"rebalanceFrequency\" : \"rebalanceFrequency\",    \"shareTypeCode\" : \"shareTypeCode\",    \"statisticAbsolutePerformance\" : 6.438423552598546706349225132726132869720458984375,    \"indexName\" : \"indexName\",    \"fundAum\" : 9.301444243932575517419536481611430644989013671875,    \"dateAum\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeSixMonths\" : 9.965781217890562260208753286860883235931396484375,    \"statisticRelativeInfoRatio\" : 6.87805222012787620400331434211693704128265380859375,    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"performanceCumulativeOneYear\" : 5.02500479152029466689555192715488374233245849609375,    \"subscriptionType\" : \"subscriptionType\",    \"fundTypeCode\" : \"fundTypeCode\",    \"name\" : \"name\",    \"statisticRelativeTrackingError\" : 5.94489560761401580890606055618263781070709228515625,    \"fundCurrencyAumCode\" : \"fundCurrencyAumCode\",    \"performanceCumulativeThreeYears\" : 9.3693102714106686335071572102606296539306640625,    \"fundHouseGroupId\" : 3,    \"riskLevel\" : 8,    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"minimunInvestmentInitial\" : 1.231513536777255612975068288506008684635162353515625,    \"performanceAnnualYtd\" : 7.4577447736837658709418974467553198337554931640625,    \"dealingAvailable\" : true,    \"feesDistribution\" : 1.46581298050294517310021547018550336360931396484375,    \"performanceCumulativeDay\" : 1.173074250955943309548956676735542714595794677734375,    \"statisticRelativeBeta\" : 2.884162126668780246063761296682059764862060546875,    \"priipsReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"feesPerformance\" : 7.061401241503109105224211816675961017608642578125,    \"datePortfolio\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"feesAnnual\" : 6.02745618307040320615897144307382404804229736328125,    \"feesOperatingCashFlow\" : 2.3021358869347654518833223846741020679473876953125,    \"mifid2ReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceAnnualHistory1\" : 1.489415909854170383397331534069962799549102783203125,    \"performanceAnnualHistory2\" : 6.8468526983526398765889098285697400569915771484375,    \"statisticRelativeAlpha\" : 1.2846590061165319429647979632136411964893341064453125,    \"whiteassimilated\" : 6.70401929795003592715829654480330646038055419921875,    \"instrumentType\" : \"instrumentType\",    \"statisticRelativeCorrelation\" : 6.77832496304801335185175048536621034145355224609375,    \"feesExitMax\" : 5.962133916683182377482808078639209270477294921875,    \"collectiveInvestmentTransferableSecurities\" : true,    \"distributionFrequency\" : \"distributionFrequency\",    \"domicilie\" : \"domicilie\",    \"informationProvider\" : \"informationProvider\",    \"lastPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"baseCurrencyCode\" : \"baseCurrencyCode\",    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeFiveYears\" : 4.9652184929849543237878606305457651615142822265625,    \"currencyCode\" : \"currencyCode\",    \"lastPrice\" : 7.3862819483858839220147274318151175975799560546875,    \"minimunInvestmentSubsequent\" : 1.024645700144157789424070870154537260532379150390625  }, {    \"performanceCumulativeWeek\" : 6.683562403749608193948006373830139636993408203125,    \"transferable\" : true,    \"fundHouseId\" : 2,    \"statisticAbsoluteMaxDrawdown\" : 9.0183481860707832566959041287191212177276611328125,    \"feesInitialMax\" : 5.63737665663332876420099637471139430999755859375,    \"productStructure\" : \"productStructure\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"whiteassimilatedAnt\" : 3.35319334701124294184637619764544069766998291015625,    \"id\" : 4,    \"statisticAbsoluteSharpeRatio\" : 3.557195227068097320710649000830017030239105224609375,    \"statisticAbsoluteVolatility\" : 6.96511769763884558415156789124011993408203125,    \"replicationMethod\" : \"replicationMethod\",    \"rebalanceFrequency\" : \"rebalanceFrequency\",    \"shareTypeCode\" : \"shareTypeCode\",    \"statisticAbsolutePerformance\" : 6.438423552598546706349225132726132869720458984375,    \"indexName\" : \"indexName\",    \"fundAum\" : 9.301444243932575517419536481611430644989013671875,    \"dateAum\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeSixMonths\" : 9.965781217890562260208753286860883235931396484375,    \"statisticRelativeInfoRatio\" : 6.87805222012787620400331434211693704128265380859375,    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"performanceCumulativeOneYear\" : 5.02500479152029466689555192715488374233245849609375,    \"subscriptionType\" : \"subscriptionType\",    \"fundTypeCode\" : \"fundTypeCode\",    \"name\" : \"name\",    \"statisticRelativeTrackingError\" : 5.94489560761401580890606055618263781070709228515625,    \"fundCurrencyAumCode\" : \"fundCurrencyAumCode\",    \"performanceCumulativeThreeYears\" : 9.3693102714106686335071572102606296539306640625,    \"fundHouseGroupId\" : 3,    \"riskLevel\" : 8,    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"minimunInvestmentInitial\" : 1.231513536777255612975068288506008684635162353515625,    \"performanceAnnualYtd\" : 7.4577447736837658709418974467553198337554931640625,    \"dealingAvailable\" : true,    \"feesDistribution\" : 1.46581298050294517310021547018550336360931396484375,    \"performanceCumulativeDay\" : 1.173074250955943309548956676735542714595794677734375,    \"statisticRelativeBeta\" : 2.884162126668780246063761296682059764862060546875,    \"priipsReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"feesPerformance\" : 7.061401241503109105224211816675961017608642578125,    \"datePortfolio\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"feesAnnual\" : 6.02745618307040320615897144307382404804229736328125,    \"feesOperatingCashFlow\" : 2.3021358869347654518833223846741020679473876953125,    \"mifid2ReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceAnnualHistory1\" : 1.489415909854170383397331534069962799549102783203125,    \"performanceAnnualHistory2\" : 6.8468526983526398765889098285697400569915771484375,    \"statisticRelativeAlpha\" : 1.2846590061165319429647979632136411964893341064453125,    \"whiteassimilated\" : 6.70401929795003592715829654480330646038055419921875,    \"instrumentType\" : \"instrumentType\",    \"statisticRelativeCorrelation\" : 6.77832496304801335185175048536621034145355224609375,    \"feesExitMax\" : 5.962133916683182377482808078639209270477294921875,    \"collectiveInvestmentTransferableSecurities\" : true,    \"distributionFrequency\" : \"distributionFrequency\",    \"domicilie\" : \"domicilie\",    \"informationProvider\" : \"informationProvider\",    \"lastPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"baseCurrencyCode\" : \"baseCurrencyCode\",    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeFiveYears\" : 4.9652184929849543237878606305457651615142822265625,    \"currencyCode\" : \"currencyCode\",    \"lastPrice\" : 7.3862819483858839220147274318151175975799560546875,    \"minimunInvestmentSubsequent\" : 1.024645700144157789424070870154537260532379150390625  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchLegalDocuments", nickname = "searchLegalDocumentsUsingPOST", notes = "", response = DocumentAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DocumentAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/documents/legalDocuments/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DocumentAndPage> searchLegalDocumentsUsingPOST(@ApiParam(value = "The {DocumentLegalFilterAndPageFilter} object to use for this search" ,required=true )  @Valid @RequestBody DocumentLegalFilterAndPageFilter documentLegalFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"documents\" : [ {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  }, {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchMarketReports", nickname = "searchMarketReportsUsingPOST", notes = "", response = DocumentAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DocumentAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/documents/marketReports/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DocumentAndPage> searchMarketReportsUsingPOST(@ApiParam(value = "The {DocumentEngineFilterAndPageFilter} object to use for this search" ,required=true )  @Valid @RequestBody DocumentEngineFilterAndPageFilter documentEngineFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"documents\" : [ {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  }, {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchPopularEtfsAsXls", nickname = "searchPopularEtfsAsXlsUsingPOST", notes = "Generate operational report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/popular/etfs/list/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> searchPopularEtfsAsXlsUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchPopularExcelFilterAndPageFilter instrumentSearchPopularExcelFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchPopularEtfs", nickname = "searchPopularEtfsUsingPOST", notes = "Get a list of popular etfs", response = RankingAndResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = RankingAndResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/popular/etfs/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RankingAndResourceReferenceAndPage> searchPopularEtfsUsingPOST(@ApiParam(value = "body"  )  @Valid @RequestBody PopularFilterAndPageFilter popularFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"rankingAndResourceReference\" : [ {    \"resource\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"ranking\" : 0,    \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\"  }, {    \"resource\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"ranking\" : 0,    \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchPopularFundsAsXls", nickname = "searchPopularFundsAsXlsUsingPOST", notes = "Generate operational report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/popular/list/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> searchPopularFundsAsXlsUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchPopularExcelFilterAndPageFilter instrumentSearchPopularExcelFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchPopularFunds", nickname = "searchPopularFundsUsingPOST", notes = "Get a list of popular funds", response = RankingAndResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = RankingAndResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/instruments/popular/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RankingAndResourceReferenceAndPage> searchPopularFundsUsingPOST(@ApiParam(value = "body"  )  @Valid @RequestBody PopularFilterAndPageFilter popularFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"rankingAndResourceReference\" : [ {    \"resource\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"ranking\" : 0,    \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\"  }, {    \"resource\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"ranking\" : 0,    \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchSolvencyDistributorAuthorizations", nickname = "searchSolvencyDistributorAuthorizationsUsingPOST", notes = "", response = SolvencyDistributorAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SolvencyDistributorAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/solvency/distributors/authorizations/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SolvencyDistributorAndPage> searchSolvencyDistributorAuthorizationsUsingPOST(@ApiParam(value = "The solvencyDistributorSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody SolvencyDistributorFilterAndPageFilter solvencyDistributorFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"distributors\" : [ {    \"intermediaryName\" : \"intermediaryName\",    \"solvencyFund\" : {      \"file\" : {        \"filename\" : \"filename\",        \"size\" : 0,        \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"title\" : \"title\",        \"url\" : \"url\"      },      \"name\" : \"name\",      \"description\" : \"description\",      \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"id\" : \"id\",      \"isin\" : \"isin\"    },    \"estimatedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"fundHouseGroupName\" : \"fundHouseGroupName\",    \"authorizedCode\" : \"authorizedCode\"  }, {    \"intermediaryName\" : \"intermediaryName\",    \"solvencyFund\" : {      \"file\" : {        \"filename\" : \"filename\",        \"size\" : 0,        \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"title\" : \"title\",        \"url\" : \"url\"      },      \"name\" : \"name\",      \"description\" : \"description\",      \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"id\" : \"id\",      \"isin\" : \"isin\"    },    \"estimatedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"fundHouseGroupName\" : \"fundHouseGroupName\",    \"authorizedCode\" : \"authorizedCode\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchSolvencyFundHouseGroupAuthorizations", nickname = "searchSolvencyFundHouseGroupAuthorizationsUsingPOST", notes = "", response = SolvencyFundHouseGroupAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SolvencyFundHouseGroupAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/solvency/fundHousesGroup/authorizations/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SolvencyFundHouseGroupAndPage> searchSolvencyFundHouseGroupAuthorizationsUsingPOST(@ApiParam(value = "The solvencyFundHouseGroupSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody SolvencyFundHouseGroupSearchFilterAndPageFilter solvencyFundHouseGroupSearchFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"fundHouseGroups\" : [ {    \"distributorName\" : \"distributorName\",    \"solvencyFund\" : {      \"file\" : {        \"filename\" : \"filename\",        \"size\" : 0,        \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"title\" : \"title\",        \"url\" : \"url\"      },      \"name\" : \"name\",      \"description\" : \"description\",      \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"id\" : \"id\",      \"isin\" : \"isin\"    },    \"authorizedCode\" : \"authorizedCode\"  }, {    \"distributorName\" : \"distributorName\",    \"solvencyFund\" : {      \"file\" : {        \"filename\" : \"filename\",        \"size\" : 0,        \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"title\" : \"title\",        \"url\" : \"url\"      },      \"name\" : \"name\",      \"description\" : \"description\",      \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"id\" : \"id\",      \"isin\" : \"isin\"    },    \"authorizedCode\" : \"authorizedCode\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchSolvencyInstruments", nickname = "searchSolvencyInstrumentsUsingPOST", notes = "", response = SolvencyFundAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SolvencyFundAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/solvency/intruments/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SolvencyFundAndPage> searchSolvencyInstrumentsUsingPOST(@ApiParam(value = "The InstrumentSearchByCodeFilterAndPageFilter object to use for this search" ,required=true )  @Valid @RequestBody InstrumentSearchByCodeFilterAndPageFilter instrumentSearchByCodeFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"fundHouseGroups\" : [ {    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"name\" : \"name\",    \"description\" : \"description\",    \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"id\" : \"id\",    \"isin\" : \"isin\"  }, {    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"name\" : \"name\",    \"description\" : \"description\",    \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"id\" : \"id\",    \"isin\" : \"isin\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchTheoreticalPortfolios", nickname = "searchTheoreticalPortfoliosUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/portfolios/theoretical/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchTheoreticalPortfoliosUsingPOST(@ApiParam(value = "The {TheoreticalPortfolioFilterAndPageFilter} object to use for this search" ,required=true )  @Valid @RequestBody TheoreticalPortfolioFilterAndPageFilter theoreticalPortfolioFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "searchUsers", nickname = "searchUsersUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/search/users/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> searchUsersUsingPOST(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody DistributorFilterAndPageFilter distributorFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
