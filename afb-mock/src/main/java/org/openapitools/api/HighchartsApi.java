/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.HealthResponse;
import org.openapitools.model.HighChartsImageFromJSRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "highcharts", description = "the highcharts API")
public interface HighchartsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "checkHealth", nickname = "checkHealthUsingPOST", notes = "This service checks the health of the phantomJS servers pool. ", response = HealthResponse.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "highcharts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = HealthResponse.class) })
    @RequestMapping(value = "/highcharts/checkHealth",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<HealthResponse> checkHealthUsingPOST() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"date\",  \"result\" : \"result\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "cleanPool", nickname = "cleanPoolUsingPOST", notes = "This service cleans the HighCharts servers pool. ", response = String.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "highcharts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/highcharts/cleanPool",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<String> cleanPoolUsingPOST(@ApiParam(value = "If true the phantomjs processes will be killed before pool restarting."  )  @Valid @RequestBody Boolean body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getPNGImageFromJS", nickname = "getPNGImageFromJSUsingPOST", notes = "This service receives a Json with all the parameters needed for the creation of a HighCharts image and returns the HighCharts image in form of base64 encoded string. ", response = String.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "highcharts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/highcharts/getImageFromJS",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<String> getPNGImageFromJSUsingPOST(@ApiParam(value = "message"  )  @Valid @RequestBody HighChartsImageFromJSRequest highChartsImageFromJSRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
