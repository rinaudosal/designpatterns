/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CursorFilter;
import org.openapitools.model.Depositary;
import org.openapitools.model.DepositaryAndPage;
import org.openapitools.model.ExcelAndCursor;
import org.openapitools.model.HaltedTransactionAndCursor;
import org.openapitools.model.PageFilter;
import org.openapitools.model.TradingLimitAndCursor;
import org.openapitools.model.TradingLimitFilterAndCursorFilter;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "depositaries", description = "the depositaries API")
public interface DepositariesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "getDepositaryById", nickname = "getDepositaryByIdUsingGET", notes = "", response = Depositary.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "depositaries", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Depositary.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/depositaries/{depositaryId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Depositary> getDepositaryByIdUsingGET(@ApiParam(value = "The Id of the {Depositary}",required=true) @PathVariable("depositaryId") Long depositaryId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"distributorId\" : 0,  \"name\" : \"name\",  \"accountCodeRequired\" : true,  \"id\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listDepositaries", nickname = "listDepositariesUsingPOST", notes = "Returns list of depositaries", response = DepositaryAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "depositaries", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DepositaryAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/depositaries/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DepositaryAndPage> listDepositariesUsingPOST(@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"depositaries\" : [ {    \"distributorId\" : 0,    \"name\" : \"name\",    \"accountCodeRequired\" : true,    \"id\" : 6  }, {    \"distributorId\" : 0,    \"name\" : \"name\",    \"accountCodeRequired\" : true,    \"id\" : 6  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateHaltedTransactionsBreakdownAsXls", nickname = "navigateHaltedTransactionsBreakdownAsXlsUsingPOST", notes = "Returns an Excel file with a list of {Transactions} int", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "depositaries", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/depositaries/{depositaryId}/tradingLimits/{tradingLimitId}/breakdowns/transactions/navigate/xls",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateHaltedTransactionsBreakdownAsXlsUsingPOST(@ApiParam(value = "The Id of the {Depositary}",required=true) @PathVariable("depositaryId") Long depositaryId,@ApiParam(value = "The Id of the {tradingLimit}",required=true) @PathVariable("tradingLimitId") String tradingLimitId,@ApiParam(value = "body"  )  @Valid @RequestBody CursorFilter cursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateHaltedTransactionsBreakdown", nickname = "navigateHaltedTransactionsBreakdownUsingPOST", notes = "Returns list of {Transactions}", response = HaltedTransactionAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "depositaries", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = HaltedTransactionAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/depositaries/{depositaryId}/tradingLimits/{tradingLimitId}/breakdowns/transactions/navigate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HaltedTransactionAndCursor> navigateHaltedTransactionsBreakdownUsingPOST(@ApiParam(value = "The Id of the {Depositary}",required=true) @PathVariable("depositaryId") Long depositaryId,@ApiParam(value = "The Id of the {tradingLimit}",required=true) @PathVariable("tradingLimitId") String tradingLimitId,@ApiParam(value = "body"  )  @Valid @RequestBody CursorFilter cursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"transactions\" : [ {    \"settlemnetDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"tradingLimitAmountApplied\" : 6.02745618307040320615897144307382404804229736328125,    \"distributorId\" : 0,    \"confirmartionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"dealingInstrumentType\" : \"FUND\",    \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"contractExternalReference\" : \"contractExternalReference\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"transaction\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  }, {    \"settlemnetDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"tradingLimitAmountApplied\" : 6.02745618307040320615897144307382404804229736328125,    \"distributorId\" : 0,    \"confirmartionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"dealingInstrumentType\" : \"FUND\",    \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"contractExternalReference\" : \"contractExternalReference\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"transaction\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateTradingLimitsAsXls", nickname = "navigateTradingLimitsAsXlsUsingPOST", notes = "Returns an Excel file with a list of {TradingLimits}", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "depositaries", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/depositaries/{depositaryId}/tradingLimits/navigate/xls",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateTradingLimitsAsXlsUsingPOST(@ApiParam(value = "The Id of the {Depositary}",required=true) @PathVariable("depositaryId") Long depositaryId,@ApiParam(value = "body"  )  @Valid @RequestBody TradingLimitFilterAndCursorFilter tradingLimitFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateTradingLimits", nickname = "navigateTradingLimitsUsingPOST", notes = "Returns list of {TradingLimits}", response = TradingLimitAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "depositaries", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TradingLimitAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/depositaries/{depositaryId}/tradingLimits/navigate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<TradingLimitAndCursor> navigateTradingLimitsUsingPOST(@ApiParam(value = "The Id of the {Depositary}",required=true) @PathVariable("depositaryId") Long depositaryId,@ApiParam(value = "body"  )  @Valid @RequestBody TradingLimitFilterAndCursorFilter tradingLimitFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"tradingLimits\" : [ {    \"currentConsumedAmount\" : 6.02745618307040320615897144307382404804229736328125,    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"thresholdAmount\" : 2.3021358869347654518833223846741020679473876953125,    \"productId\" : 5,    \"depositaryId\" : 1,    \"distributorId\" : 5,    \"haltAllSubscriptions\" : true,    \"haltAllTrades\" : true,    \"id\" : \"id\",    \"thresholdPercetange\" : 7.061401241503109105224211816675961017608642578125,    \"haltedTransactions\" : true,    \"status\" : \"ACTIVE\"  }, {    \"currentConsumedAmount\" : 6.02745618307040320615897144307382404804229736328125,    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"thresholdAmount\" : 2.3021358869347654518833223846741020679473876953125,    \"productId\" : 5,    \"depositaryId\" : 1,    \"distributorId\" : 5,    \"haltAllSubscriptions\" : true,    \"haltAllTrades\" : true,    \"id\" : \"id\",    \"thresholdPercetange\" : 7.061401241503109105224211816675961017608642578125,    \"haltedTransactions\" : true,    \"status\" : \"ACTIVE\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
