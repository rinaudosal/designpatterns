/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ApiBean;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "dozer", description = "the dozer API")
public interface DozerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "getDozer", nickname = "getDozerUsingGET", notes = "This is a simple service that test the Dozer infrastructure. The Dozer service is in charge of translating API into  internal beans, and vis-versa. This method will return a list of dummy ApiBean. It is meant to facilitate the  testing of a new infrastructure or deployment. It is not meant to be used in a production environment. ", response = ApiBean.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "dozer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ApiBean.class, responseContainer = "List") })
    @RequestMapping(value = "/dozer",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ApiBean>> getDozerUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"apiString\" : \"apiString\",  \"apiString2Boolean\" : true,  \"apiInt\" : 6,  \"apiUrl\" : \"apiUrl\",  \"apiSubBean\" : {    \"apiSubString\" : \"apiSubString\"  },  \"apiDouble\" : 0.80082819046101150206595775671303272247314453125,  \"apiDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"apiDate2String\" : \"apiDate2String\",  \"apiSubBeans\" : [ {    \"apiSubString\" : \"apiSubString\"  }, {    \"apiSubString\" : \"apiSubString\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "postDozer", nickname = "postDozerUsingPOST", notes = "This is a simple service that test the Dozer infrastructure. The Dozer service is in charge of translating API into  internal beans, and vis-versa. This method will return a modified ApiBean copy of the ApiBean passed as parameter. It is meant to facilitate the testing of a new infrastructure or deployment. It is not meant to be used in a  production environment. ", response = ApiBean.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "dozer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ApiBean.class) })
    @RequestMapping(value = "/dozer",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ApiBean> postDozerUsingPOST(@ApiParam(value = "A simple DozerBean" ,required=true )  @Valid @RequestBody ApiBean apiBean) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"apiString\" : \"apiString\",  \"apiString2Boolean\" : true,  \"apiInt\" : 6,  \"apiUrl\" : \"apiUrl\",  \"apiSubBean\" : {    \"apiSubString\" : \"apiSubString\"  },  \"apiDouble\" : 0.80082819046101150206595775671303272247314453125,  \"apiDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"apiDate2String\" : \"apiDate2String\",  \"apiSubBeans\" : [ {    \"apiSubString\" : \"apiSubString\"  }, {    \"apiSubString\" : \"apiSubString\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
