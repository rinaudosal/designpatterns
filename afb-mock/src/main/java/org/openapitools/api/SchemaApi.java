/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Account;
import org.openapitools.model.AccountAndCursor;
import org.openapitools.model.AccountFilter;
import org.openapitools.model.AccountFilterAndCursorFilter;
import org.openapitools.model.Address;
import org.openapitools.model.AnnualPerformance;
import org.openapitools.model.ApiError;
import org.openapitools.model.BreakdownFilter;
import org.openapitools.model.Client;
import org.openapitools.model.ClientAddress;
import org.openapitools.model.ClientAddressAssociation;
import org.openapitools.model.ClientAndCursor;
import org.openapitools.model.ClientAndSignature;
import org.openapitools.model.ClientFilter;
import org.openapitools.model.ClientFilterAndCursorFilter;
import org.openapitools.model.ClientSummary;
import org.openapitools.model.ClientSummaryAndCursor;
import org.openapitools.model.Contract;
import org.openapitools.model.ContractAccount;
import org.openapitools.model.ContractAndSignature;
import org.openapitools.model.ContractFilter;
import org.openapitools.model.ContractFilterAndCursorFilter;
import org.openapitools.model.ContractSummary;
import org.openapitools.model.ContractSummaryAndCursor;
import org.openapitools.model.Country;
import org.openapitools.model.CumulativePerformance;
import org.openapitools.model.Cursor;
import org.openapitools.model.CursorFilter;
import org.openapitools.model.Depositary;
import org.openapitools.model.DepositaryAndPage;
import org.openapitools.model.Distributor;
import org.openapitools.model.DistributorAndPage;
import org.openapitools.model.DistributorSettings;
import org.openapitools.model.Fees;
import org.openapitools.model.FeesFilter;
import org.openapitools.model.ForeignClientData;
import org.openapitools.model.Fund;
import org.openapitools.model.FundHouse;
import org.openapitools.model.GenericBreakdown;
import org.openapitools.model.Holding;
import org.openapitools.model.HoldingAndCursor;
import org.openapitools.model.HoldingBreakdown;
import org.openapitools.model.HoldingFilter;
import org.openapitools.model.HoldingFilterAndCursorFilter;
import org.openapitools.model.InstrumentSearchByCodeFilter;
import org.openapitools.model.ItalianRetailMarketClientData;
import org.openapitools.model.ItalianRetailMarketContractInformation;
import org.openapitools.model.ItalianRetailMarketFatcaData;
import org.openapitools.model.Market;
import org.openapitools.model.OperationalDetails;
import org.openapitools.model.Petition;
import org.openapitools.model.PetitionFilter;
import org.openapitools.model.Portfolio;
import org.openapitools.model.Price;
import org.openapitools.model.PriceFilter;
import org.openapitools.model.Product;
import org.openapitools.model.ProductAndPage;
import org.openapitools.model.QuarterlyPerformance;
import org.openapitools.model.RoadType;
import org.openapitools.model.Shareholder;
import org.openapitools.model.Statistic;
import org.openapitools.model.Subdistributor;
import org.openapitools.model.SubdistributorAndPage;
import org.openapitools.model.Transfer;
import org.openapitools.model.TransferFilter;
import org.openapitools.model.TransferSummary;
import org.openapitools.model.User;
import org.openapitools.model.ValidationMessage;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "schema", description = "the schema API")
public interface SchemaApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "getSchemaAccountAndCursor", nickname = "getSchemaAccountAndCursorUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = AccountAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = AccountAndCursor.class) })
    @RequestMapping(value = "/schema/AccountAndCursor",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AccountAndCursor> getSchemaAccountAndCursorUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"accounts\" : [ {    \"currentAccountCode\" : \"currentAccountCode\",    \"productId\" : 6,    \"name\" : \"name\",    \"id\" : \"id\",    \"dealingFundHouseId\" : 0  }, {    \"currentAccountCode\" : \"currentAccountCode\",    \"productId\" : 6,    \"name\" : \"name\",    \"id\" : \"id\",    \"dealingFundHouseId\" : 0  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaAccountFilterAndCursorFilter", nickname = "getSchemaAccountFilterAndCursorFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = AccountFilterAndCursorFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = AccountFilterAndCursorFilter.class) })
    @RequestMapping(value = "/schema/AccountFilterAndCursorFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AccountFilterAndCursorFilter> getSchemaAccountFilterAndCursorFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"accountFilter\" : {    \"productId\" : 6,    \"dealingFundHouseId\" : 0  },  \"cursorFilter\" : {    \"cursorString\" : \"cursorString\",    \"direction\" : \"PREVIOUS\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaAccountFilter", nickname = "getSchemaAccountFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = AccountFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = AccountFilter.class) })
    @RequestMapping(value = "/schema/AccountFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AccountFilter> getSchemaAccountFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"productId\" : 6,  \"dealingFundHouseId\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaAccount", nickname = "getSchemaAccountUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Account.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Account.class) })
    @RequestMapping(value = "/schema/Account",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Account> getSchemaAccountUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"currentAccountCode\" : \"currentAccountCode\",  \"productId\" : 6,  \"name\" : \"name\",  \"id\" : \"id\",  \"dealingFundHouseId\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaAddress", nickname = "getSchemaAddressUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Address.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Address.class) })
    @RequestMapping(value = "/schema/Address",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Address> getSchemaAddressUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"roadTypeCode\" : \"roadTypeCode\",  \"zipCode\" : \"zipCode\",  \"regionCode\" : \"regionCode\",  \"address\" : \"address\",  \"complementaryAddress\" : \"complementaryAddress\",  \"city\" : \"city\",  \"countryCode\" : \"countryCode\",  \"region\" : \"region\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaAnnualPerformance", nickname = "getSchemaAnnualPerformanceUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = AnnualPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = AnnualPerformance.class) })
    @RequestMapping(value = "/schema/AnnualPerfomance",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AnnualPerformance> getSchemaAnnualPerformanceUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"history1\" : 0.80082819046101150206595775671303272247314453125,  \"calculationPeriod\" : {    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"history2\" : 6.02745618307040320615897144307382404804229736328125,  \"history3\" : 1.46581298050294517310021547018550336360931396484375,  \"ytd\" : 2.3021358869347654518833223846741020679473876953125,  \"history4\" : 5.962133916683182377482808078639209270477294921875,  \"history5\" : 5.63737665663332876420099637471139430999755859375}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaApiError", nickname = "getSchemaApiErrorUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ApiError.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ApiError.class) })
    @RequestMapping(value = "/schema/ApiError",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ApiError> getSchemaApiErrorUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"transaction_id\" : \"transaction_id\",  \"code\" : \"code\",  \"message\" : \"message\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaBreakdownFilter", nickname = "getSchemaBreakdownFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = BreakdownFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = BreakdownFilter.class) })
    @RequestMapping(value = "/schema/BreakdownFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<BreakdownFilter> getSchemaBreakdownFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaClientAddressAssociation", nickname = "getSchemaClientAddressAssociationUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ClientAddressAssociation.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ClientAddressAssociation.class) })
    @RequestMapping(value = "/schema/ClientAddressAssociation",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ClientAddressAssociation> getSchemaClientAddressAssociationUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"clientExternalReference\" : \"clientExternalReference\",  \"clientId\" : \"clientId\",  \"addressExternalReference\" : \"addressExternalReference\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaClientAddress", nickname = "getSchemaClientAddressUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ClientAddress.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ClientAddress.class) })
    @RequestMapping(value = "/schema/ClientAddress",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ClientAddress> getSchemaClientAddressUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"externalReference\" : \"externalReference\",  \"address\" : {    \"roadTypeCode\" : \"roadTypeCode\",    \"zipCode\" : \"zipCode\",    \"regionCode\" : \"regionCode\",    \"address\" : \"address\",    \"complementaryAddress\" : \"complementaryAddress\",    \"city\" : \"city\",    \"countryCode\" : \"countryCode\",    \"region\" : \"region\"  },  \"fiscalAddress\" : true,  \"residentAddress\" : true}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaClientAndCursor", nickname = "getSchemaClientAndCursorUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ClientAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ClientAndCursor.class) })
    @RequestMapping(value = "/schema/ClientAndCursor",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ClientAndCursor> getSchemaClientAndCursorUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"clients\" : [ {    \"italianRetailMarketFatcaData\" : {      \"usTinTypeCode\" : \"usTinTypeCode\",      \"ateco\" : \"ateco\",      \"clientFatcaStatusCode\" : \"clientFatcaStatusCode\",      \"distributorFatcaStatusCode\" : \"distributorFatcaStatusCode\",      \"usGiin\" : \"usGiin\",      \"fatcaCertificateTypeCode\" : \"fatcaCertificateTypeCode\",      \"newAccount\" : true,      \"secondNationalityCountryCode\" : \"secondNationalityCountryCode\",      \"thirdNationalityCountryCode\" : \"thirdNationalityCountryCode\",      \"usTin\" : \"usTin\",      \"documentIssuingCountryCode\" : \"documentIssuingCountryCode\"    },    \"addresses\" : [ {      \"externalReference\" : \"externalReference\",      \"address\" : {        \"roadTypeCode\" : \"roadTypeCode\",        \"zipCode\" : \"zipCode\",        \"regionCode\" : \"regionCode\",        \"address\" : \"address\",        \"complementaryAddress\" : \"complementaryAddress\",        \"city\" : \"city\",        \"countryCode\" : \"countryCode\",        \"region\" : \"region\"      },      \"fiscalAddress\" : true,      \"residentAddress\" : true    }, {      \"externalReference\" : \"externalReference\",      \"address\" : {        \"roadTypeCode\" : \"roadTypeCode\",        \"zipCode\" : \"zipCode\",        \"regionCode\" : \"regionCode\",        \"address\" : \"address\",        \"complementaryAddress\" : \"complementaryAddress\",        \"city\" : \"city\",        \"countryCode\" : \"countryCode\",        \"region\" : \"region\"      },      \"fiscalAddress\" : true,      \"residentAddress\" : true    } ],    \"clientTypeCode\" : \"LEGAL\",    \"countryOfBirthCode\" : \"countryOfBirthCode\",    \"document\" : \"document\",    \"fatcaData\" : {      \"postalZipCode\" : \"postalZipCode\",      \"fatcaTypeCode\" : \"fatcaTypeCode\",      \"usFiscalTypeCode\" : \"usFiscalTypeCode\",      \"fiscalZipCode\" : \"fiscalZipCode\",      \"usTaxReference\" : \"usTaxReference\"    },    \"professionalAccording200439CE\" : true,    \"cityOfBirth\" : \"cityOfBirth\",    \"foreignClientData\" : {      \"certficationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"nativeOfficialDocument\" : \"nativeOfficialDocument\",      \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",      \"nonResidentDocumentTypeCode\" : \"nonResidentDocumentTypeCode\",      \"nativeFiscalIdentification\" : \"nativeFiscalIdentification\"    },    \"surname\" : \"surname\",    \"italianRetailMarketClientData\" : {      \"cipher\" : \"cipher\",      \"expeditionDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"regionOfExpedition\" : \"regionOfExpedition\",      \"nationalityCountryCode\" : \"nationalityCountryCode\",      \"nativeOfficialDocument\" : \"nativeOfficialDocument\",      \"residentCountryFiscalIdentification\" : \"residentCountryFiscalIdentification\",      \"fiscalCountryCode\" : \"fiscalCountryCode\",      \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",      \"corporateName\" : \"corporateName\",      \"genderCode\" : \"MALE\",      \"residenceValidityExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authority\" : \"authority\",      \"businessCountryFiscalIdentification\" : \"businessCountryFiscalIdentification\",      \"regionOfBirth\" : \"regionOfBirth\",      \"placeOfExpedition\" : \"placeOfExpedition\"    },    \"secondSurname\" : \"secondSurname\",    \"id\" : \"id\",    \"subdistributorId\" : 6,    \"cnae\" : \"cnae\",    \"residentInSpain\" : true,    \"distributorId\" : 0,    \"birthDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalReference\" : \"externalReference\",    \"firstName\" : \"firstName\",    \"documentTypeCode\" : \"documentTypeCode\",    \"entityTypeCode\" : \"entityTypeCode\",    \"sectorization\" : \"sectorization\",    \"spanishTransfersPermitted\" : true,    \"productTypeCode\" : \"productTypeCode\"  }, {    \"italianRetailMarketFatcaData\" : {      \"usTinTypeCode\" : \"usTinTypeCode\",      \"ateco\" : \"ateco\",      \"clientFatcaStatusCode\" : \"clientFatcaStatusCode\",      \"distributorFatcaStatusCode\" : \"distributorFatcaStatusCode\",      \"usGiin\" : \"usGiin\",      \"fatcaCertificateTypeCode\" : \"fatcaCertificateTypeCode\",      \"newAccount\" : true,      \"secondNationalityCountryCode\" : \"secondNationalityCountryCode\",      \"thirdNationalityCountryCode\" : \"thirdNationalityCountryCode\",      \"usTin\" : \"usTin\",      \"documentIssuingCountryCode\" : \"documentIssuingCountryCode\"    },    \"addresses\" : [ {      \"externalReference\" : \"externalReference\",      \"address\" : {        \"roadTypeCode\" : \"roadTypeCode\",        \"zipCode\" : \"zipCode\",        \"regionCode\" : \"regionCode\",        \"address\" : \"address\",        \"complementaryAddress\" : \"complementaryAddress\",        \"city\" : \"city\",        \"countryCode\" : \"countryCode\",        \"region\" : \"region\"      },      \"fiscalAddress\" : true,      \"residentAddress\" : true    }, {      \"externalReference\" : \"externalReference\",      \"address\" : {        \"roadTypeCode\" : \"roadTypeCode\",        \"zipCode\" : \"zipCode\",        \"regionCode\" : \"regionCode\",        \"address\" : \"address\",        \"complementaryAddress\" : \"complementaryAddress\",        \"city\" : \"city\",        \"countryCode\" : \"countryCode\",        \"region\" : \"region\"      },      \"fiscalAddress\" : true,      \"residentAddress\" : true    } ],    \"clientTypeCode\" : \"LEGAL\",    \"countryOfBirthCode\" : \"countryOfBirthCode\",    \"document\" : \"document\",    \"fatcaData\" : {      \"postalZipCode\" : \"postalZipCode\",      \"fatcaTypeCode\" : \"fatcaTypeCode\",      \"usFiscalTypeCode\" : \"usFiscalTypeCode\",      \"fiscalZipCode\" : \"fiscalZipCode\",      \"usTaxReference\" : \"usTaxReference\"    },    \"professionalAccording200439CE\" : true,    \"cityOfBirth\" : \"cityOfBirth\",    \"foreignClientData\" : {      \"certficationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"nativeOfficialDocument\" : \"nativeOfficialDocument\",      \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",      \"nonResidentDocumentTypeCode\" : \"nonResidentDocumentTypeCode\",      \"nativeFiscalIdentification\" : \"nativeFiscalIdentification\"    },    \"surname\" : \"surname\",    \"italianRetailMarketClientData\" : {      \"cipher\" : \"cipher\",      \"expeditionDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"regionOfExpedition\" : \"regionOfExpedition\",      \"nationalityCountryCode\" : \"nationalityCountryCode\",      \"nativeOfficialDocument\" : \"nativeOfficialDocument\",      \"residentCountryFiscalIdentification\" : \"residentCountryFiscalIdentification\",      \"fiscalCountryCode\" : \"fiscalCountryCode\",      \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",      \"corporateName\" : \"corporateName\",      \"genderCode\" : \"MALE\",      \"residenceValidityExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authority\" : \"authority\",      \"businessCountryFiscalIdentification\" : \"businessCountryFiscalIdentification\",      \"regionOfBirth\" : \"regionOfBirth\",      \"placeOfExpedition\" : \"placeOfExpedition\"    },    \"secondSurname\" : \"secondSurname\",    \"id\" : \"id\",    \"subdistributorId\" : 6,    \"cnae\" : \"cnae\",    \"residentInSpain\" : true,    \"distributorId\" : 0,    \"birthDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalReference\" : \"externalReference\",    \"firstName\" : \"firstName\",    \"documentTypeCode\" : \"documentTypeCode\",    \"entityTypeCode\" : \"entityTypeCode\",    \"sectorization\" : \"sectorization\",    \"spanishTransfersPermitted\" : true,    \"productTypeCode\" : \"productTypeCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaClientAndSignature", nickname = "getSchemaClientAndSignatureUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ClientAndSignature.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ClientAndSignature.class) })
    @RequestMapping(value = "/schema/ClientAndSignature",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ClientAndSignature> getSchemaClientAndSignatureUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"signature\" : {    \"signature\" : \"signature\"  },  \"client\" : {    \"italianRetailMarketFatcaData\" : {      \"usTinTypeCode\" : \"usTinTypeCode\",      \"ateco\" : \"ateco\",      \"clientFatcaStatusCode\" : \"clientFatcaStatusCode\",      \"distributorFatcaStatusCode\" : \"distributorFatcaStatusCode\",      \"usGiin\" : \"usGiin\",      \"fatcaCertificateTypeCode\" : \"fatcaCertificateTypeCode\",      \"newAccount\" : true,      \"secondNationalityCountryCode\" : \"secondNationalityCountryCode\",      \"thirdNationalityCountryCode\" : \"thirdNationalityCountryCode\",      \"usTin\" : \"usTin\",      \"documentIssuingCountryCode\" : \"documentIssuingCountryCode\"    },    \"addresses\" : [ {      \"externalReference\" : \"externalReference\",      \"address\" : {        \"roadTypeCode\" : \"roadTypeCode\",        \"zipCode\" : \"zipCode\",        \"regionCode\" : \"regionCode\",        \"address\" : \"address\",        \"complementaryAddress\" : \"complementaryAddress\",        \"city\" : \"city\",        \"countryCode\" : \"countryCode\",        \"region\" : \"region\"      },      \"fiscalAddress\" : true,      \"residentAddress\" : true    }, {      \"externalReference\" : \"externalReference\",      \"address\" : {        \"roadTypeCode\" : \"roadTypeCode\",        \"zipCode\" : \"zipCode\",        \"regionCode\" : \"regionCode\",        \"address\" : \"address\",        \"complementaryAddress\" : \"complementaryAddress\",        \"city\" : \"city\",        \"countryCode\" : \"countryCode\",        \"region\" : \"region\"      },      \"fiscalAddress\" : true,      \"residentAddress\" : true    } ],    \"clientTypeCode\" : \"LEGAL\",    \"countryOfBirthCode\" : \"countryOfBirthCode\",    \"document\" : \"document\",    \"fatcaData\" : {      \"postalZipCode\" : \"postalZipCode\",      \"fatcaTypeCode\" : \"fatcaTypeCode\",      \"usFiscalTypeCode\" : \"usFiscalTypeCode\",      \"fiscalZipCode\" : \"fiscalZipCode\",      \"usTaxReference\" : \"usTaxReference\"    },    \"professionalAccording200439CE\" : true,    \"cityOfBirth\" : \"cityOfBirth\",    \"foreignClientData\" : {      \"certficationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"nativeOfficialDocument\" : \"nativeOfficialDocument\",      \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",      \"nonResidentDocumentTypeCode\" : \"nonResidentDocumentTypeCode\",      \"nativeFiscalIdentification\" : \"nativeFiscalIdentification\"    },    \"surname\" : \"surname\",    \"italianRetailMarketClientData\" : {      \"cipher\" : \"cipher\",      \"expeditionDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"regionOfExpedition\" : \"regionOfExpedition\",      \"nationalityCountryCode\" : \"nationalityCountryCode\",      \"nativeOfficialDocument\" : \"nativeOfficialDocument\",      \"residentCountryFiscalIdentification\" : \"residentCountryFiscalIdentification\",      \"fiscalCountryCode\" : \"fiscalCountryCode\",      \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",      \"corporateName\" : \"corporateName\",      \"genderCode\" : \"MALE\",      \"residenceValidityExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authority\" : \"authority\",      \"businessCountryFiscalIdentification\" : \"businessCountryFiscalIdentification\",      \"regionOfBirth\" : \"regionOfBirth\",      \"placeOfExpedition\" : \"placeOfExpedition\"    },    \"secondSurname\" : \"secondSurname\",    \"id\" : \"id\",    \"subdistributorId\" : 6,    \"cnae\" : \"cnae\",    \"residentInSpain\" : true,    \"distributorId\" : 0,    \"birthDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalReference\" : \"externalReference\",    \"firstName\" : \"firstName\",    \"documentTypeCode\" : \"documentTypeCode\",    \"entityTypeCode\" : \"entityTypeCode\",    \"sectorization\" : \"sectorization\",    \"spanishTransfersPermitted\" : true,    \"productTypeCode\" : \"productTypeCode\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaClientFilterAndCursorFilter", nickname = "getSchemaClientFilterAndCursorFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ClientFilterAndCursorFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ClientFilterAndCursorFilter.class) })
    @RequestMapping(value = "/schema/ClientFilterAndCursorFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ClientFilterAndCursorFilter> getSchemaClientFilterAndCursorFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"clientFilter\" : {    \"externalReference\" : \"externalReference\",    \"firstName\" : \"firstName\",    \"clientTypeCode\" : \"LEGAL\",    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"subdistributorId\" : 0  },  \"cursorFilter\" : {    \"cursorString\" : \"cursorString\",    \"direction\" : \"PREVIOUS\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaClientFilter", nickname = "getSchemaClientFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ClientFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ClientFilter.class) })
    @RequestMapping(value = "/schema/ClientFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ClientFilter> getSchemaClientFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"externalReference\" : \"externalReference\",  \"firstName\" : \"firstName\",  \"clientTypeCode\" : \"LEGAL\",  \"surname\" : \"surname\",  \"secondSurname\" : \"secondSurname\",  \"subdistributorId\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaClientSummaryAndCursor", nickname = "getSchemaClientSummaryAndCursorUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ClientSummaryAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ClientSummaryAndCursor.class) })
    @RequestMapping(value = "/schema/ClientSummaryAndCursor",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ClientSummaryAndCursor> getSchemaClientSummaryAndCursorUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"clientSummaries\" : [ {    \"externalReference\" : \"externalReference\",    \"firstName\" : \"firstName\",    \"clientId\" : \"clientId\",    \"distributorId\" : 0,    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"subdistributorId\" : 6,    \"fatca\" : true  }, {    \"externalReference\" : \"externalReference\",    \"firstName\" : \"firstName\",    \"clientId\" : \"clientId\",    \"distributorId\" : 0,    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"subdistributorId\" : 6,    \"fatca\" : true  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaClientSummary", nickname = "getSchemaClientSummaryUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ClientSummary.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ClientSummary.class) })
    @RequestMapping(value = "/schema/ClientSummary",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ClientSummary> getSchemaClientSummaryUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"externalReference\" : \"externalReference\",  \"firstName\" : \"firstName\",  \"clientId\" : \"clientId\",  \"distributorId\" : 0,  \"surname\" : \"surname\",  \"secondSurname\" : \"secondSurname\",  \"subdistributorId\" : 6,  \"fatca\" : true}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaClient", nickname = "getSchemaClientUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Client.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Client.class) })
    @RequestMapping(value = "/schema/Client",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Client> getSchemaClientUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"italianRetailMarketFatcaData\" : {    \"usTinTypeCode\" : \"usTinTypeCode\",    \"ateco\" : \"ateco\",    \"clientFatcaStatusCode\" : \"clientFatcaStatusCode\",    \"distributorFatcaStatusCode\" : \"distributorFatcaStatusCode\",    \"usGiin\" : \"usGiin\",    \"fatcaCertificateTypeCode\" : \"fatcaCertificateTypeCode\",    \"newAccount\" : true,    \"secondNationalityCountryCode\" : \"secondNationalityCountryCode\",    \"thirdNationalityCountryCode\" : \"thirdNationalityCountryCode\",    \"usTin\" : \"usTin\",    \"documentIssuingCountryCode\" : \"documentIssuingCountryCode\"  },  \"addresses\" : [ {    \"externalReference\" : \"externalReference\",    \"address\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"fiscalAddress\" : true,    \"residentAddress\" : true  }, {    \"externalReference\" : \"externalReference\",    \"address\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"fiscalAddress\" : true,    \"residentAddress\" : true  } ],  \"clientTypeCode\" : \"LEGAL\",  \"countryOfBirthCode\" : \"countryOfBirthCode\",  \"document\" : \"document\",  \"fatcaData\" : {    \"postalZipCode\" : \"postalZipCode\",    \"fatcaTypeCode\" : \"fatcaTypeCode\",    \"usFiscalTypeCode\" : \"usFiscalTypeCode\",    \"fiscalZipCode\" : \"fiscalZipCode\",    \"usTaxReference\" : \"usTaxReference\"  },  \"professionalAccording200439CE\" : true,  \"cityOfBirth\" : \"cityOfBirth\",  \"foreignClientData\" : {    \"certficationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"nativeOfficialDocument\" : \"nativeOfficialDocument\",    \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",    \"nonResidentDocumentTypeCode\" : \"nonResidentDocumentTypeCode\",    \"nativeFiscalIdentification\" : \"nativeFiscalIdentification\"  },  \"surname\" : \"surname\",  \"italianRetailMarketClientData\" : {    \"cipher\" : \"cipher\",    \"expeditionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"regionOfExpedition\" : \"regionOfExpedition\",    \"nationalityCountryCode\" : \"nationalityCountryCode\",    \"nativeOfficialDocument\" : \"nativeOfficialDocument\",    \"residentCountryFiscalIdentification\" : \"residentCountryFiscalIdentification\",    \"fiscalCountryCode\" : \"fiscalCountryCode\",    \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",    \"corporateName\" : \"corporateName\",    \"genderCode\" : \"MALE\",    \"residenceValidityExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"authority\" : \"authority\",    \"businessCountryFiscalIdentification\" : \"businessCountryFiscalIdentification\",    \"regionOfBirth\" : \"regionOfBirth\",    \"placeOfExpedition\" : \"placeOfExpedition\"  },  \"secondSurname\" : \"secondSurname\",  \"id\" : \"id\",  \"subdistributorId\" : 6,  \"cnae\" : \"cnae\",  \"residentInSpain\" : true,  \"distributorId\" : 0,  \"birthDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"externalReference\" : \"externalReference\",  \"firstName\" : \"firstName\",  \"documentTypeCode\" : \"documentTypeCode\",  \"entityTypeCode\" : \"entityTypeCode\",  \"sectorization\" : \"sectorization\",  \"spanishTransfersPermitted\" : true,  \"productTypeCode\" : \"productTypeCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaContractAccount", nickname = "getSchemaContractAccountUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ContractAccount.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ContractAccount.class) })
    @RequestMapping(value = "/schema/ContractAccount",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ContractAccount> getSchemaContractAccountUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"assetAccountCode\" : \"assetAccountCode\",  \"currentAccountCode\" : \"currentAccountCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaContractAndSignature", nickname = "getSchemaContractAndSignatureUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ContractAndSignature.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ContractAndSignature.class) })
    @RequestMapping(value = "/schema/ContractAndSignature",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ContractAndSignature> getSchemaContractAndSignatureUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"signature\" : {    \"signature\" : \"signature\"  },  \"contract\" : {    \"withholding\" : true,    \"italianRetailMarketContractInformation\" : {      \"scudato\" : true,      \"fiscalGroupingCode\" : \"fiscalGroupingCode\",      \"fiscalAddress\" : {        \"clientExternalReference\" : \"clientExternalReference\",        \"clientId\" : \"clientId\",        \"addressExternalReference\" : \"addressExternalReference\"      },      \"newExternalReference\" : \"newExternalReference\",      \"postalAdress\" : {        \"clientExternalReference\" : \"clientExternalReference\",        \"clientId\" : \"clientId\",        \"addressExternalReference\" : \"addressExternalReference\"      },      \"newSubdistributorId\" : 5,      \"fiscalGroupingExternalReference\" : \"fiscalGroupingExternalReference\"    },    \"productId\" : 5,    \"shareholders\" : [ {      \"clientExternalReference\" : \"clientExternalReference\",      \"clientId\" : \"clientId\",      \"shareholdingTypeOrder\" : 7,      \"shareholdingTypeCode\" : \"shareholdingTypeCode\",      \"ownershipPercentage\" : 2.3021358869347654518833223846741020679473876953125    }, {      \"clientExternalReference\" : \"clientExternalReference\",      \"clientId\" : \"clientId\",      \"shareholdingTypeOrder\" : 7,      \"shareholdingTypeCode\" : \"shareholdingTypeCode\",      \"ownershipPercentage\" : 2.3021358869347654518833223846741020679473876953125    } ],    \"depositaryId\" : 0,    \"distributorId\" : 6,    \"testamentary\" : true,    \"externalReference\" : \"externalReference\",    \"advisor\" : \"advisor\",    \"testamentaryContractExternalReference\" : \"testamentaryContractExternalReference\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"defaultLanguageCode\" : \"defaultLanguageCode\",    \"accounts\" : [ {      \"assetAccountCode\" : \"assetAccountCode\",      \"currentAccountCode\" : \"currentAccountCode\"    }, {      \"assetAccountCode\" : \"assetAccountCode\",      \"currentAccountCode\" : \"currentAccountCode\"    } ],    \"id\" : 1,    \"subdistributorId\" : 9,    \"externalReferenceSpanishDealingFundHouse\" : \"externalReferenceSpanishDealingFundHouse\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaContractFilterAndCursorFilter", nickname = "getSchemaContractFilterAndCursorFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ContractFilterAndCursorFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ContractFilterAndCursorFilter.class) })
    @RequestMapping(value = "/schema/ContractFilterAndCursorFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ContractFilterAndCursorFilter> getSchemaContractFilterAndCursorFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"contractFilter\" : {    \"externalReference\" : \"externalReference\",    \"clientExternalReference\" : \"clientExternalReference\",    \"clientId\" : \"clientId\",    \"productId\" : 0,    \"subdistributorId\" : \"subdistributorId\"  },  \"cursorFilter\" : {    \"cursorString\" : \"cursorString\",    \"direction\" : \"PREVIOUS\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaContractFilter", nickname = "getSchemaContractFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ContractFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ContractFilter.class) })
    @RequestMapping(value = "/schema/ContractFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ContractFilter> getSchemaContractFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"externalReference\" : \"externalReference\",  \"clientExternalReference\" : \"clientExternalReference\",  \"clientId\" : \"clientId\",  \"productId\" : 0,  \"subdistributorId\" : \"subdistributorId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaContractSummaryAndCursor", nickname = "getSchemaContractSummaryAndCursorUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ContractSummaryAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ContractSummaryAndCursor.class) })
    @RequestMapping(value = "/schema/ContractSummaryAndCursor",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ContractSummaryAndCursor> getSchemaContractSummaryAndCursorUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"contractSummaries\" : [ {    \"externalReference\" : \"externalReference\",    \"principalHolderClientId\" : \"principalHolderClientId\",    \"numberOfShareholders\" : 1,    \"principalHolderName\" : \"principalHolderName\",    \"distributorId\" : 6,    \"contractId\" : 0,    \"principalHolderSurname\" : \"principalHolderSurname\",    \"principalHolderExternalReference\" : \"principalHolderExternalReference\",    \"subdistributorId\" : 5,    \"principalHolderSecondSurname\" : \"principalHolderSecondSurname\"  }, {    \"externalReference\" : \"externalReference\",    \"principalHolderClientId\" : \"principalHolderClientId\",    \"numberOfShareholders\" : 1,    \"principalHolderName\" : \"principalHolderName\",    \"distributorId\" : 6,    \"contractId\" : 0,    \"principalHolderSurname\" : \"principalHolderSurname\",    \"principalHolderExternalReference\" : \"principalHolderExternalReference\",    \"subdistributorId\" : 5,    \"principalHolderSecondSurname\" : \"principalHolderSecondSurname\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaContractSummary", nickname = "getSchemaContractSummaryUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ContractSummary.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ContractSummary.class) })
    @RequestMapping(value = "/schema/ContractSummary",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ContractSummary> getSchemaContractSummaryUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"externalReference\" : \"externalReference\",  \"principalHolderClientId\" : \"principalHolderClientId\",  \"numberOfShareholders\" : 1,  \"principalHolderName\" : \"principalHolderName\",  \"distributorId\" : 6,  \"contractId\" : 0,  \"principalHolderSurname\" : \"principalHolderSurname\",  \"principalHolderExternalReference\" : \"principalHolderExternalReference\",  \"subdistributorId\" : 5,  \"principalHolderSecondSurname\" : \"principalHolderSecondSurname\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaContract", nickname = "getSchemaContractUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Contract.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Contract.class) })
    @RequestMapping(value = "/schema/Contract",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Contract> getSchemaContractUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"withholding\" : true,  \"italianRetailMarketContractInformation\" : {    \"scudato\" : true,    \"fiscalGroupingCode\" : \"fiscalGroupingCode\",    \"fiscalAddress\" : {      \"clientExternalReference\" : \"clientExternalReference\",      \"clientId\" : \"clientId\",      \"addressExternalReference\" : \"addressExternalReference\"    },    \"newExternalReference\" : \"newExternalReference\",    \"postalAdress\" : {      \"clientExternalReference\" : \"clientExternalReference\",      \"clientId\" : \"clientId\",      \"addressExternalReference\" : \"addressExternalReference\"    },    \"newSubdistributorId\" : 5,    \"fiscalGroupingExternalReference\" : \"fiscalGroupingExternalReference\"  },  \"productId\" : 5,  \"shareholders\" : [ {    \"clientExternalReference\" : \"clientExternalReference\",    \"clientId\" : \"clientId\",    \"shareholdingTypeOrder\" : 7,    \"shareholdingTypeCode\" : \"shareholdingTypeCode\",    \"ownershipPercentage\" : 2.3021358869347654518833223846741020679473876953125  }, {    \"clientExternalReference\" : \"clientExternalReference\",    \"clientId\" : \"clientId\",    \"shareholdingTypeOrder\" : 7,    \"shareholdingTypeCode\" : \"shareholdingTypeCode\",    \"ownershipPercentage\" : 2.3021358869347654518833223846741020679473876953125  } ],  \"depositaryId\" : 0,  \"distributorId\" : 6,  \"testamentary\" : true,  \"externalReference\" : \"externalReference\",  \"advisor\" : \"advisor\",  \"testamentaryContractExternalReference\" : \"testamentaryContractExternalReference\",  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"defaultLanguageCode\" : \"defaultLanguageCode\",  \"accounts\" : [ {    \"assetAccountCode\" : \"assetAccountCode\",    \"currentAccountCode\" : \"currentAccountCode\"  }, {    \"assetAccountCode\" : \"assetAccountCode\",    \"currentAccountCode\" : \"currentAccountCode\"  } ],  \"id\" : 1,  \"subdistributorId\" : 9,  \"externalReferenceSpanishDealingFundHouse\" : \"externalReferenceSpanishDealingFundHouse\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaCountry", nickname = "getSchemaCountryUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Country.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Country.class) })
    @RequestMapping(value = "/schema/Country",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Country> getSchemaCountryUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaCumulativePerformance", nickname = "getSchemaCumulativePerformanceUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = CumulativePerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = CumulativePerformance.class) })
    @RequestMapping(value = "/schema/CumulativePerfomance",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CumulativePerformance> getSchemaCumulativePerformanceUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"oneMonth\" : 5.63737665663332876420099637471139430999755859375,  \"threeMonths\" : 9.301444243932575517419536481611430644989013671875,  \"oneYear\" : 2.3021358869347654518833223846741020679473876953125,  \"week\" : 7.3862819483858839220147274318151175975799560546875,  \"threeYears\" : 3.61607674925191080461672754609026014804840087890625,  \"fiveYears\" : 6.02745618307040320615897144307382404804229736328125,  \"twelveYears\" : 2.027123023002321833274663731572218239307403564453125,  \"sixMonths\" : 7.061401241503109105224211816675961017608642578125,  \"calculationPeriod\" : {    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"fromInception\" : 1.46581298050294517310021547018550336360931396484375,  \"mtd\" : 5.962133916683182377482808078639209270477294921875,  \"twoMonth\" : 4.1456080298839363962315474054776132106781005859375,  \"day\" : 0.80082819046101150206595775671303272247314453125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaCursorFilter", nickname = "getSchemaCursorFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = CursorFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = CursorFilter.class) })
    @RequestMapping(value = "/schema/CursorFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CursorFilter> getSchemaCursorFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursorString\" : \"cursorString\",  \"direction\" : \"PREVIOUS\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaCursor", nickname = "getSchemaCursorUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Cursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Cursor.class) })
    @RequestMapping(value = "/schema/Cursor",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Cursor> getSchemaCursorUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursorString\" : \"cursorString\",  \"hasPrevious\" : true,  \"hasNext\" : true}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaDepositaryAndPage", nickname = "getSchemaDepositaryAndPageUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = DepositaryAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = DepositaryAndPage.class) })
    @RequestMapping(value = "/schema/DepositaryAndPage",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DepositaryAndPage> getSchemaDepositaryAndPageUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"depositaries\" : [ {    \"distributorId\" : 0,    \"name\" : \"name\",    \"accountCodeRequired\" : true,    \"id\" : 6  }, {    \"distributorId\" : 0,    \"name\" : \"name\",    \"accountCodeRequired\" : true,    \"id\" : 6  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaDepositary", nickname = "getSchemaDepositaryUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Depositary.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Depositary.class) })
    @RequestMapping(value = "/schema/Depositary",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Depositary> getSchemaDepositaryUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"distributorId\" : 0,  \"name\" : \"name\",  \"accountCodeRequired\" : true,  \"id\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaDistributorAndPage", nickname = "getSchemaDistributorAndPageUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = DistributorAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = DistributorAndPage.class) })
    @RequestMapping(value = "/schema/DistributorAndPage",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DistributorAndPage> getSchemaDistributorAndPageUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"distributors\" : [ {    \"accountingCenterCountryCode\" : \"accountingCenterCountryCode\",    \"address\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"name\" : \"name\",    \"nif\" : \"nif\",    \"id\" : 0,    \"logoUrl\" : \"logoUrl\"  }, {    \"accountingCenterCountryCode\" : \"accountingCenterCountryCode\",    \"address\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"name\" : \"name\",    \"nif\" : \"nif\",    \"id\" : 0,    \"logoUrl\" : \"logoUrl\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaDistributorSettings", nickname = "getSchemaDistributorSettingsUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = DistributorSettings.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = DistributorSettings.class) })
    @RequestMapping(value = "/schema/DistributorSettings",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DistributorSettings> getSchemaDistributorSettingsUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"apportionBySubdistributor\" : true,  \"italianRetailMarket\" : true,  \"italianTaxation\" : true,  \"transactionIdPolicy\" : \"NUMERIC_7\",  \"apportionByContract\" : true,  \"orderCommentsPermmitted\" : true,  \"qualitativeInfomation\" : true,  \"dealingCurrencyPolicy\" : \"INSTRUMENT_CURRENCY\",  \"assetAccountCodeRequired\" : true,  \"transactionIdAutogenerated\" : true,  \"spanishTransfersPermitted\" : true}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaDistributor", nickname = "getSchemaDistributorUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Distributor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Distributor.class) })
    @RequestMapping(value = "/schema/Distributor",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Distributor> getSchemaDistributorUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"accountingCenterCountryCode\" : \"accountingCenterCountryCode\",  \"address\" : {    \"roadTypeCode\" : \"roadTypeCode\",    \"zipCode\" : \"zipCode\",    \"regionCode\" : \"regionCode\",    \"address\" : \"address\",    \"complementaryAddress\" : \"complementaryAddress\",    \"city\" : \"city\",    \"countryCode\" : \"countryCode\",    \"region\" : \"region\"  },  \"name\" : \"name\",  \"nif\" : \"nif\",  \"id\" : 0,  \"logoUrl\" : \"logoUrl\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaFeesFilter", nickname = "getSchemaFeesFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = FeesFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = FeesFilter.class) })
    @RequestMapping(value = "/schema/FeesFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<FeesFilter> getSchemaFeesFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaFees", nickname = "getSchemaFeesUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Fees.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Fees.class) })
    @RequestMapping(value = "/schema/Fees",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Fees> getSchemaFeesUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,  \"total\" : 2.027123023002321833274663731572218239307403564453125,  \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"performance\" : 3.61607674925191080461672754609026014804840087890625,  \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,  \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,  \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,  \"distribution\" : 5.962133916683182377482808078639209270477294921875,  \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,  \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,  \"others\" : 9.301444243932575517419536481611430644989013671875}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaForeignClientData", nickname = "getSchemaForeignClientDataUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ForeignClientData.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ForeignClientData.class) })
    @RequestMapping(value = "/schema/ForeignClientData",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ForeignClientData> getSchemaForeignClientDataUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"certficationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"nativeOfficialDocument\" : \"nativeOfficialDocument\",  \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",  \"nonResidentDocumentTypeCode\" : \"nonResidentDocumentTypeCode\",  \"nativeFiscalIdentification\" : \"nativeFiscalIdentification\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaFundHouse", nickname = "getSchemaFundHouseUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = FundHouse.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = FundHouse.class) })
    @RequestMapping(value = "/schema/FundHouse",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<FundHouse> getSchemaFundHouseUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"fundHouseGroupId\" : 0,  \"logoUrls\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"name\" : \"name\",  \"description\" : \"description\",  \"id\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaFund", nickname = "getSchemaFundUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Fund.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Fund.class) })
    @RequestMapping(value = "/schema/Fund",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Fund> getSchemaFundUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"riskLevel\" : {    \"imageUrl\" : \"imageUrl\",    \"value\" : 5  },  \"typeShare\" : \"ACUMULATION\",  \"lastDividendDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"domicilieCountryCode\" : \"domicilieCountryCode\",  \"fundHouseBenchmarkDescription\" : \"fundHouseBenchmarkDescription\",  \"marketRegistrationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"dealingAvailable\" : true,  \"marketId\" : 1,  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"comparasionBenchmarkId\" : \"comparasionBenchmarkId\",  \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"parentClass\" : true,  \"id\" : 6,  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"classificationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"investmentObjective\" : \"investmentObjective\",  \"collectiveInvestmentTransferableSecurities\" : \"collectiveInvestmentTransferableSecurities\",  \"structure\" : {    \"legalStructureCode\" : \"legalStructureCode\",    \"fundHouseGroupId\" : 2,    \"collectiveInvestmentSchemeId\" : 5,    \"fundHouseId\" : 7,    \"dealingFundHouseId\" : 5  },  \"informationProvider\" : \"ALLFUNDS\",  \"retentionType\" : \"GROSS\",  \"valuationFrequency\" : \"DAILY\",  \"fundGroupId\" : 0,  \"fundTypeCode\" : \"fundTypeCode\",  \"externalCodeKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"firstPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"europeanFundClassificationCode\" : \"europeanFundClassificationCode\",  \"name\" : \"name\",  \"shariaCompliant\" : true,  \"currencyCode\" : \"currencyCode\",  \"classType\" : \"classType\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaGenericBreakdown", nickname = "getSchemaGenericBreakdownUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = GenericBreakdown.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = GenericBreakdown.class) })
    @RequestMapping(value = "/schema/GenericBreakdown",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<GenericBreakdown> getSchemaGenericBreakdownUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\",  \"code\" : \"code\",  \"description\" : \"description\",  \"weight\" : 0.80082819046101150206595775671303272247314453125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaHoldingAndCursor", nickname = "getSchemaHoldingAndCursorUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = HoldingAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = HoldingAndCursor.class) })
    @RequestMapping(value = "/schema/HoldingAndCursor",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<HoldingAndCursor> getSchemaHoldingAndCursorUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"holdings\" : [ {    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"weightedAveragePrice\" : 1.231513536777255612975068288506008684635162353515625,    \"productId\" : 7,    \"weightedAverageCost\" : 7.3862819483858839220147274318151175975799560546875,    \"distributorId\" : 5,    \"sharesBeforeDistribution\" : 2.027123023002321833274663731572218239307403564453125,    \"capitalGained\" : 6.02745618307040320615897144307382404804229736328125,    \"dealingInstrumentType\" : \"FUND\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"shares\" : 9.301444243932575517419536481611430644989013671875,    \"sharesAfterDistribution\" : 3.61607674925191080461672754609026014804840087890625,    \"fiscalShares\" : 2.3021358869347654518833223846741020679473876953125,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"contractId\" : 1,    \"subdistributorId\" : 4,    \"dealingFundHouseId\" : 5,    \"currencyCode\" : \"currencyCode\"  }, {    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"weightedAveragePrice\" : 1.231513536777255612975068288506008684635162353515625,    \"productId\" : 7,    \"weightedAverageCost\" : 7.3862819483858839220147274318151175975799560546875,    \"distributorId\" : 5,    \"sharesBeforeDistribution\" : 2.027123023002321833274663731572218239307403564453125,    \"capitalGained\" : 6.02745618307040320615897144307382404804229736328125,    \"dealingInstrumentType\" : \"FUND\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"shares\" : 9.301444243932575517419536481611430644989013671875,    \"sharesAfterDistribution\" : 3.61607674925191080461672754609026014804840087890625,    \"fiscalShares\" : 2.3021358869347654518833223846741020679473876953125,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"contractId\" : 1,    \"subdistributorId\" : 4,    \"dealingFundHouseId\" : 5,    \"currencyCode\" : \"currencyCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaHoldingBreakdown", nickname = "getSchemaHoldingBreakdownUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = HoldingBreakdown.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = HoldingBreakdown.class) })
    @RequestMapping(value = "/schema/HoldingBreakdown",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<HoldingBreakdown> getSchemaHoldingBreakdownUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\",  \"code\" : 0,  \"description\" : \"description\",  \"weight\" : 6.02745618307040320615897144307382404804229736328125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaHoldingFilterAndCursorFilter", nickname = "getSchemaHoldingFilterAndCursorFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = HoldingFilterAndCursorFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = HoldingFilterAndCursorFilter.class) })
    @RequestMapping(value = "/schema/HoldingFilterAndCursorFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<HoldingFilterAndCursorFilter> getSchemaHoldingFilterAndCursorFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"holdingFilter\" : {    \"accountId\" : \"accountId\",    \"productId\" : 1,    \"contractExternalReference\" : \"contractExternalReference\",    \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"subdistributorId\" : 5,    \"dealingFundHouseId\" : 0,    \"dealingInstrumentIds\" : [ 6, 6 ]  },  \"cursorFilter\" : {    \"cursorString\" : \"cursorString\",    \"direction\" : \"PREVIOUS\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaHoldingFilter", nickname = "getSchemaHoldingFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = HoldingFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = HoldingFilter.class) })
    @RequestMapping(value = "/schema/HoldingFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<HoldingFilter> getSchemaHoldingFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"accountId\" : \"accountId\",  \"productId\" : 1,  \"contractExternalReference\" : \"contractExternalReference\",  \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"subdistributorId\" : 5,  \"dealingFundHouseId\" : 0,  \"dealingInstrumentIds\" : [ 6, 6 ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaHolding", nickname = "getSchemaHoldingUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Holding.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Holding.class) })
    @RequestMapping(value = "/schema/Holding",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Holding> getSchemaHoldingUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"amount\" : 0.80082819046101150206595775671303272247314453125,  \"weightedAveragePrice\" : 1.231513536777255612975068288506008684635162353515625,  \"productId\" : 7,  \"weightedAverageCost\" : 7.3862819483858839220147274318151175975799560546875,  \"distributorId\" : 5,  \"sharesBeforeDistribution\" : 2.027123023002321833274663731572218239307403564453125,  \"capitalGained\" : 6.02745618307040320615897144307382404804229736328125,  \"dealingInstrumentType\" : \"FUND\",  \"dealingInstrument\" : {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  },  \"shares\" : 9.301444243932575517419536481611430644989013671875,  \"sharesAfterDistribution\" : 3.61607674925191080461672754609026014804840087890625,  \"fiscalShares\" : 2.3021358869347654518833223846741020679473876953125,  \"price\" : {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  },  \"contractId\" : 1,  \"subdistributorId\" : 4,  \"dealingFundHouseId\" : 5,  \"currencyCode\" : \"currencyCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaInstrumentSearchByCodeFilter", nickname = "getSchemaInstrumentSearchByCodeFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = InstrumentSearchByCodeFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = InstrumentSearchByCodeFilter.class) })
    @RequestMapping(value = "/schema/InstrumentSearchByCodeFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InstrumentSearchByCodeFilter> getSchemaInstrumentSearchByCodeFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"values\" : [ \"values\", \"values\" ],  \"instrumentExternalCode\" : \"instrumentExternalCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaItalianRetailMarketClientData", nickname = "getSchemaItalianRetailMarketClientDataUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ItalianRetailMarketClientData.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ItalianRetailMarketClientData.class) })
    @RequestMapping(value = "/schema/ItalianRetailMarketClientData",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ItalianRetailMarketClientData> getSchemaItalianRetailMarketClientDataUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cipher\" : \"cipher\",  \"expeditionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"regionOfExpedition\" : \"regionOfExpedition\",  \"nationalityCountryCode\" : \"nationalityCountryCode\",  \"nativeOfficialDocument\" : \"nativeOfficialDocument\",  \"residentCountryFiscalIdentification\" : \"residentCountryFiscalIdentification\",  \"fiscalCountryCode\" : \"fiscalCountryCode\",  \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",  \"corporateName\" : \"corporateName\",  \"genderCode\" : \"MALE\",  \"residenceValidityExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"authority\" : \"authority\",  \"businessCountryFiscalIdentification\" : \"businessCountryFiscalIdentification\",  \"regionOfBirth\" : \"regionOfBirth\",  \"placeOfExpedition\" : \"placeOfExpedition\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaItalianRetailMarketContractInformation", nickname = "getSchemaItalianRetailMarketContractInformationUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ItalianRetailMarketContractInformation.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ItalianRetailMarketContractInformation.class) })
    @RequestMapping(value = "/schema/ItalianRetailMarketContractInformation",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ItalianRetailMarketContractInformation> getSchemaItalianRetailMarketContractInformationUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"scudato\" : true,  \"fiscalGroupingCode\" : \"fiscalGroupingCode\",  \"fiscalAddress\" : {    \"clientExternalReference\" : \"clientExternalReference\",    \"clientId\" : \"clientId\",    \"addressExternalReference\" : \"addressExternalReference\"  },  \"newExternalReference\" : \"newExternalReference\",  \"postalAdress\" : {    \"clientExternalReference\" : \"clientExternalReference\",    \"clientId\" : \"clientId\",    \"addressExternalReference\" : \"addressExternalReference\"  },  \"newSubdistributorId\" : 5,  \"fiscalGroupingExternalReference\" : \"fiscalGroupingExternalReference\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaItalianRetailMarketFatcaData", nickname = "getSchemaItalianRetailMarketFatcaDataUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ItalianRetailMarketFatcaData.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ItalianRetailMarketFatcaData.class) })
    @RequestMapping(value = "/schema/ItalianRetailMarketFatcaData",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ItalianRetailMarketFatcaData> getSchemaItalianRetailMarketFatcaDataUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"usTinTypeCode\" : \"usTinTypeCode\",  \"ateco\" : \"ateco\",  \"clientFatcaStatusCode\" : \"clientFatcaStatusCode\",  \"distributorFatcaStatusCode\" : \"distributorFatcaStatusCode\",  \"usGiin\" : \"usGiin\",  \"fatcaCertificateTypeCode\" : \"fatcaCertificateTypeCode\",  \"newAccount\" : true,  \"secondNationalityCountryCode\" : \"secondNationalityCountryCode\",  \"thirdNationalityCountryCode\" : \"thirdNationalityCountryCode\",  \"usTin\" : \"usTin\",  \"documentIssuingCountryCode\" : \"documentIssuingCountryCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaMarket", nickname = "getSchemaMarketUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Market.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Market.class) })
    @RequestMapping(value = "/schema/Market",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Market> getSchemaMarketUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"name\",  \"defaultCurrencyCode\" : \"defaultCurrencyCode\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaOperationalDetails", nickname = "getSchemaOperationalDetailsUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = OperationalDetails.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = OperationalDetails.class) })
    @RequestMapping(value = "/schema/OperationalDetails",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OperationalDetails> getSchemaOperationalDetailsUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"dealingCurrencyCode\" : \"dealingCurrencyCode\",  \"unitSharesDecimalPlaces\" : 2,  \"cashAmountDecimalPlaces\" : 0,  \"pricesDecimalPlaces\" : 6,  \"subscriptionType\" : \"NA\",  \"historicOrForwardPricing\" : \"HISTORIC\",  \"whiteList\" : [ {    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"percentage\" : 7.061401241503109105224211816675961017608642578125,    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  }, {    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"percentage\" : 7.061401241503109105224211816675961017608642578125,    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  } ],  \"distribution\" : {    \"distributionCategory\" : \"INTEREST\",    \"equalisation\" : true,    \"cashDistribution\" : true,    \"distributionFrequencyCode\" : \"distributionFrequencyCode\"  },  \"subscriptionDetail\" : {    \"initial\" : {      \"amount\" : 5.962133916683182377482808078639209270477294921875,      \"unitShares\" : 5.63737665663332876420099637471139430999755859375    },    \"subsequent\" : {      \"amount\" : 5.962133916683182377482808078639209270477294921875,      \"unitShares\" : 5.63737665663332876420099637471139430999755859375    },    \"dealingDetail\" : {      \"dealingCutoffTime\" : \"dealingCutoffTime\",      \"dealingFrequencyCode\" : \"dealingFrequencyCode\",      \"orderPrenotification\" : \"orderPrenotification\",      \"roundingUnitSharesCode\" : \"roundingUnitSharesCode\",      \"byShares\" : true,      \"settlementPeriod\" : \"settlementPeriod\",      \"byAmount\" : true,      \"roundingAmountCode\" : \"roundingAmountCode\",      \"recalculation\" : true    }  },  \"pricingType\" : \"SINGLE\",  \"redemptionDetail\" : {    \"bufferPercentage\" : 1,    \"dealingDetail\" : {      \"dealingCutoffTime\" : \"dealingCutoffTime\",      \"dealingFrequencyCode\" : \"dealingFrequencyCode\",      \"orderPrenotification\" : \"orderPrenotification\",      \"roundingUnitSharesCode\" : \"roundingUnitSharesCode\",      \"byShares\" : true,      \"settlementPeriod\" : \"settlementPeriod\",      \"byAmount\" : true,      \"roundingAmountCode\" : \"roundingAmountCode\",      \"recalculation\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaPetitionFilter", nickname = "getSchemaPetitionFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = PetitionFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = PetitionFilter.class) })
    @RequestMapping(value = "/schema/PetitionFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PetitionFilter> getSchemaPetitionFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaPetition", nickname = "getSchemaPetitionUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Petition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Petition.class) })
    @RequestMapping(value = "/schema/Petition",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Petition> getSchemaPetitionUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaPortfolio", nickname = "getSchemaPortfolioUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Portfolio.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Portfolio.class) })
    @RequestMapping(value = "/schema/Portfolio",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Portfolio> getSchemaPortfolioUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : [ {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"fees\" : {    \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,    \"total\" : 2.027123023002321833274663731572218239307403564453125,    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performance\" : 3.61607674925191080461672754609026014804840087890625,    \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,    \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,    \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,    \"distribution\" : 5.962133916683182377482808078639209270477294921875,    \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,    \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,    \"others\" : 9.301444243932575517419536481611430644989013671875  },  \"typeShare\" : \"ACUMULATION\",  \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",  \"investmentObjective\" : \"investmentObjective\",  \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"lastCompositionId\" : 6,  \"lastBenchmarkCompositionId\" : 0,  \"emails\" : [ \"emails\", \"emails\" ],  \"portfolioType\" : \"SIMULATED\",  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"rebalancingTypeCode\" : \"rebalancingTypeCode\",  \"name\" : \"name\",  \"id\" : \"id\",  \"currencyCode\" : \"currencyCode\",  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaPriceFilter", nickname = "getSchemaPriceFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = PriceFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = PriceFilter.class) })
    @RequestMapping(value = "/schema/PriceFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PriceFilter> getSchemaPriceFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"priceSearchCode\" : \"priceSearchCode\",  \"endDate\" : \"2000-01-23\",  \"count\" : 0,  \"numberOfMonth\" : 6,  \"startDate\" : \"2000-01-23\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaPrice", nickname = "getSchemaPriceUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Price.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Price.class) })
    @RequestMapping(value = "/schema/Price",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Price> getSchemaPriceUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\",  \"priceTypeCode\" : \"priceTypeCode\",  \"currencyCode\" : \"currencyCode\",  \"value\" : 6.02745618307040320615897144307382404804229736328125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaProductAndPage", nickname = "getSchemaProductAndPageUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ProductAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ProductAndPage.class) })
    @RequestMapping(value = "/schema/ProductAndPage",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ProductAndPage> getSchemaProductAndPageUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"products\" : [ {    \"portfolioExternalData\" : true,    \"apportionByContract\" : true,    \"distributorId\" : 0,    \"name\" : \"name\",    \"accountCodeRequired\" : true,    \"id\" : 6,    \"accountCodeAutoGenerated\" : true  }, {    \"portfolioExternalData\" : true,    \"apportionByContract\" : true,    \"distributorId\" : 0,    \"name\" : \"name\",    \"accountCodeRequired\" : true,    \"id\" : 6,    \"accountCodeAutoGenerated\" : true  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaProduct", nickname = "getSchemaProductUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Product.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Product.class) })
    @RequestMapping(value = "/schema/Product",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Product> getSchemaProductUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"portfolioExternalData\" : true,  \"apportionByContract\" : true,  \"distributorId\" : 0,  \"name\" : \"name\",  \"accountCodeRequired\" : true,  \"id\" : 6,  \"accountCodeAutoGenerated\" : true}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaQuarterlyPerformance", nickname = "getSchemaQuarterlyPerformanceUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = QuarterlyPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = QuarterlyPerformance.class) })
    @RequestMapping(value = "/schema/QuarterlyPerfomance",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<QuarterlyPerformance> getSchemaQuarterlyPerformanceUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"calculationPeriod\" : {    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"quarter1\" : 0.80082819046101150206595775671303272247314453125,  \"year\" : 5.63737665663332876420099637471139430999755859375,  \"quarter2\" : 6.02745618307040320615897144307382404804229736328125,  \"quarter3\" : 1.46581298050294517310021547018550336360931396484375,  \"quarter4\" : 5.962133916683182377482808078639209270477294921875}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaRoadType", nickname = "getSchemaRoadTypeUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = RoadType.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = RoadType.class) })
    @RequestMapping(value = "/schema/RoadType",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<RoadType> getSchemaRoadTypeUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaShareholder", nickname = "getSchemaShareholderUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Shareholder.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Shareholder.class) })
    @RequestMapping(value = "/schema/Shareholder",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Shareholder> getSchemaShareholderUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"clientExternalReference\" : \"clientExternalReference\",  \"clientId\" : \"clientId\",  \"shareholdingTypeOrder\" : 7,  \"shareholdingTypeCode\" : \"shareholdingTypeCode\",  \"ownershipPercentage\" : 2.3021358869347654518833223846741020679473876953125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaStatistic", nickname = "getSchemaStatisticUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Statistic.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Statistic.class) })
    @RequestMapping(value = "/schema/Statistic",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Statistic> getSchemaStatisticUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkId\" : \"benchmarkId\",  \"relative\" : {    \"r2\" : 1.489415909854170383397331534069962799549102783203125,    \"trackingError\" : 6.8468526983526398765889098285697400569915771484375,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"correlation\" : 7.3862819483858839220147274318151175975799560546875,    \"infoRatio\" : 1.231513536777255612975068288506008684635162353515625,    \"actPremium\" : 3.61607674925191080461672754609026014804840087890625,    \"alpha\" : 2.027123023002321833274663731572218239307403564453125,    \"treynorRatio\" : 7.4577447736837658709418974467553198337554931640625,    \"jesenAlpha\" : 1.024645700144157789424070870154537260532379150390625,    \"beta\" : 4.1456080298839363962315474054776132106781005859375  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaSubdistributorAndPage", nickname = "getSchemaSubdistributorAndPageUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = SubdistributorAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = SubdistributorAndPage.class) })
    @RequestMapping(value = "/schema/SubdistributorAndPage",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<SubdistributorAndPage> getSchemaSubdistributorAndPageUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"subdistributors\" : [ {    \"distributorId\" : 0,    \"name\" : \"name\",    \"id\" : 6  }, {    \"distributorId\" : 0,    \"name\" : \"name\",    \"id\" : 6  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaSubdistributor", nickname = "getSchemaSubdistributorUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Subdistributor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Subdistributor.class) })
    @RequestMapping(value = "/schema/Subdistributor",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Subdistributor> getSchemaSubdistributorUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"distributorId\" : 0,  \"name\" : \"name\",  \"id\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaTransferFilter", nickname = "getSchemaTransferFilterUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = TransferFilter.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = TransferFilter.class) })
    @RequestMapping(value = "/schema/TransferFilter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TransferFilter> getSchemaTransferFilterUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"externalReference\" : \"externalReference\",  \"distributorId\" : 0,  \"subdistributorId\" : 6,  \"transferDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"direction\" : \"direction\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaTransferSummary", nickname = "getSchemaTransferSummaryUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = TransferSummary.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = TransferSummary.class) })
    @RequestMapping(value = "/schema/TransferSummary",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TransferSummary> getSchemaTransferSummaryUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"numberTransfer\" : 6,  \"ammountShares\" : \"ammountShares\",  \"requestType\" : \"requestType\",  \"actionTransfer\" : \"actionTransfer\",  \"userTransfer\" : \"userTransfer\",  \"transferType\" : \"transferType\",  \"subdistributorId\" : 1,  \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"numberAsociatedTransfer\" : 0,  \"status\" : \"status\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaTransfer", nickname = "getSchemaTransferUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = Transfer.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Transfer.class) })
    @RequestMapping(value = "/schema/Transfer",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Transfer> getSchemaTransferUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"destinationIndentification\" : {    \"fundAccount\" : {      \"acc\" : \"acc\",      \"bra\" : \"bra\",      \"cd\" : \"cd\",      \"accountCode\" : \"accountCode\",      \"bank\" : \"bank\"    },    \"accountCode\" : \"accountCode\",    \"entityNIF\" : 1,    \"entityName\" : \"entityName\",    \"cnmvEntity\" : 0,    \"destinationFund\" : \"destinationFund\",    \"fundNIF\" : 5,    \"cnmvFund\" : 6,    \"fundName\" : \"fundName\",    \"omnibusMode\" : \"omnibusMode\"  },  \"sourceIdentification\" : {    \"externalReference\" : 2,    \"sourceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"amount\" : 5.63737665663332876420099637471139430999755859375,    \"destinationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"transferType\" : \"transferType\",    \"transferClass\" : \"transferClass\",    \"transactionCode\" : \"transactionCode\",    \"units\" : 7  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaUser", nickname = "getSchemaUserUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = User.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = User.class) })
    @RequestMapping(value = "/schema/User",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<User> getSchemaUserUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"firstname\" : \"firstname\",  \"defaulLanguageCode\" : \"defaulLanguageCode\",  \"surname\" : \"surname\",  \"secondSurname\" : \"secondSurname\",  \"id\" : \"id\",  \"email\" : \"email\",  \"username\" : \"username\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSchemaValidationMessage", nickname = "getSchemaValidationMessageUsingGET", notes = "This method returns a dummy object. It is meant to facilitate the development of a new infrastructure.  It is not meant to be used in a production environment. ", response = ValidationMessage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "schema", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ValidationMessage.class) })
    @RequestMapping(value = "/schema/ValidationMessage",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ValidationMessage> getSchemaValidationMessageUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"errorCode\" : \"errorCode\",  \"status\" : \"OK\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
