/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Petition;
import org.openapitools.model.PetitionFilter;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "petitions", description = "the petitions API")
public interface PetitionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "addPetition", nickname = "addPetitionUsingPOST", notes = "Add new Petition", response = Petition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "petitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Petition.class),
        @ApiResponse(code = 201, message = "successful operation", response = Petition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/petitions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Petition> addPetitionUsingPOST(@ApiParam(value = "body" ,required=true )  @Valid @RequestBody Petition petition) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deletePetition", nickname = "deletePetitionUsingDELETE", notes = "Delete a Petition with form data", response = Petition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "petitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Petition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/petitions/{petitionId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Petition> deletePetitionUsingDELETE(@ApiParam(value = "The Id of the {Petition}",required=true) @PathVariable("petitionId") Long petitionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getPetitionById", nickname = "getPetitionByIdUsingGET", notes = "Find Petition by ID", response = Petition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "petitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Petition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/petitions/{petitionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Petition> getPetitionByIdUsingGET(@ApiParam(value = "The Id of the {Petition}",required=true) @PathVariable("petitionId") Long petitionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listPetitionsAsExcel", nickname = "listPetitionsAsExcelUsingPOST", notes = "List of petitions filtering by different parameters (as an Excel file)", response = Resource.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "petitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Resource.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/petitions/list/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Resource> listPetitionsAsExcelUsingPOST(@ApiParam(value = "body"  )  @Valid @RequestBody PetitionFilter petitionFilter) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listPetitionsAsPDF", nickname = "listPetitionsAsPDFUsingPOST", notes = "List of Petitions filtering by different parameters (as a PDF file)", response = Resource.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "petitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Resource.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/petitions/list/pdf",
        produces = { "application/pdf" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Resource> listPetitionsAsPDFUsingPOST(@ApiParam(value = "body"  )  @Valid @RequestBody PetitionFilter petitionFilter) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listPetitions", nickname = "listPetitionsUsingPOST", notes = "List of Petitions filtering by different parameters", response = Petition.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "petitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Petition.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/petitions/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<Petition>> listPetitionsUsingPOST(@ApiParam(value = "body"  )  @Valid @RequestBody PetitionFilter petitionFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updatePetition", nickname = "updatePetitionUsingPUT", notes = "Updates a Petition with form data", response = Petition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "petitions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Petition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/petitions/{petitionId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Petition> updatePetitionUsingPUT(@ApiParam(value = "The Id of the {Petition}",required=true) @PathVariable("petitionId") Long petitionId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody Petition petition) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
