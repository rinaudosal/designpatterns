/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.annotations.*;
import org.apache.commons.lang3.RandomStringUtils;
import org.openapitools.model.*;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;

import java.security.SecureRandom;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Random;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "distributors", description = "the distributors API")
public interface DistributorsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "addBacktestingComposition", nickname = "addBacktestingCompositionUsingPOST", notes = "Add BacktestingC Portfolio Composition", response = ComposedComposition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = ComposedComposition.class),
        @ApiResponse(code = 201, message = "successful operation", response = ComposedComposition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/backtesting/{backtestingPortfolioId}/compositions",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ComposedComposition> addBacktestingCompositionUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolioBacktesting}", required = true) @PathVariable("backtestingPortfolioId") String backtestingPortfolioId, @ApiParam(value = "The {Composition} object", required = true) @Valid @RequestBody ComposedComposition composedComposition) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"composition\" : {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"resources\" : [ {      \"reference\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"instrumentType\" : \"FUND\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    }, {      \"reference\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"instrumentType\" : \"FUND\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    } ],    \"id\" : 0  },  \"benchmarkComposition\" : {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"resources\" : [ {      \"reference\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"instrumentType\" : \"FUND\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    }, {      \"reference\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"instrumentType\" : \"FUND\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    } ],    \"id\" : 0  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addClient", nickname = "addClientUsingPOST", notes = "Add new client", response = Client.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = Client.class),
        @ApiResponse(code = 201, message = "successful operation", response = Client.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/clients",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<Client> addClientUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody ClientAndSignature clientAndSignature) {

        Client client = clientAndSignature.getClient();
        client.setId(RandomStringUtils.randomAlphanumeric(44));

        return ResponseEntity.status(201).body(client);
    }


    @ApiOperation(value = "addContract", nickname = "addContractUsingPOST", notes = "Add new contract", response = Contract.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = Contract.class),
        @ApiResponse(code = 201, message = "successful operation", response = Contract.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<Contract> addContractUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody ContractAndSignature contractAndSignature) {
        Random random = new SecureRandom(distributorId.toString().getBytes());

        Contract contract = contractAndSignature.getContract();
        contract.setId(Math.abs(random.nextLong()));
        return ResponseEntity.status(201).body(contract);
    }


    @ApiOperation(value = "addInvestmentLimit", nickname = "addInvestmentLimitUsingPOST", notes = "Add new InvestmentLimit", response = InvestmentLimit.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = InvestmentLimit.class),
        @ApiResponse(code = 201, message = "successful operation", response = InvestmentLimit.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/investmentLimits",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<InvestmentLimit> addInvestmentLimitUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody InvestmentLimit investmentLimit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",  \"operationalStatus\" : \"ACTIVED\",  \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,  \"features\" : [ {    \"featureTypeCode\" : \"featureTypeCode\",    \"maximum\" : 1.46581298050294517310021547018550336360931396484375,    \"valueCode\" : \"valueCode\",    \"id\" : \"id\",    \"minimum\" : 5.962133916683182377482808078639209270477294921875  }, {    \"featureTypeCode\" : \"featureTypeCode\",    \"maximum\" : 1.46581298050294517310021547018550336360931396484375,    \"valueCode\" : \"valueCode\",    \"id\" : \"id\",    \"minimum\" : 5.962133916683182377482808078639209270477294921875  } ],  \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,  \"notificationCause\" : \"LIMIT\",  \"distributorId\" : 6,  \"name\" : \"name\",  \"assigned\" : true,  \"id\" : 5,  \"descriptionData\" : \"descriptionData\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addOperation", nickname = "addOperationUsingPOST", notes = "Add new operation", response = OperationAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = OperationAndMessages.class),
        @ApiResponse(code = 201, message = "successful operation", response = OperationAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/operations",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationAndMessages> addOperationUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody OperationAndSignature operationAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ],  \"operation\" : {    \"contributions\" : [ {      \"associatedTransaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"clientId\" : \"clientId\",      \"comments\" : \"comments\",      \"operationWithholdingData\" : {        \"witholding\" : true,        \"withheldAmount\" : 2.027123023002321833274663731572218239307403564453125      },      \"operationContractData\" : {        \"contractExternalReference\" : \"contractExternalReference\",        \"contractAccount\" : {          \"assetAccountCode\" : \"assetAccountCode\",          \"currentAccountCode\" : \"currentAccountCode\"        }      },      \"operationItalianRetailMarketData\" : {        \"fiscalAccruedIncome\" : 1.46581298050294517310021547018550336360931396484375,        \"weightedAveragePrice\" : 2.3021358869347654518833223846741020679473876953125,        \"fiscalShares\" : 5.962133916683182377482808078639209270477294921875,        \"weightedAverageCost\" : 5.63737665663332876420099637471139430999755859375      },      \"externalReference\" : \"externalReference\",      \"operationDateData\" : {        \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"operationSpanishMarketData\" : {        \"valuationUntil2006\" : 3.61607674925191080461672754609026014804840087890625,        \"valuationUntil2005\" : 9.301444243932575517419536481611430644989013671875      },      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"operationSharesData\" : {        \"requestedShares\" : 7.061401241503109105224211816675961017608642578125      },      \"operationAmountData\" : {        \"requestedNetAmount\" : 6.02745618307040320615897144307382404804229736328125,        \"requestedGrossAmount\" : 0.80082819046101150206595775671303272247314453125      },      \"currencyCode\" : \"currencyCode\"    }, {      \"associatedTransaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"clientId\" : \"clientId\",      \"comments\" : \"comments\",      \"operationWithholdingData\" : {        \"witholding\" : true,        \"withheldAmount\" : 2.027123023002321833274663731572218239307403564453125      },      \"operationContractData\" : {        \"contractExternalReference\" : \"contractExternalReference\",        \"contractAccount\" : {          \"assetAccountCode\" : \"assetAccountCode\",          \"currentAccountCode\" : \"currentAccountCode\"        }      },      \"operationItalianRetailMarketData\" : {        \"fiscalAccruedIncome\" : 1.46581298050294517310021547018550336360931396484375,        \"weightedAveragePrice\" : 2.3021358869347654518833223846741020679473876953125,        \"fiscalShares\" : 5.962133916683182377482808078639209270477294921875,        \"weightedAverageCost\" : 5.63737665663332876420099637471139430999755859375      },      \"externalReference\" : \"externalReference\",      \"operationDateData\" : {        \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"operationSpanishMarketData\" : {        \"valuationUntil2006\" : 3.61607674925191080461672754609026014804840087890625,        \"valuationUntil2005\" : 9.301444243932575517419536481611430644989013671875      },      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"operationSharesData\" : {        \"requestedShares\" : 7.061401241503109105224211816675961017608642578125      },      \"operationAmountData\" : {        \"requestedNetAmount\" : 6.02745618307040320615897144307382404804229736328125,        \"requestedGrossAmount\" : 0.80082819046101150206595775671303272247314453125      },      \"currencyCode\" : \"currencyCode\"    } ],    \"distributorId\" : 7,    \"operationEtfData\" : {      \"brokerId\" : 1,      \"stockExchangeId\" : \"stockExchangeId\"    },    \"dealingInstrumentType\" : \"FUND\",    \"id\" : \"id\",    \"subdistributorId\" : 1,    \"withdrawal\" : {      \"associatedTransaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"clientId\" : \"clientId\",      \"comments\" : \"comments\",      \"operationWithholdingData\" : {        \"witholding\" : true,        \"withheldAmount\" : 2.027123023002321833274663731572218239307403564453125      },      \"operationContractData\" : {        \"contractExternalReference\" : \"contractExternalReference\",        \"contractAccount\" : {          \"assetAccountCode\" : \"assetAccountCode\",          \"currentAccountCode\" : \"currentAccountCode\"        }      },      \"operationItalianRetailMarketData\" : {        \"fiscalAccruedIncome\" : 1.46581298050294517310021547018550336360931396484375,        \"weightedAveragePrice\" : 2.3021358869347654518833223846741020679473876953125,        \"fiscalShares\" : 5.962133916683182377482808078639209270477294921875,        \"weightedAverageCost\" : 5.63737665663332876420099637471139430999755859375      },      \"externalReference\" : \"externalReference\",      \"operationDateData\" : {        \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"operationSpanishMarketData\" : {        \"valuationUntil2006\" : 3.61607674925191080461672754609026014804840087890625,        \"valuationUntil2005\" : 9.301444243932575517419536481611430644989013671875      },      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"operationSharesData\" : {        \"requestedShares\" : 7.061401241503109105224211816675961017608642578125      },      \"operationAmountData\" : {        \"requestedNetAmount\" : 6.02745618307040320615897144307382404804229736328125,        \"requestedGrossAmount\" : 0.80082819046101150206595775671303272247314453125      },      \"currencyCode\" : \"currencyCode\"    },    \"dealingFundHouseId\" : 4,    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"operationSettingsData\" : {      \"errorCode\" : \"errorCode\",      \"showDetails\" : true,      \"statusCode\" : \"statusCode\"    },    \"operationTypeCode\" : \"operationTypeCode\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addOperationalPortfolioComposition", nickname = "addOperationalPortfolioCompositionUsingPOST", notes = "Add new Operational Portfolio Composition", response = OperationalPortfolioCompositionAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = OperationalPortfolioCompositionAndMessages.class),
        @ApiResponse(code = 201, message = "successful operation", response = OperationalPortfolioCompositionAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/compositions",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioCompositionAndMessages> addOperationalPortfolioCompositionUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody OperationalPortfolioCompositionAndSignature operationalPortfolioCompositionAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalPortfolioComposition\" : {    \"operationalPortfolioId\" : 5,    \"compositionDealingInstruments\" : [ {      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,      \"dealingInstrumentType\" : \"FUND\",      \"errorCode\" : \"errorCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,      \"dealingInstrumentType\" : \"FUND\",      \"errorCode\" : \"errorCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ],    \"distributorId\" : 1,    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"totalWeight\" : 2.3021358869347654518833223846741020679473876953125,    \"historical\" : true,    \"id\" : 5,    \"statusCode\" : \"statusCode\"  },  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addOperationalPortfolioOrder", nickname = "addOperationalPortfolioOrderUsingPOST", notes = "Add new operational portfolio order", response = OperationalPortfolioTransaction.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = OperationalPortfolioTransaction.class),
        @ApiResponse(code = 201, message = "successful operation", response = OperationalPortfolioTransaction.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/transactions/orders",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioTransaction> addOperationalPortfolioOrderUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody OperationalPortfolioTransactionAndSignature operationalPortfolioTransactionAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalPortfolioMovement\" : {    \"authorizationNeeded\" : true,    \"associatedContractExternalReference\" : \"associatedContractExternalReference\",    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"associatedDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"operationalPortfolioId\" : 1,    \"operationalPortfolioMovementDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"productId\" : 1,    \"requestedShares\" : 6.8468526983526398765889098285697400569915771484375,    \"associatedDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"distributorId\" : 4,    \"contract\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"movementDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"contractExternalReference\" : \"contractExternalReference\",    \"associatedContract\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"externalReference\" : \"externalReference\",    \"operationalPortfolioMovementFeeData\" : {      \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,      \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,      \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875    },    \"movementType\" : \"DIRECT\",    \"operationalPortfolioMovementTypeCode\" : \"operationalPortfolioMovementTypeCode\",    \"scope\" : \"MODEL_PORTFOLIO\",    \"requestedAmount\" : 1.489415909854170383397331534069962799549102783203125,    \"id\" : 7,    \"subdistributorId\" : 7,    \"currencyCode\" : \"currencyCode\"  },  \"operationalPorfolioOrders\" : [ {    \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,    \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",    \"operationalPortfolioDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,    \"spanishTransferId\" : \"spanishTransferId\",    \"priceValue\" : \"priceValue\",    \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioAssociatedDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"transactionTypeCode\" : \"transactionTypeCode\",    \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",    \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,    \"externalReference\" : 1,    \"operationalPortfolioMovementFeeData\" : {      \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,      \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,      \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875    },    \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",    \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",    \"operationalPortfolioDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"operationalPortfolioOrderSettingsData\" : {      \"statusOrderCode\" : \"statusOrderCode\",      \"errorCode\" : \"errorCode\"    },    \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,    \"id\" : 5,    \"currencyCode\" : \"currencyCode\",    \"operationalPortfolioAssociatedDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  }, {    \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,    \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",    \"operationalPortfolioDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,    \"spanishTransferId\" : \"spanishTransferId\",    \"priceValue\" : \"priceValue\",    \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioAssociatedDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"transactionTypeCode\" : \"transactionTypeCode\",    \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",    \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,    \"externalReference\" : 1,    \"operationalPortfolioMovementFeeData\" : {      \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,      \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,      \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875    },    \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",    \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",    \"operationalPortfolioDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"operationalPortfolioOrderSettingsData\" : {      \"statusOrderCode\" : \"statusOrderCode\",      \"errorCode\" : \"errorCode\"    },    \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,    \"id\" : 5,    \"currencyCode\" : \"currencyCode\",    \"operationalPortfolioAssociatedDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addOperationalPortfolioTransaction", nickname = "addOperationalPortfolioTransactionUsingPOST", notes = "Add new operational portfolio Transaction", response = OperationalPortfolioTransaction.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = OperationalPortfolioTransaction.class),
        @ApiResponse(code = 201, message = "successful operation", response = OperationalPortfolioTransaction.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/transactions",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioTransaction> addOperationalPortfolioTransactionUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody OperationalPortfolioMovementAndSignature operationalPortfolioMovementAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalPortfolioMovement\" : {    \"authorizationNeeded\" : true,    \"associatedContractExternalReference\" : \"associatedContractExternalReference\",    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"associatedDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"operationalPortfolioId\" : 1,    \"operationalPortfolioMovementDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"productId\" : 1,    \"requestedShares\" : 6.8468526983526398765889098285697400569915771484375,    \"associatedDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"distributorId\" : 4,    \"contract\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"movementDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"contractExternalReference\" : \"contractExternalReference\",    \"associatedContract\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"externalReference\" : \"externalReference\",    \"operationalPortfolioMovementFeeData\" : {      \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,      \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,      \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875    },    \"movementType\" : \"DIRECT\",    \"operationalPortfolioMovementTypeCode\" : \"operationalPortfolioMovementTypeCode\",    \"scope\" : \"MODEL_PORTFOLIO\",    \"requestedAmount\" : 1.489415909854170383397331534069962799549102783203125,    \"id\" : 7,    \"subdistributorId\" : 7,    \"currencyCode\" : \"currencyCode\"  },  \"operationalPorfolioOrders\" : [ {    \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,    \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",    \"operationalPortfolioDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,    \"spanishTransferId\" : \"spanishTransferId\",    \"priceValue\" : \"priceValue\",    \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioAssociatedDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"transactionTypeCode\" : \"transactionTypeCode\",    \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",    \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,    \"externalReference\" : 1,    \"operationalPortfolioMovementFeeData\" : {      \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,      \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,      \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875    },    \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",    \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",    \"operationalPortfolioDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"operationalPortfolioOrderSettingsData\" : {      \"statusOrderCode\" : \"statusOrderCode\",      \"errorCode\" : \"errorCode\"    },    \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,    \"id\" : 5,    \"currencyCode\" : \"currencyCode\",    \"operationalPortfolioAssociatedDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  }, {    \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,    \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",    \"operationalPortfolioDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,    \"spanishTransferId\" : \"spanishTransferId\",    \"priceValue\" : \"priceValue\",    \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioAssociatedDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"transactionTypeCode\" : \"transactionTypeCode\",    \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",    \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,    \"externalReference\" : 1,    \"operationalPortfolioMovementFeeData\" : {      \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,      \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,      \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875    },    \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",    \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",    \"operationalPortfolioDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"operationalPortfolioOrderSettingsData\" : {      \"statusOrderCode\" : \"statusOrderCode\",      \"errorCode\" : \"errorCode\"    },    \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,    \"id\" : 5,    \"currencyCode\" : \"currencyCode\",    \"operationalPortfolioAssociatedDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addOrder", nickname = "addOrderUsingPOST", notes = "Add new order", response = OrderAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = OrderAndMessages.class),
        @ApiResponse(code = 201, message = "successful operation", response = OrderAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/orders",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OrderAndMessages> addOrderUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "body", required = true) @Valid @RequestBody OrderAndSignature orderAndSignature) {

        Order order = orderAndSignature.getOrder();

        OrderAndMessages orderAndMessages = new OrderAndMessages();
        orderAndMessages.setOrder(order);

        if (order.getId() == null) {
            Random random = new SecureRandom(distributorId.toString().getBytes());

            order.setId(Math.abs(random.nextLong()));
            order.getDealingInstrument().setLabel(RandomStringUtils.randomAlphabetic(10));
            order.getDealingInstrument().setUrl(RandomStringUtils.randomAlphabetic(10));
            order.getOrderAmountData().setAwardedGrossAmount(order.getOrderAmountData().getRequestedGrossAmount());
            order.getOrderAmountData().setAwardedGrossAmountInLocalCurrency(order.getOrderAmountData().getRequestedGrossAmount());

            OffsetDateTime now = OffsetDateTime.now();
            order.getOrderDateData().setOrderedDate(now);
            order.getOrderDateData().setSettlementDate(now);

        }
        Message message = new Message();
        message.setStatus(Message.StatusEnum.OK);
        orderAndMessages.setMessages(Collections.singletonList(message));
        return ResponseEntity.ok(orderAndMessages);

    }


    @ApiOperation(value = "addPortfolioPrices", nickname = "addPortfolioPricesUsingPOST", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/{portfolioId}/calculatePrices",
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<Void> addPortfolioPricesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody RebalancingFilter rebalancingFilter) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addRiskControlAlarm", nickname = "addRiskControlAlarmUsingPOST", notes = "Add new RiskControlAlarm", response = RiskControlAlarm.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = RiskControlAlarm.class),
        @ApiResponse(code = 201, message = "successful operation", response = RiskControlAlarm.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/riskControlAlarms",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<RiskControlAlarm> addRiskControlAlarmUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody RiskControlAlarm riskControlAlarm) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalStatus\" : \"ACTIVED\",  \"investmentLimits\" : [ {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  }, {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  } ],  \"mailNotification\" : true,  \"operationalPortfolioId\" : 5,  \"distributorId\" : 0,  \"scope\" : \"MODEL_PORTFOLIO\",  \"name\" : \"name\",  \"language\" : \"SPANISH\",  \"id\" : 6,  \"mailNotifications\" : [ {    \"investmentLimitRiskLevelCodes\" : [ \"investmentLimitRiskLevelCodes\", \"investmentLimitRiskLevelCodes\" ],    \"id\" : 1,    \"email\" : \"email\"  }, {    \"investmentLimitRiskLevelCodes\" : [ \"investmentLimitRiskLevelCodes\", \"investmentLimitRiskLevelCodes\" ],    \"id\" : 1,    \"email\" : \"email\"  } ],  \"typeCode\" : \"typeCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addSavingPlan", nickname = "addSavingPlanUsingPOST", notes = "Add a new {SavingPlan}", response = SavingPlan.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = SavingPlan.class),
        @ApiResponse(code = 201, message = "successful operation", response = SavingPlan.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/savingPlans",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<SavingPlan> addSavingPlanUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "body", required = true) @Valid @RequestBody SavingPlanAndSignature savingPlanAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"assetAccountCode\" : \"assetAccountCode\",  \"amount\" : 0.80082819046101150206595775671303272247314453125,  \"currentAccountCode\" : \"currentAccountCode\",  \"fee\" : 4.1456080298839363962315474054776132106781005859375,  \"firstTransactionAmount\" : 7.3862819483858839220147274318151175975799560546875,  \"basicData\" : {    \"externalReference\" : \"externalReference\",    \"distributorId\" : 6,    \"subdistributorId\" : 1,    \"transactionTypeCode\" : \"transactionTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"statusCode\" : \"statusCode\"  },  \"firstTransactionFeePercentage\" : 1.231513536777255612975068288506008684635162353515625,  \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"associatedContract\" : {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  },  \"periodCode\" : \"periodCode\",  \"shares\" : 1.173074250955943309548956676735542714595794677734375,  \"dealingInstrumentsBreakdown\" : [ {    \"shares\" : 7.061401241503109105224211816675961017608642578125,    \"amount\" : 5.63737665663332876420099637471139430999755859375,    \"dealingInstrumentType\" : \"FUND\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"dealingInstrumentId\" : 2  }, {    \"shares\" : 7.061401241503109105224211816675961017608642578125,    \"amount\" : 5.63737665663332876420099637471139430999755859375,    \"dealingInstrumentType\" : \"FUND\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"dealingInstrumentId\" : 2  } ],  \"collectiveInvestmentSchemeId\" : 5,  \"reductionPercentage\" : 7.4577447736837658709418974467553198337554931640625,  \"secondTransactionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : 1,  \"numberOfQuotas\" : 1,  \"enlargenmentData\" : {    \"amount\" : 9.301444243932575517419536481611430644989013671875,    \"quotas\" : 3  },  \"numberOfQuotasFirstTransaction\" : 6,  \"expenses\" : 2.027123023002321833274663731572218239307403564453125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addScorecard", nickname = "addScorecardUsingPOST", notes = "Add new Scorecard", response = Scorecard.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = Scorecard.class),
        @ApiResponse(code = 201, message = "successful operation", response = Scorecard.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/scorecards",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<Scorecard> addScorecardUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody Scorecard scorecard) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"distributorId\" : 0,  \"name\" : \"name\",  \"assigned\" : true,  \"id\" : \"id\",  \"featureDetails\" : [ {    \"featureTypeCode\" : \"featureTypeCode\",    \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"  }, {    \"featureTypeCode\" : \"featureTypeCode\",    \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addSpanishTransfer", nickname = "addSpanishTransferUsingPOST", notes = "", response = SpanishTransfer.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = SpanishTransfer.class),
        @ApiResponse(code = 201, message = "successful operation", response = SpanishTransfer.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<SpanishTransfer> addSpanishTransferUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "filter", required = true) @Valid @RequestBody SpanishTransferAndSignature spanishTransferAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"exchangeRateApplied\" : 4.1456080298839363962315474054776132106781005859375,  \"transactionExternalReference\" : \"transactionExternalReference\",  \"processedAsSwitch\" : true,  \"sourceItem\" : {    \"marketer\" : {      \"entityCnmvCode\" : \"entityCnmvCode\",      \"entityCnmvNif\" : \"entityCnmvNif\",      \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",      \"dealingInstrumentName\" : \"dealingInstrumentName\",      \"currentAccountCode\" : \"currentAccountCode\",      \"entityName\" : \"entityName\",      \"dealingInstrumentNif\" : \"dealingInstrumentNif\"    },    \"etfData\" : {      \"brokerId\" : 2,      \"stockExchangeId\" : \"stockExchangeId\"    },    \"feeData\" : {      \"secondSpanishTransferFeeAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"firstSpanishTransferFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"firstSpanishTransferFeePercentage\" : 9.301444243932575517419536481611430644989013671875,      \"secondSpanishTransferFeePercentage\" : 2.027123023002321833274663731572218239307403564453125    },    \"omnibus\" : true,    \"distributorId\" : 5,    \"dealingInstrumentExternalCodeKeyValues\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"dealingInstrumentType\" : \"FUND\",    \"contractExternalReference\" : \"contractExternalReference\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"currencyCode\" : \"currencyCode\"  },  \"substatusCode\" : \"substatusCode\",  \"basicData\" : {    \"externalReference\" : \"externalReference\",    \"shares\" : 1.46581298050294517310021547018550336360931396484375,    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"requestType\" : \"OUTSIDE\",    \"distributorId\" : 6,    \"transferType\" : \"TOTAL\",    \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"transferClass\" : \"ENTRY\",    \"subdistributorId\" : 5,    \"statusCode\" : \"statusCode\"  },  \"principals\" : [ {    \"firstName\" : \"firstName\",    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"taxpayerId\" : \"taxpayerId\"  }, {    \"firstName\" : \"firstName\",    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"taxpayerId\" : \"taxpayerId\"  } ],  \"dateData\" : {    \"sourceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"destinationDate\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"id\" : \"id\",  \"destinationItem\" : {    \"marketer\" : {      \"entityCnmvCode\" : \"entityCnmvCode\",      \"entityCnmvNif\" : \"entityCnmvNif\",      \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",      \"dealingInstrumentName\" : \"dealingInstrumentName\",      \"currentAccountCode\" : \"currentAccountCode\",      \"entityName\" : \"entityName\",      \"dealingInstrumentNif\" : \"dealingInstrumentNif\"    },    \"etfData\" : {      \"brokerId\" : 2,      \"stockExchangeId\" : \"stockExchangeId\"    },    \"feeData\" : {      \"secondSpanishTransferFeeAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"firstSpanishTransferFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"firstSpanishTransferFeePercentage\" : 9.301444243932575517419536481611430644989013671875,      \"secondSpanishTransferFeePercentage\" : 2.027123023002321833274663731572218239307403564453125    },    \"omnibus\" : true,    \"distributorId\" : 5,    \"dealingInstrumentExternalCodeKeyValues\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"dealingInstrumentType\" : \"FUND\",    \"contractExternalReference\" : \"contractExternalReference\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"currencyCode\" : \"currencyCode\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addStockTransfer", nickname = "addStockTransferUsingPOST", notes = "Add new stock transfer", response = StockTransferAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = StockTransferAndMessages.class),
        @ApiResponse(code = 201, message = "successful operation", response = StockTransferAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/stockTransfers",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<StockTransferAndMessages> addStockTransferUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody StockTransferAndSignature stockTransferAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ],  \"stockTransfer\" : {    \"intermediaryBic\" : \"intermediaryBic\",    \"stockTransferSharesData\" : {      \"sharesAfterDistribution\" : 2.027123023002321833274663731572218239307403564453125,      \"requestedSharesAsWords\" : \"requestedSharesAsWords\",      \"requestedShares\" : 3.61607674925191080461672754609026014804840087890625,      \"sharesBeforeDistribution\" : 4.1456080298839363962315474054776132106781005859375    },    \"stockTransferItalianRetailMarketData\" : {      \"weightedAveragePrice\" : 7.061401241503109105224211816675961017608642578125,      \"withheldAmount\" : 9.301444243932575517419536481611430644989013671875,      \"weightedAverageCost\" : 2.3021358869347654518833223846741020679473876953125    },    \"senderBic\" : \"senderBic\",    \"swiftText\" : \"swiftText\",    \"stockTransferBasicData\" : {      \"productId\" : 5,      \"stockTransferStatusCode\" : \"stockTransferStatusCode\",      \"distributorId\" : 1,      \"stockTransferTypeCode\" : \"stockTransferTypeCode\",      \"dealingInstrumentType\" : \"FUND\",      \"categoryCode\" : \"categoryCode\",      \"contractExternalReference\" : \"contractExternalReference\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"externalReference\" : \"externalReference\",      \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"additionalReferenceSwift\" : \"additionalReferenceSwift\",      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"additionalReference\" : \"additionalReference\",      \"subdistributorId\" : 5,      \"dealingFundHouseId\" : 6,      \"followupDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"stockTransferSettingsData\" : {      \"applicationFormAccessible\" : true,      \"errorCode\" : \"errorCode\",      \"platformAccount\" : \"platformAccount\",      \"signedApplicationFormAccessible\" : true,      \"platformCode\" : \"platformCode\",      \"taxTransactionHistory\" : true    },    \"historyAccessible\" : true,    \"id\" : \"id\",    \"currencyCode\" : \"currencyCode\",    \"stockTransferTransactionData\" : {      \"externalReference\" : \"externalReference\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"internalStockTransferData\" : {      \"associatedProductId\" : 0,      \"associatedContractExternalReference\" : \"associatedContractExternalReference\",      \"associatedTransactionExternalReference\" : \"associatedTransactionExternalReference\"    },    \"externalStockTransferData\" : {      \"address\" : \"address\",      \"externalAccountCode\" : \"externalAccountCode\",      \"document\" : \"document\",      \"externalCurrentAccountCode\" : \"externalCurrentAccountCode\",      \"name\" : \"name\",      \"externalAccountName\" : \"externalAccountName\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addTheoreticalPortfolioComposition", nickname = "addTheoreticalPortfolioCompositionUsingPOST", notes = "Add Theoretical Portfolio Compositions", response = ComposedComposition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = ComposedComposition.class),
        @ApiResponse(code = 201, message = "successful operation", response = ComposedComposition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/compositions",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ComposedComposition> addTheoreticalPortfolioCompositionUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "The {Composition} object", required = true) @Valid @RequestBody ComposedComposition composedComposition) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"composition\" : {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"resources\" : [ {      \"reference\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"instrumentType\" : \"FUND\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    }, {      \"reference\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"instrumentType\" : \"FUND\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    } ],    \"id\" : 0  },  \"benchmarkComposition\" : {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"resources\" : [ {      \"reference\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"instrumentType\" : \"FUND\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    }, {      \"reference\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"instrumentType\" : \"FUND\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    } ],    \"id\" : 0  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addTheoreticalPortfolio", nickname = "addTheoreticalPortfolioUsingPOST", notes = "", response = Portfolio.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = Portfolio.class),
        @ApiResponse(code = 201, message = "successful operation", response = Portfolio.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<Portfolio> addTheoreticalPortfolioUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody Portfolio portfolio) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : [ {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"fees\" : {    \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,    \"total\" : 2.027123023002321833274663731572218239307403564453125,    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performance\" : 3.61607674925191080461672754609026014804840087890625,    \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,    \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,    \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,    \"distribution\" : 5.962133916683182377482808078639209270477294921875,    \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,    \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,    \"others\" : 9.301444243932575517419536481611430644989013671875  },  \"typeShare\" : \"ACUMULATION\",  \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",  \"investmentObjective\" : \"investmentObjective\",  \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"lastCompositionId\" : 6,  \"lastBenchmarkCompositionId\" : 0,  \"emails\" : [ \"emails\", \"emails\" ],  \"portfolioType\" : \"SIMULATED\",  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"rebalancingTypeCode\" : \"rebalancingTypeCode\",  \"name\" : \"name\",  \"id\" : \"id\",  \"currencyCode\" : \"currencyCode\",  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addUserTheoreticalPortfolioAccess", nickname = "addUserTheoreticalPortfolioAccessUsingPOST", notes = "Add access to a specific {User}", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/access/{userId}/add",
        method = RequestMethod.POST)
    default ResponseEntity<Void> addUserTheoreticalPortfolioAccessUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "The Id of the {User}", required = true) @PathVariable("userId") String userId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "authorizeOperationalPortfolioOrder", nickname = "authorizeOperationalPortfolioOrderUsingPOST", notes = "Authorize operational portfolio Order", response = OperationalPortfolioTransaction.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = OperationalPortfolioTransaction.class),
        @ApiResponse(code = 201, message = "successful operation", response = OperationalPortfolioTransaction.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/transactions/orders/authorize",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioTransaction> authorizeOperationalPortfolioOrderUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody OperationalPortfolioTransactionAndSignature operationalPortfolioTransactionAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalPortfolioMovement\" : {    \"authorizationNeeded\" : true,    \"associatedContractExternalReference\" : \"associatedContractExternalReference\",    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"associatedDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"operationalPortfolioId\" : 1,    \"operationalPortfolioMovementDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"productId\" : 1,    \"requestedShares\" : 6.8468526983526398765889098285697400569915771484375,    \"associatedDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"distributorId\" : 4,    \"contract\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"movementDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"contractExternalReference\" : \"contractExternalReference\",    \"associatedContract\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"externalReference\" : \"externalReference\",    \"operationalPortfolioMovementFeeData\" : {      \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,      \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,      \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875    },    \"movementType\" : \"DIRECT\",    \"operationalPortfolioMovementTypeCode\" : \"operationalPortfolioMovementTypeCode\",    \"scope\" : \"MODEL_PORTFOLIO\",    \"requestedAmount\" : 1.489415909854170383397331534069962799549102783203125,    \"id\" : 7,    \"subdistributorId\" : 7,    \"currencyCode\" : \"currencyCode\"  },  \"operationalPorfolioOrders\" : [ {    \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,    \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",    \"operationalPortfolioDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,    \"spanishTransferId\" : \"spanishTransferId\",    \"priceValue\" : \"priceValue\",    \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioAssociatedDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"transactionTypeCode\" : \"transactionTypeCode\",    \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",    \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,    \"externalReference\" : 1,    \"operationalPortfolioMovementFeeData\" : {      \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,      \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,      \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875    },    \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",    \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",    \"operationalPortfolioDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"operationalPortfolioOrderSettingsData\" : {      \"statusOrderCode\" : \"statusOrderCode\",      \"errorCode\" : \"errorCode\"    },    \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,    \"id\" : 5,    \"currencyCode\" : \"currencyCode\",    \"operationalPortfolioAssociatedDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  }, {    \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,    \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",    \"operationalPortfolioDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,    \"spanishTransferId\" : \"spanishTransferId\",    \"priceValue\" : \"priceValue\",    \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioAssociatedDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"transactionTypeCode\" : \"transactionTypeCode\",    \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",    \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,    \"externalReference\" : 1,    \"operationalPortfolioMovementFeeData\" : {      \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,      \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,      \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875    },    \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",    \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",    \"operationalPortfolioDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"operationalPortfolioOrderSettingsData\" : {      \"statusOrderCode\" : \"statusOrderCode\",      \"errorCode\" : \"errorCode\"    },    \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,    \"id\" : 5,    \"currencyCode\" : \"currencyCode\",    \"operationalPortfolioAssociatedDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "authorizeSpanishTransfer", nickname = "authorizeSpanishTransferUsingPOST", notes = "Authorize {SpanishTransfer}", response = SpanishTransferIdAndMessage.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SpanishTransferIdAndMessage.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/authorize",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<SpanishTransferIdAndMessage>> authorizeSpanishTransferUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody SpanishTransferIdsAndSignature spanishTransferIdsAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"spanishTransferId\" : 0,  \"message\" : {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "authorizeStockTransfer", nickname = "authorizeStockTransferUsingPOST", notes = "Authorize a list of {StockTransfer}", response = StockTransferIdAndMessage.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = StockTransferIdAndMessage.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/stockTransfers/authorize",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<StockTransferIdAndMessage>> authorizeStockTransferUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody StockTransferIdsAndSignature stockTransferIdsAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"stockTransferId\" : \"stockTransferId\",  \"message\" : {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "authorizeTransactions", nickname = "authorizeTransactionsUsingPUT", notes = "Authorize {Transaction}s", response = TransactionIdAndMessage.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = TransactionIdAndMessage.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/transactions/authorize",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<List<TransactionIdAndMessage>> authorizeTransactionsUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody TransactionIdsAndSignature transactionIdsAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  },  \"transactionId\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "cancelOperationalPortfolioAuthorization", nickname = "cancelOperationalPortfolioAuthorizationUsingPOST", notes = "Cancel Operational Portfolio Authorization", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/transactions/orders/authorize/cancel",
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<Void> cancelOperationalPortfolioAuthorizationUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "signature", required = true) @Valid @RequestBody OperationalPortfolioTransactionAndSignature operationalPortfolioTransactionAndSignature) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "cancelOperationalPortfolio", nickname = "cancelOperationalPortfolioUsingPUT", notes = "Updates a operational portfolio with form data", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/cancel",
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<Void> cancelOperationalPortfolioUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "signature", required = true) @Valid @RequestBody Signature signature) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "cancelSavingPlan", nickname = "cancelSavingPlanUsingPUT", notes = "cancel the current {SavingPlan}", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/savingPlans/{savingPlanId}/cancel",
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<Void> cancelSavingPlanUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "The Id of the {SavingPlan}", required = true) @PathVariable("savingPlanId") Long savingPlanId, @ApiParam(value = "signature", required = true) @Valid @RequestBody Signature signature) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "cancelSpanishTransfer", nickname = "cancelSpanishTransferUsingPUT", notes = "Cancel a {SpanishTransfer}", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/{spanishTransferId}/cancel",
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<Void> cancelSpanishTransferUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {SpanishTransfer}", required = true) @PathVariable("spanishTransferId") String spanishTransferId, @ApiParam(value = "signature", required = true) @Valid @RequestBody Signature signature) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "cancelStockTransfer", nickname = "cancelStockTransferUsingPUT", notes = "Updates a stock transfer with form data", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/stockTransfers/{stockTransferId}/cancel",
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<Void> cancelStockTransferUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {StockTransfer}", required = true) @PathVariable("stockTransferId") String stockTransferId, @ApiParam(value = "signature", required = true) @Valid @RequestBody Signature signature) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "cancelTransaction", nickname = "cancelTransactionUsingPOST", notes = "Cancel a Transaction", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/transactions/{transactionId}/cancel",
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<Void> cancelTransactionUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Transaction}", required = true) @PathVariable("transactionId") Long transactionId, @ApiParam(value = "signature", required = true) @Valid @RequestBody Signature signature) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "changeStatusInvestmentLimit", nickname = "changeStatusInvestmentLimitUsingPUT", notes = "Desactive or active InvestmentLimit with form data", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/investmentLimits/{investmentLimitId}/changeStatus",
        method = RequestMethod.PUT)
    default ResponseEntity<Void> changeStatusInvestmentLimitUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {InvestmentLimit}", required = true) @PathVariable("investmentLimitId") Long investmentLimitId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "changeStatusRiskControlAlarm", nickname = "changeStatusRiskControlAlarmUsingPUT", notes = "Desactive or active RiskControlAlarm with form data", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/riskControlAlarms/{riskControlAlarmId}/changeStatus",
        method = RequestMethod.PUT)
    default ResponseEntity<Void> changeStatusRiskControlAlarmUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {RiskControlAlarm}", required = true) @PathVariable("riskControlAlarmId") Long riskControlAlarmId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deleteTheoreticalPortfolioById", nickname = "deleteTheoreticalPortfolioByIdUsingDELETE", notes = "Delete a portfolio", response = Portfolio.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Portfolio.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}",
        produces = {"application/json"},
        method = RequestMethod.DELETE)
    default ResponseEntity<Portfolio> deleteTheoreticalPortfolioByIdUsingDELETE(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : [ {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"fees\" : {    \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,    \"total\" : 2.027123023002321833274663731572218239307403564453125,    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performance\" : 3.61607674925191080461672754609026014804840087890625,    \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,    \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,    \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,    \"distribution\" : 5.962133916683182377482808078639209270477294921875,    \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,    \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,    \"others\" : 9.301444243932575517419536481611430644989013671875  },  \"typeShare\" : \"ACUMULATION\",  \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",  \"investmentObjective\" : \"investmentObjective\",  \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"lastCompositionId\" : 6,  \"lastBenchmarkCompositionId\" : 0,  \"emails\" : [ \"emails\", \"emails\" ],  \"portfolioType\" : \"SIMULATED\",  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"rebalancingTypeCode\" : \"rebalancingTypeCode\",  \"name\" : \"name\",  \"id\" : \"id\",  \"currencyCode\" : \"currencyCode\",  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deleteTheoreticalPortfolioCompositionById", nickname = "deleteTheoreticalPortfolioCompositionByIdUsingDELETE", notes = "Delete a Theorical Portfolio Composition", response = Composition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Composition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/compositions/{compositionId}",
        produces = {"application/json"},
        method = RequestMethod.DELETE)
    default ResponseEntity<Composition> deleteTheoreticalPortfolioCompositionByIdUsingDELETE(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "Composition Id", required = true) @PathVariable("compositionId") Long compositionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\",  \"resources\" : [ {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deleteUserTheoreticalPortfolioAccess", nickname = "deleteUserTheoreticalPortfolioAccessUsingDELETE", notes = "Delete access to a specific {User}", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/access/{userId}/delete",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteUserTheoreticalPortfolioAccessUsingDELETE(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "The Id of the {User}", required = true) @PathVariable("userId") String userId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateCompositionReportAsPdf", nickname = "generateCompositionReportAsPdfUsingPOST", notes = "Generate composition report as a PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/report/composition/pdf",
        produces = {"application/pdf"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateCompositionReportAsPdfUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.", required = true) @Valid @RequestBody MarketPerformanceFilter marketPerformanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateCompositionReportAsXls", nickname = "generateCompositionReportAsXlsUsingPOST", notes = "Generate composition report as a XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/report/composition/xls",
        produces = {"application/vnd.ms-excel"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateCompositionReportAsXlsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.", required = true) @Valid @RequestBody MarketPerformanceFilter marketPerformanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateExpertInsightReportAsPdf", nickname = "generateExpertInsightReportAsPdfUsingPOST", notes = "Generate expert insight report as a PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/report/expertInsight/pdf",
        produces = {"application/pdf"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateExpertInsightReportAsPdfUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "Historical Performance Filter", required = true) @Valid @RequestBody HistoricalPerformanceFilter historicalPerformanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateExpertInsightReportAsXls", nickname = "generateExpertInsightReportAsXlsUsingPOST", notes = "Generate expert insight report as a XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/report/expertInsight/xls",
        produces = {"application/vnd.ms-excel"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateExpertInsightReportAsXlsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "Historical Performance Filter", required = true) @Valid @RequestBody HistoricalPerformanceFilter historicalPerformanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateLinceOverviewReportAsPdf", nickname = "generateLinceOverviewReportAsPdfUsingPOST", notes = "Generate lince overview report as a PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/report/overview/pdf",
        produces = {"application/pdf"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateLinceOverviewReportAsPdfUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.", required = true) @Valid @RequestBody MarketPerformanceFilter marketPerformanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateLinceOverviewReportAsXls", nickname = "generateLinceOverviewReportAsXlsUsingPOST", notes = "Generate lince overview report as a XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/report/overview/xls",
        produces = {"application/vnd.ms-excel"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateLinceOverviewReportAsXlsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.", required = true) @Valid @RequestBody MarketPerformanceFilter marketPerformanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateLookThroughReportAsPdf", nickname = "generateLookThroughReportAsPdfUsingPOST", notes = "Generate look through report as a PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/report/lookThrough/pdf",
        produces = {"application/pdf"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateLookThroughReportAsPdfUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "Evolution Breakdown Filter", required = true) @Valid @RequestBody EvolutionBreakdownFilter evolutionBreakdownFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateLookThroughReportAsXls", nickname = "generateLookThroughReportAsXlsUsingPOST", notes = "Generate look through report as a XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/report/lookThrough/xls",
        produces = {"application/vnd.ms-excel"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateLookThroughReportAsXlsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "Evolution Breakdown Filter", required = true) @Valid @RequestBody EvolutionBreakdownFilter evolutionBreakdownFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getAccountById", nickname = "getAccountByIdUsingGET", notes = "Find account by ID", response = Account.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Account.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/accounts/{accountId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Account> getAccountByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Account}", required = true) @PathVariable("accountId") String accountId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"currentAccountCode\" : \"currentAccountCode\",  \"productId\" : 6,  \"name\" : \"name\",  \"id\" : \"id\",  \"dealingFundHouseId\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getClientByIdAsPdf", nickname = "getClientByIdAsPdfUsingGET", notes = "Returns client details as PDF", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/clients/{clientId}/pdf",
        produces = {"application/pdf"},
        method = RequestMethod.GET)
    default ResponseEntity<List<byte[]>> getClientByIdAsPdfUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Client}", required = true) @PathVariable("clientId") String clientId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getClientById", nickname = "getClientByIdUsingGET", notes = "Find client by ID", response = Client.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Client.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/clients/{clientId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Client> getClientByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Client}", required = true) @PathVariable("clientId") String clientId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"italianRetailMarketFatcaData\" : {    \"usTinTypeCode\" : \"usTinTypeCode\",    \"ateco\" : \"ateco\",    \"clientFatcaStatusCode\" : \"clientFatcaStatusCode\",    \"distributorFatcaStatusCode\" : \"distributorFatcaStatusCode\",    \"usGiin\" : \"usGiin\",    \"fatcaCertificateTypeCode\" : \"fatcaCertificateTypeCode\",    \"newAccount\" : true,    \"secondNationalityCountryCode\" : \"secondNationalityCountryCode\",    \"thirdNationalityCountryCode\" : \"thirdNationalityCountryCode\",    \"usTin\" : \"usTin\",    \"documentIssuingCountryCode\" : \"documentIssuingCountryCode\"  },  \"addresses\" : [ {    \"externalReference\" : \"externalReference\",    \"address\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"fiscalAddress\" : true,    \"residentAddress\" : true  }, {    \"externalReference\" : \"externalReference\",    \"address\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"fiscalAddress\" : true,    \"residentAddress\" : true  } ],  \"clientTypeCode\" : \"LEGAL\",  \"countryOfBirthCode\" : \"countryOfBirthCode\",  \"document\" : \"document\",  \"fatcaData\" : {    \"postalZipCode\" : \"postalZipCode\",    \"fatcaTypeCode\" : \"fatcaTypeCode\",    \"usFiscalTypeCode\" : \"usFiscalTypeCode\",    \"fiscalZipCode\" : \"fiscalZipCode\",    \"usTaxReference\" : \"usTaxReference\"  },  \"professionalAccording200439CE\" : true,  \"cityOfBirth\" : \"cityOfBirth\",  \"foreignClientData\" : {    \"certficationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"nativeOfficialDocument\" : \"nativeOfficialDocument\",    \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",    \"nonResidentDocumentTypeCode\" : \"nonResidentDocumentTypeCode\",    \"nativeFiscalIdentification\" : \"nativeFiscalIdentification\"  },  \"surname\" : \"surname\",  \"italianRetailMarketClientData\" : {    \"cipher\" : \"cipher\",    \"expeditionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"regionOfExpedition\" : \"regionOfExpedition\",    \"nationalityCountryCode\" : \"nationalityCountryCode\",    \"nativeOfficialDocument\" : \"nativeOfficialDocument\",    \"residentCountryFiscalIdentification\" : \"residentCountryFiscalIdentification\",    \"fiscalCountryCode\" : \"fiscalCountryCode\",    \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",    \"corporateName\" : \"corporateName\",    \"genderCode\" : \"MALE\",    \"residenceValidityExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"authority\" : \"authority\",    \"businessCountryFiscalIdentification\" : \"businessCountryFiscalIdentification\",    \"regionOfBirth\" : \"regionOfBirth\",    \"placeOfExpedition\" : \"placeOfExpedition\"  },  \"secondSurname\" : \"secondSurname\",  \"id\" : \"id\",  \"subdistributorId\" : 6,  \"cnae\" : \"cnae\",  \"residentInSpain\" : true,  \"distributorId\" : 0,  \"birthDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"externalReference\" : \"externalReference\",  \"firstName\" : \"firstName\",  \"documentTypeCode\" : \"documentTypeCode\",  \"entityTypeCode\" : \"entityTypeCode\",  \"sectorization\" : \"sectorization\",  \"spanishTransfersPermitted\" : true,  \"productTypeCode\" : \"productTypeCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getClientFatcaControlling", nickname = "getClientFatcaControllingUsingGET", notes = "Get FATCA controlling data around a client", response = FatcaControlling.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = FatcaControlling.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/clients/{clientId}/breakdowns/fatca/controlling",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<FatcaControlling> getClientFatcaControllingUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Client}", required = true) @PathVariable("clientId") String clientId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"clientId\" : \"clientId\",  \"clientsBreakdown\" : [ {    \"birthday\" : \"2000-01-23T04:56:07.000+00:00\",    \"firstname\" : \"firstname\",    \"usFiscalTypeCode\" : \"usFiscalTypeCode\",    \"clientType\" : \"LEGAL\",    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"taxAddress\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"usTaxReference\" : \"usTaxReference\",    \"message\" : {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }  }, {    \"birthday\" : \"2000-01-23T04:56:07.000+00:00\",    \"firstname\" : \"firstname\",    \"usFiscalTypeCode\" : \"usFiscalTypeCode\",    \"clientType\" : \"LEGAL\",    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"taxAddress\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"usTaxReference\" : \"usTaxReference\",    \"message\" : {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }  } ],  \"distributorId\" : \"distributorId\",  \"subdistributorId\" : \"subdistributorId\",  \"clientDocument\" : \"clientDocument\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getContractByIdAsPdf", nickname = "getContractByIdAsPdfUsingGET", notes = "Return the contract details as PDF", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/pdf",
        produces = {"application/pdf"},
        method = RequestMethod.GET)
    default ResponseEntity<List<byte[]>> getContractByIdAsPdfUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getContractById", nickname = "getContractByIdUsingGET", notes = "Find contract by ID", response = Contract.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Contract.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Contract> getContractByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"withholding\" : true,  \"italianRetailMarketContractInformation\" : {    \"scudato\" : true,    \"fiscalGroupingCode\" : \"fiscalGroupingCode\",    \"fiscalAddress\" : {      \"clientExternalReference\" : \"clientExternalReference\",      \"clientId\" : \"clientId\",      \"addressExternalReference\" : \"addressExternalReference\"    },    \"newExternalReference\" : \"newExternalReference\",    \"postalAdress\" : {      \"clientExternalReference\" : \"clientExternalReference\",      \"clientId\" : \"clientId\",      \"addressExternalReference\" : \"addressExternalReference\"    },    \"newSubdistributorId\" : 5,    \"fiscalGroupingExternalReference\" : \"fiscalGroupingExternalReference\"  },  \"productId\" : 5,  \"shareholders\" : [ {    \"clientExternalReference\" : \"clientExternalReference\",    \"clientId\" : \"clientId\",    \"shareholdingTypeOrder\" : 7,    \"shareholdingTypeCode\" : \"shareholdingTypeCode\",    \"ownershipPercentage\" : 2.3021358869347654518833223846741020679473876953125  }, {    \"clientExternalReference\" : \"clientExternalReference\",    \"clientId\" : \"clientId\",    \"shareholdingTypeOrder\" : 7,    \"shareholdingTypeCode\" : \"shareholdingTypeCode\",    \"ownershipPercentage\" : 2.3021358869347654518833223846741020679473876953125  } ],  \"depositaryId\" : 0,  \"distributorId\" : 6,  \"testamentary\" : true,  \"externalReference\" : \"externalReference\",  \"advisor\" : \"advisor\",  \"testamentaryContractExternalReference\" : \"testamentaryContractExternalReference\",  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"defaultLanguageCode\" : \"defaultLanguageCode\",  \"accounts\" : [ {    \"assetAccountCode\" : \"assetAccountCode\",    \"currentAccountCode\" : \"currentAccountCode\"  }, {    \"assetAccountCode\" : \"assetAccountCode\",    \"currentAccountCode\" : \"currentAccountCode\"  } ],  \"id\" : 1,  \"subdistributorId\" : 9,  \"externalReferenceSpanishDealingFundHouse\" : \"externalReferenceSpanishDealingFundHouse\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getDepositaryById", nickname = "getDepositaryByIdUsingGET1", notes = "", response = Depositary.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Depositary.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/depositaries/{depositaryId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Depositary> getDepositaryByIdUsingGET1(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Depositary}", required = true) @PathVariable("depositaryId") Long depositaryId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"distributorId\" : 0,  \"name\" : \"name\",  \"accountCodeRequired\" : true,  \"id\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getDistributorById", nickname = "getDistributorByIdUsingGET", notes = "Find Distributor by ID", response = Distributor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Distributor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Distributor> getDistributorByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"accountingCenterCountryCode\" : \"accountingCenterCountryCode\",  \"address\" : {    \"roadTypeCode\" : \"roadTypeCode\",    \"zipCode\" : \"zipCode\",    \"regionCode\" : \"regionCode\",    \"address\" : \"address\",    \"complementaryAddress\" : \"complementaryAddress\",    \"city\" : \"city\",    \"countryCode\" : \"countryCode\",    \"region\" : \"region\"  },  \"name\" : \"name\",  \"nif\" : \"nif\",  \"id\" : 0,  \"logoUrl\" : \"logoUrl\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getDistributorSettings", nickname = "getDistributorSettingsUsingGET", notes = "Get Distributor Settings", response = DistributorSettings.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = DistributorSettings.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/settings",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<DistributorSettings> getDistributorSettingsUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"apportionBySubdistributor\" : true,  \"italianRetailMarket\" : true,  \"italianTaxation\" : true,  \"transactionIdPolicy\" : \"NUMERIC_7\",  \"apportionByContract\" : true,  \"orderCommentsPermmitted\" : true,  \"qualitativeInfomation\" : true,  \"dealingCurrencyPolicy\" : \"INSTRUMENT_CURRENCY\",  \"assetAccountCodeRequired\" : true,  \"transactionIdAutogenerated\" : true,  \"spanishTransfersPermitted\" : true}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFiscalSimulationByShareholder", nickname = "getFiscalSimulationByShareholderUsingPOST", notes = "Gets a fiscal simulation broken down by shareholder", response = FiscalSimulationBreakdown.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = FiscalSimulationBreakdown.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/simulations/fiscal/breakdowns/shareholders/simulate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<FiscalSimulationBreakdown>> getFiscalSimulationByShareholderUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "filter", required = true) @Valid @RequestBody FiscalSimulationFilter fiscalSimulationFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"exchangeRateApplied\" : 7.061401241503109105224211816675961017608642578125,  \"orderNumber\" : 2,  \"deduction\" : 5.63737665663332876420099637471139430999755859375,  \"price\" : {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  },  \"fee\" : 9.301444243932575517419536481611430644989013671875,  \"initialAmount\" : 3.61607674925191080461672754609026014804840087890625,  \"basicData\" : {    \"distributorId\" : 1,    \"capitalGained\" : 0.80082819046101150206595775671303272247314453125,    \"withholdingPercentage\" : 5.962133916683182377482808078639209270477294921875,    \"localCurrencyCode\" : \"localCurrencyCode\",    \"currencyCode\" : \"currencyCode\",    \"capitalGainedInLocalCurrency\" : 6.02745618307040320615897144307382404804229736328125  },  \"deductionInLocalCurrency\" : 2.3021358869347654518833223846741020679473876953125,  \"shareholderDocument\" : \"shareholderDocument\",  \"transactionOrderedDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"redeemedShares\" : 4.1456080298839363962315474054776132106781005859375}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFiscalSimulationByTransaction", nickname = "getFiscalSimulationByTransactionUsingPOST", notes = "Gets a fiscal simulation broken down by {Transaction}", response = FiscalSimulationBreakdown.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = FiscalSimulationBreakdown.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/simulations/fiscal/breakdowns/operations/simulate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<FiscalSimulationBreakdown>> getFiscalSimulationByTransactionUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "filter", required = true) @Valid @RequestBody FiscalSimulationByTransactionFilter fiscalSimulationByTransactionFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"exchangeRateApplied\" : 7.061401241503109105224211816675961017608642578125,  \"orderNumber\" : 2,  \"deduction\" : 5.63737665663332876420099637471139430999755859375,  \"price\" : {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  },  \"fee\" : 9.301444243932575517419536481611430644989013671875,  \"initialAmount\" : 3.61607674925191080461672754609026014804840087890625,  \"basicData\" : {    \"distributorId\" : 1,    \"capitalGained\" : 0.80082819046101150206595775671303272247314453125,    \"withholdingPercentage\" : 5.962133916683182377482808078639209270477294921875,    \"localCurrencyCode\" : \"localCurrencyCode\",    \"currencyCode\" : \"currencyCode\",    \"capitalGainedInLocalCurrency\" : 6.02745618307040320615897144307382404804229736328125  },  \"deductionInLocalCurrency\" : 2.3021358869347654518833223846741020679473876953125,  \"shareholderDocument\" : \"shareholderDocument\",  \"transactionOrderedDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"redeemedShares\" : 4.1456080298839363962315474054776132106781005859375}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFiscalSimulation", nickname = "getFiscalSimulationUsingPOST", notes = "Gets a fiscal simulation", response = FiscalSimulation.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = FiscalSimulation.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/simulations/fiscal/simulate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<FiscalSimulation> getFiscalSimulationUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "filter", required = true) @Valid @RequestBody FiscalSimulationFilter fiscalSimulationFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"withheldAmount\" : 2.3021358869347654518833223846741020679473876953125,  \"withheldAmountInLocalCurrency\" : 7.061401241503109105224211816675961017608642578125,  \"spanishMarketSimulationData\" : {    \"withholdingPercentageUntil2006\" : 5.63737665663332876420099637471139430999755859375,    \"capitalGainedUntil2006InLocalCurrency\" : 6.02745618307040320615897144307382404804229736328125,    \"withheldAmountUntil2006InLocalCurrency\" : 5.962133916683182377482808078639209270477294921875,    \"withheldAmountUntil2006\" : 1.46581298050294517310021547018550336360931396484375,    \"capitalGainedUntil2006\" : 0.80082819046101150206595775671303272247314453125  },  \"basicData\" : {    \"distributorId\" : 1,    \"capitalGained\" : 0.80082819046101150206595775671303272247314453125,    \"withholdingPercentage\" : 5.962133916683182377482808078639209270477294921875,    \"localCurrencyCode\" : \"localCurrencyCode\",    \"currencyCode\" : \"currencyCode\",    \"capitalGainedInLocalCurrency\" : 6.02745618307040320615897144307382404804229736328125  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundCatalogRequest", nickname = "getFundCatalogRequestUsingGET", notes = "Returns the latest {FundsCatalogResponse} made for this {Distributor}", response = FundCatalogResponse.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = FundCatalogResponse.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/fundCatalog",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<FundCatalogResponse> getFundCatalogRequestUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"statusDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"file\" : {    \"filename\" : \"filename\",    \"size\" : 0,    \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"title\" : \"title\",    \"url\" : \"url\"  },  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getInvestmentLimitById", nickname = "getInvestmentLimitByIdUsingGET", notes = "Retrieve a InvestmentLimit portolio operational from its Id", response = InvestmentLimit.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = InvestmentLimit.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/investmentLimits/{investmentLimitId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<InvestmentLimit> getInvestmentLimitByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {InvestmentLimit}", required = true) @PathVariable("investmentLimitId") Long investmentLimitId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",  \"operationalStatus\" : \"ACTIVED\",  \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,  \"features\" : [ {    \"featureTypeCode\" : \"featureTypeCode\",    \"maximum\" : 1.46581298050294517310021547018550336360931396484375,    \"valueCode\" : \"valueCode\",    \"id\" : \"id\",    \"minimum\" : 5.962133916683182377482808078639209270477294921875  }, {    \"featureTypeCode\" : \"featureTypeCode\",    \"maximum\" : 1.46581298050294517310021547018550336360931396484375,    \"valueCode\" : \"valueCode\",    \"id\" : \"id\",    \"minimum\" : 5.962133916683182377482808078639209270477294921875  } ],  \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,  \"notificationCause\" : \"LIMIT\",  \"distributorId\" : 6,  \"name\" : \"name\",  \"assigned\" : true,  \"id\" : 5,  \"descriptionData\" : \"descriptionData\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getMonitoringGlobalByOperationalPortfolio", nickname = "getMonitoringGlobalByOperationalPortfolioUsingGET", notes = "Retrieve a operational portfolio monitoring global from its Id", response = OperationalPorfolioMonitoring.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPorfolioMonitoring.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/monitoring/global",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<OperationalPorfolioMonitoring> getMonitoringGlobalByOperationalPortfolioUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalPortfolioId\" : 5,  \"compositionDealingInstruments\" : [ {    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,    \"dealingInstrumentType\" : \"FUND\",    \"errorCode\" : \"errorCode\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  }, {    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,    \"dealingInstrumentType\" : \"FUND\",    \"errorCode\" : \"errorCode\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  } ],  \"activationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"monitoringAmountData\" : {    \"totalAmount\" : 6.02745618307040320615897144307382404804229736328125,    \"unsettledAmount\" : 1.46581298050294517310021547018550336360931396484375,    \"settledAmount\" : 0.80082819046101150206595775671303272247314453125  },  \"currencyCode\" : \"currencyCode\",  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getNotificationById", nickname = "getNotificationByIdUsingGET", notes = "Retrieve a Notification portolio operational from its Id", response = Notification.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Notification.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/notifications/{notificationId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Notification> getNotificationByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Notification}", required = true) @PathVariable("notificationId") Long notificationId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"externalReference\" : \"externalReference\",  \"investmentLimits\" : [ {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  }, {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  } ],  \"mailNotification\" : true,  \"dataDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"operationalPortfolioId\" : 1,  \"notificationTypeCode\" : \"notificationTypeCode\",  \"distributorId\" : 0,  \"scope\" : \"MODEL_PORTFOLIO\",  \"name\" : \"name\",  \"notificationStatusCode\" : \"notificationStatusCode\",  \"id\" : 6,  \"notificationDate\" : \"2000-01-23T04:56:07.000+00:00\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOperationById", nickname = "getOperationByIdUsingGET", notes = "Find operation by ID", response = Operation.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Operation.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/operations/{operationId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Operation> getOperationByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Operation}", required = true) @PathVariable("operationId") String operationId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"contributions\" : [ {    \"associatedTransaction\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"clientId\" : \"clientId\",    \"comments\" : \"comments\",    \"operationWithholdingData\" : {      \"witholding\" : true,      \"withheldAmount\" : 2.027123023002321833274663731572218239307403564453125    },    \"operationContractData\" : {      \"contractExternalReference\" : \"contractExternalReference\",      \"contractAccount\" : {        \"assetAccountCode\" : \"assetAccountCode\",        \"currentAccountCode\" : \"currentAccountCode\"      }    },    \"operationItalianRetailMarketData\" : {      \"fiscalAccruedIncome\" : 1.46581298050294517310021547018550336360931396484375,      \"weightedAveragePrice\" : 2.3021358869347654518833223846741020679473876953125,      \"fiscalShares\" : 5.962133916683182377482808078639209270477294921875,      \"weightedAverageCost\" : 5.63737665663332876420099637471139430999755859375    },    \"externalReference\" : \"externalReference\",    \"operationDateData\" : {      \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"operationSpanishMarketData\" : {      \"valuationUntil2006\" : 3.61607674925191080461672754609026014804840087890625,      \"valuationUntil2005\" : 9.301444243932575517419536481611430644989013671875    },    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"operationSharesData\" : {      \"requestedShares\" : 7.061401241503109105224211816675961017608642578125    },    \"operationAmountData\" : {      \"requestedNetAmount\" : 6.02745618307040320615897144307382404804229736328125,      \"requestedGrossAmount\" : 0.80082819046101150206595775671303272247314453125    },    \"currencyCode\" : \"currencyCode\"  }, {    \"associatedTransaction\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"clientId\" : \"clientId\",    \"comments\" : \"comments\",    \"operationWithholdingData\" : {      \"witholding\" : true,      \"withheldAmount\" : 2.027123023002321833274663731572218239307403564453125    },    \"operationContractData\" : {      \"contractExternalReference\" : \"contractExternalReference\",      \"contractAccount\" : {        \"assetAccountCode\" : \"assetAccountCode\",        \"currentAccountCode\" : \"currentAccountCode\"      }    },    \"operationItalianRetailMarketData\" : {      \"fiscalAccruedIncome\" : 1.46581298050294517310021547018550336360931396484375,      \"weightedAveragePrice\" : 2.3021358869347654518833223846741020679473876953125,      \"fiscalShares\" : 5.962133916683182377482808078639209270477294921875,      \"weightedAverageCost\" : 5.63737665663332876420099637471139430999755859375    },    \"externalReference\" : \"externalReference\",    \"operationDateData\" : {      \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"operationSpanishMarketData\" : {      \"valuationUntil2006\" : 3.61607674925191080461672754609026014804840087890625,      \"valuationUntil2005\" : 9.301444243932575517419536481611430644989013671875    },    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"operationSharesData\" : {      \"requestedShares\" : 7.061401241503109105224211816675961017608642578125    },    \"operationAmountData\" : {      \"requestedNetAmount\" : 6.02745618307040320615897144307382404804229736328125,      \"requestedGrossAmount\" : 0.80082819046101150206595775671303272247314453125    },    \"currencyCode\" : \"currencyCode\"  } ],  \"distributorId\" : 7,  \"operationEtfData\" : {    \"brokerId\" : 1,    \"stockExchangeId\" : \"stockExchangeId\"  },  \"dealingInstrumentType\" : \"FUND\",  \"id\" : \"id\",  \"subdistributorId\" : 1,  \"withdrawal\" : {    \"associatedTransaction\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"clientId\" : \"clientId\",    \"comments\" : \"comments\",    \"operationWithholdingData\" : {      \"witholding\" : true,      \"withheldAmount\" : 2.027123023002321833274663731572218239307403564453125    },    \"operationContractData\" : {      \"contractExternalReference\" : \"contractExternalReference\",      \"contractAccount\" : {        \"assetAccountCode\" : \"assetAccountCode\",        \"currentAccountCode\" : \"currentAccountCode\"      }    },    \"operationItalianRetailMarketData\" : {      \"fiscalAccruedIncome\" : 1.46581298050294517310021547018550336360931396484375,      \"weightedAveragePrice\" : 2.3021358869347654518833223846741020679473876953125,      \"fiscalShares\" : 5.962133916683182377482808078639209270477294921875,      \"weightedAverageCost\" : 5.63737665663332876420099637471139430999755859375    },    \"externalReference\" : \"externalReference\",    \"operationDateData\" : {      \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"operationSpanishMarketData\" : {      \"valuationUntil2006\" : 3.61607674925191080461672754609026014804840087890625,      \"valuationUntil2005\" : 9.301444243932575517419536481611430644989013671875    },    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"operationSharesData\" : {      \"requestedShares\" : 7.061401241503109105224211816675961017608642578125    },    \"operationAmountData\" : {      \"requestedNetAmount\" : 6.02745618307040320615897144307382404804229736328125,      \"requestedGrossAmount\" : 0.80082819046101150206595775671303272247314453125    },    \"currencyCode\" : \"currencyCode\"  },  \"dealingFundHouseId\" : 4,  \"dealingInstrument\" : {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  },  \"operationSettingsData\" : {    \"errorCode\" : \"errorCode\",    \"showDetails\" : true,    \"statusCode\" : \"statusCode\"  },  \"operationTypeCode\" : \"operationTypeCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOperationalPortfolioAnnualPerformance", nickname = "getOperationalPortfolioAnnualPerformanceUsingPOST", notes = "Get a annual performance Operational portfolio", response = AnnualBenchmarkAndInstrumentPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Operation.", response = AnnualBenchmarkAndInstrumentPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/backtesting/{backtestingPortfolioId}/performances/annual",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<AnnualBenchmarkAndInstrumentPerformance> getOperationalPortfolioAnnualPerformanceUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "The Id of the {OperationalPortfolioBacktesting}", required = true) @PathVariable("backtestingPortfolioId") String backtestingPortfolioId, @ApiParam(value = "body") @Valid @RequestBody OperationalPortfolioPerformanceFilter operationalPortfolioPerformanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentPerformance\" : {    \"history1\" : 0.80082819046101150206595775671303272247314453125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"history2\" : 6.02745618307040320615897144307382404804229736328125,    \"history3\" : 1.46581298050294517310021547018550336360931396484375,    \"ytd\" : 2.3021358869347654518833223846741020679473876953125,    \"history4\" : 5.962133916683182377482808078639209270477294921875,    \"history5\" : 5.63737665663332876420099637471139430999755859375  },  \"benchmarkPerformance\" : {    \"history1\" : 0.80082819046101150206595775671303272247314453125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"history2\" : 6.02745618307040320615897144307382404804229736328125,    \"history3\" : 1.46581298050294517310021547018550336360931396484375,    \"ytd\" : 2.3021358869347654518833223846741020679473876953125,    \"history4\" : 5.962133916683182377482808078639209270477294921875,    \"history5\" : 5.63737665663332876420099637471139430999755859375  },  \"benchmarkId\" : \"benchmarkId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOperationalPortfolioBacktestingAsExcel", nickname = "getOperationalPortfolioBacktestingAsExcelUsingPOST", notes = "Get Operational portfolio backtesting Application form as a Excel file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/backtesting/{backtestingPortfolioId}/xls",
        produces = {"application/vnd.ms-excel"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> getOperationalPortfolioBacktestingAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "The Id of the {OperationalPortfolioBacktesting}", required = true) @PathVariable("backtestingPortfolioId") String backtestingPortfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody List<CompositionDealingInstrument> compositionDealingInstrument) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOperationalPortfolioBacktestingAsPdf", nickname = "getOperationalPortfolioBacktestingAsPdfUsingPOST", notes = "Get Operational portfolio backtesting Application form as a PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/backtesting/{backtestingPortfolioId}/pdf",
        produces = {"application/pdf"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> getOperationalPortfolioBacktestingAsPdfUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "The Id of the {OperationalPortfolioBacktesting}", required = true) @PathVariable("backtestingPortfolioId") String backtestingPortfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody List<CompositionDealingInstrument> compositionDealingInstrument) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOperationalPortfolioBacktestingCommonDateRange", nickname = "getOperationalPortfolioBacktestingCommonDateRangeUsingGET", notes = "Retrieve a Operational Portfolio Backtesting Price Date from compositions", response = OperationalPortfolioBacktestingPriceDate.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioBacktestingPriceDate.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/backtesting/commonDateRange",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<OperationalPortfolioBacktestingPriceDate> getOperationalPortfolioBacktestingCommonDateRangeUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody List<Long> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"lastPrice\" : \"2000-01-23T04:56:07.000+00:00\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOperationalPortfolioById", nickname = "getOperationalPortfolioByIdUsingGET", notes = "Retrieve a operational portfolio from its Id", response = OperationalPortfolio.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolio.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<OperationalPortfolio> getOperationalPortfolioByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"futureOperationalSuccessFee\" : {    \"endDate\" : \"endDate\",    \"amountFees\" : [ {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    }, {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    } ],    \"startDate\" : \"startDate\"  },  \"operationalRebalancingData\" : {    \"minimumAmountAdditionalContribution\" : \"minimumAmountAdditionalContribution\",    \"automatedProcess\" : true,    \"minimumAmountContribution\" : \"minimumAmountContribution\",    \"minimumAmountPermanence\" : \"minimumAmountPermanence\",    \"supervision\" : true  },  \"futureOperationalManagementFee\" : {    \"endDate\" : \"endDate\",    \"amountFees\" : [ {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    }, {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    } ],    \"startDate\" : \"startDate\"  },  \"operationalPortfolioBasicData\" : {    \"productId\" : 5,    \"numberContracts\" : 1,    \"distributorId\" : 6,    \"name\" : \"name\",    \"statusCode\" : \"statusCode\"  },  \"navValuationStrategy\" : \"CONFIRMATION\",  \"currentOperationalManagementFee\" : {    \"endDate\" : \"endDate\",    \"amountFees\" : [ {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    }, {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    } ],    \"startDate\" : \"startDate\"  },  \"operationalPortfolioDescriptionData\" : {    \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"descriptionBasic\" : [ {      \"monthlyAnalysis\" : \"monthlyAnalysis\",      \"generalDescription\" : \"generalDescription\",      \"languageCode\" : \"languageCode\"    }, {      \"monthlyAnalysis\" : \"monthlyAnalysis\",      \"generalDescription\" : \"generalDescription\",      \"languageCode\" : \"languageCode\"    } ]  },  \"benchmarkId\" : \"benchmarkId\",  \"currentOperationalSuccessFee\" : {    \"endDate\" : \"endDate\",    \"amountFees\" : [ {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    }, {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    } ],    \"startDate\" : \"startDate\"  },  \"operationalGroup\" : {    \"name\" : \"name\",    \"id\" : 0  },  \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : 1,  \"currencyCode\" : \"currencyCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOperationalPortfolioClientsAsPdf", nickname = "getOperationalPortfolioClientsAsPdfUsingPOST", notes = "Get Operational portfolio clients Application form as a PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/report/client/pdf",
        produces = {"application/pdf"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> getOperationalPortfolioClientsAsPdfUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body") @Valid @RequestBody OperationalPortfolioPdfFilter operationalPortfolioPdfFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOperationalPortfolioComposition", nickname = "getOperationalPortfolioCompositionUsingPOST", notes = "Retrieve a operational portfolio composition from its Id", response = OperationalPortfolioComposition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioComposition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/compositions/{operationalCompositionId}",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioComposition> getOperationalPortfolioCompositionUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "The Id of the {OperationalComposition}", required = true) @PathVariable("operationalCompositionId") Long operationalCompositionId, @ApiParam(value = "filter", required = true) @Valid @RequestBody OperationalCompositionFilter operationalCompositionFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalPortfolioId\" : 5,  \"compositionDealingInstruments\" : [ {    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,    \"dealingInstrumentType\" : \"FUND\",    \"errorCode\" : \"errorCode\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  }, {    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,    \"dealingInstrumentType\" : \"FUND\",    \"errorCode\" : \"errorCode\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  } ],  \"distributorId\" : 1,  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"totalWeight\" : 2.3021358869347654518833223846741020679473876953125,  \"historical\" : true,  \"id\" : 5,  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOperationalPortfolioCumulativePerformance", nickname = "getOperationalPortfolioCumulativePerformanceUsingPOST", notes = "Get a cumulative performance Operational portfolio", response = CumulativeBenchmarkAndInstrumentPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Operation.", response = CumulativeBenchmarkAndInstrumentPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/backtesting/{backtestingPortfolioId}/performances/cumulative",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<CumulativeBenchmarkAndInstrumentPerformance> getOperationalPortfolioCumulativePerformanceUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "The Id of the {OperationalPortfolioBacktesting}", required = true) @PathVariable("backtestingPortfolioId") String backtestingPortfolioId, @ApiParam(value = "body") @Valid @RequestBody OperationalPortfolioPerformanceFilter operationalPortfolioPerformanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentPerformance\" : {    \"oneMonth\" : 5.63737665663332876420099637471139430999755859375,    \"threeMonths\" : 9.301444243932575517419536481611430644989013671875,    \"oneYear\" : 2.3021358869347654518833223846741020679473876953125,    \"week\" : 7.3862819483858839220147274318151175975799560546875,    \"threeYears\" : 3.61607674925191080461672754609026014804840087890625,    \"fiveYears\" : 6.02745618307040320615897144307382404804229736328125,    \"twelveYears\" : 2.027123023002321833274663731572218239307403564453125,    \"sixMonths\" : 7.061401241503109105224211816675961017608642578125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"fromInception\" : 1.46581298050294517310021547018550336360931396484375,    \"mtd\" : 5.962133916683182377482808078639209270477294921875,    \"twoMonth\" : 4.1456080298839363962315474054776132106781005859375,    \"day\" : 0.80082819046101150206595775671303272247314453125  },  \"benchmarkPerformance\" : {    \"oneMonth\" : 5.63737665663332876420099637471139430999755859375,    \"threeMonths\" : 9.301444243932575517419536481611430644989013671875,    \"oneYear\" : 2.3021358869347654518833223846741020679473876953125,    \"week\" : 7.3862819483858839220147274318151175975799560546875,    \"threeYears\" : 3.61607674925191080461672754609026014804840087890625,    \"fiveYears\" : 6.02745618307040320615897144307382404804229736328125,    \"twelveYears\" : 2.027123023002321833274663731572218239307403564453125,    \"sixMonths\" : 7.061401241503109105224211816675961017608642578125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"fromInception\" : 1.46581298050294517310021547018550336360931396484375,    \"mtd\" : 5.962133916683182377482808078639209270477294921875,    \"twoMonth\" : 4.1456080298839363962315474054776132106781005859375,    \"day\" : 0.80082819046101150206595775671303272247314453125  },  \"benchmarkId\" : \"benchmarkId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOperationalPortfolioPretradeAsPdf", nickname = "getOperationalPortfolioPretradeAsPdfUsingPOST", notes = "Get Operational portfolio pretade Application form as a PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/report/pretrade/pdf",
        produces = {"application/pdf"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> getOperationalPortfolioPretradeAsPdfUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body") @Valid @RequestBody OperationalPortfolioPdfPretradeFilter operationalPortfolioPdfPretradeFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOperationalPortfolioRealAsPdf", nickname = "getOperationalPortfolioRealAsPdfUsingPOST", notes = "Get Operational portfolio Real Application form as a PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/report/real/pdf",
        produces = {"application/pdf"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> getOperationalPortfolioRealAsPdfUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body") @Valid @RequestBody OperationalPortfolioPdfFilter operationalPortfolioPdfFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOperationalPortfolioStatistic", nickname = "getOperationalPortfolioStatisticUsingPOST", notes = "Get Operational Portfolio statistic", response = Statistic.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Operation.", response = Statistic.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/backtesting/{backtestingPortfolioId}/statistic",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<Statistic> getOperationalPortfolioStatisticUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "The Id of the {OperationalPortfolioBacktesting}", required = true) @PathVariable("backtestingPortfolioId") String backtestingPortfolioId, @ApiParam(value = "body") @Valid @RequestBody OperationalPortfolioStatisticFilter operationalPortfolioStatisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkId\" : \"benchmarkId\",  \"relative\" : {    \"r2\" : 1.489415909854170383397331534069962799549102783203125,    \"trackingError\" : 6.8468526983526398765889098285697400569915771484375,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"correlation\" : 7.3862819483858839220147274318151175975799560546875,    \"infoRatio\" : 1.231513536777255612975068288506008684635162353515625,    \"actPremium\" : 3.61607674925191080461672754609026014804840087890625,    \"alpha\" : 2.027123023002321833274663731572218239307403564453125,    \"treynorRatio\" : 7.4577447736837658709418974467553198337554931640625,    \"jesenAlpha\" : 1.024645700144157789424070870154537260532379150390625,    \"beta\" : 4.1456080298839363962315474054776132106781005859375  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOperationalPortfoliodHistoricalCompositionById", nickname = "getOperationalPortfoliodHistoricalCompositionByIdUsingGET", notes = "Retrieve a operational portfolio composition historical from its Id", response = OperationalPortfolioComposition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioComposition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/compositions/historical/{operationalCompositionId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<OperationalPortfolioComposition> getOperationalPortfoliodHistoricalCompositionByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "The Id of the {OperationalComposition}", required = true) @PathVariable("operationalCompositionId") Long operationalCompositionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalPortfolioId\" : 5,  \"compositionDealingInstruments\" : [ {    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,    \"dealingInstrumentType\" : \"FUND\",    \"errorCode\" : \"errorCode\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  }, {    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,    \"dealingInstrumentType\" : \"FUND\",    \"errorCode\" : \"errorCode\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  } ],  \"distributorId\" : 1,  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"totalWeight\" : 2.3021358869347654518833223846741020679473876953125,  \"historical\" : true,  \"id\" : 5,  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getOrderDealingSettings", nickname = "getOrderDealingSettingsUsingPOST", notes = "get dealing settings. It should be known before add a new order", response = OrderDealingSettings.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OrderDealingSettings.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/orders/dealingSettings",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OrderDealingSettings> getOrderDealingSettingsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "body", required = true) @Valid @RequestBody OrderFilter orderFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"feeChargeOptionAvailable\" : true,  \"estimatedSubscriptionCutoffTime\" : \"estimatedSubscriptionCutoffTime\",  \"omnibusAvailable\" : true,  \"estimatedRedemptionCutoffTime\" : \"estimatedRedemptionCutoffTime\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getPaymentInstructionsAsPdf", nickname = "getPaymentInstructionsAsPdfUsingPOST", notes = "Return the Payment Instructions for this {Distributor} (as a PDF file)", response = Resource.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Resource.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/paymentInstructions/pdf",
        produces = {"application/pdf"},
        method = RequestMethod.POST)
    default ResponseEntity<Resource> getPaymentInstructionsAsPdfUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getPortfolioFactsheet", nickname = "getPortfolioFactsheetUsingPOST", notes = "Get factsheet portfolio a PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/factsheet/pdf",
        produces = {"application/pdf"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> getPortfolioFactsheetUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.", required = true) @Valid @RequestBody MarketPerformanceFilter marketPerformanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getProductById", nickname = "getProductByIdUsingGET", notes = "Find product by ID", response = Product.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Product.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/products/{productId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Product> getProductByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Product}", required = true) @PathVariable("productId") Long productId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"portfolioExternalData\" : true,  \"apportionByContract\" : true,  \"distributorId\" : 0,  \"name\" : \"name\",  \"accountCodeRequired\" : true,  \"id\" : 6,  \"accountCodeAutoGenerated\" : true}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getRiskControlAlarmById", nickname = "getRiskControlAlarmByIdUsingGET", notes = "Retrieve a RiskControlAlarm portolio operational from its Id", response = RiskControlAlarm.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = RiskControlAlarm.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/riskControlAlarms/{riskControlAlarmId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<RiskControlAlarm> getRiskControlAlarmByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {RiskControlAlarm}", required = true) @PathVariable("riskControlAlarmId") Long riskControlAlarmId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalStatus\" : \"ACTIVED\",  \"investmentLimits\" : [ {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  }, {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  } ],  \"mailNotification\" : true,  \"operationalPortfolioId\" : 5,  \"distributorId\" : 0,  \"scope\" : \"MODEL_PORTFOLIO\",  \"name\" : \"name\",  \"language\" : \"SPANISH\",  \"id\" : 6,  \"mailNotifications\" : [ {    \"investmentLimitRiskLevelCodes\" : [ \"investmentLimitRiskLevelCodes\", \"investmentLimitRiskLevelCodes\" ],    \"id\" : 1,    \"email\" : \"email\"  }, {    \"investmentLimitRiskLevelCodes\" : [ \"investmentLimitRiskLevelCodes\", \"investmentLimitRiskLevelCodes\" ],    \"id\" : 1,    \"email\" : \"email\"  } ],  \"typeCode\" : \"typeCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getRiskScoreScorecardFeaturesByOperationalPortfolio", nickname = "getRiskScoreScorecardFeaturesByOperationalPortfolioUsingPOST", notes = "Returns the risk score by Feature for a portfolio composition", response = RiskScoreScorecardFeature.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = RiskScoreScorecardFeature.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/{operationalPortfolioId}/breakdowns/scorecards/{scorecardId}/riskScore",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<RiskScoreScorecardFeature> getRiskScoreScorecardFeaturesByOperationalPortfolioUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "The Id of the {Scorecard}", required = true) @PathVariable("scorecardId") Long scorecardId, @ApiParam(value = "body") @Valid @RequestBody RiskScoreScorecardFeatureFilter riskScoreScorecardFeatureFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalPortfolioId\" : 6,  \"riskScore\" : 1,  \"featureId\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSavingPlanbyId", nickname = "getSavingPlanbyIdUsingGET", notes = "Find {SavingPlan} by ID", response = SavingPlan.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SavingPlan.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/savingPlans/{savingPlanId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<SavingPlan> getSavingPlanbyIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "The Id of the {SavingPlan}", required = true) @PathVariable("savingPlanId") Long savingPlanId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"assetAccountCode\" : \"assetAccountCode\",  \"amount\" : 0.80082819046101150206595775671303272247314453125,  \"currentAccountCode\" : \"currentAccountCode\",  \"fee\" : 4.1456080298839363962315474054776132106781005859375,  \"firstTransactionAmount\" : 7.3862819483858839220147274318151175975799560546875,  \"basicData\" : {    \"externalReference\" : \"externalReference\",    \"distributorId\" : 6,    \"subdistributorId\" : 1,    \"transactionTypeCode\" : \"transactionTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"statusCode\" : \"statusCode\"  },  \"firstTransactionFeePercentage\" : 1.231513536777255612975068288506008684635162353515625,  \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"associatedContract\" : {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  },  \"periodCode\" : \"periodCode\",  \"shares\" : 1.173074250955943309548956676735542714595794677734375,  \"dealingInstrumentsBreakdown\" : [ {    \"shares\" : 7.061401241503109105224211816675961017608642578125,    \"amount\" : 5.63737665663332876420099637471139430999755859375,    \"dealingInstrumentType\" : \"FUND\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"dealingInstrumentId\" : 2  }, {    \"shares\" : 7.061401241503109105224211816675961017608642578125,    \"amount\" : 5.63737665663332876420099637471139430999755859375,    \"dealingInstrumentType\" : \"FUND\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"dealingInstrumentId\" : 2  } ],  \"collectiveInvestmentSchemeId\" : 5,  \"reductionPercentage\" : 7.4577447736837658709418974467553198337554931640625,  \"secondTransactionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : 1,  \"numberOfQuotas\" : 1,  \"enlargenmentData\" : {    \"amount\" : 9.301444243932575517419536481611430644989013671875,    \"quotas\" : 3  },  \"numberOfQuotasFirstTransaction\" : 6,  \"expenses\" : 2.027123023002321833274663731572218239307403564453125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getScorecardById", nickname = "getScorecardByIdUsingGET", notes = "Retrieve a Scorecard from its Id", response = Scorecard.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Scorecard.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/scorecards/{scorecardId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Scorecard> getScorecardByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Scorecard}", required = true) @PathVariable("scorecardId") Long scorecardId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"distributorId\" : 0,  \"name\" : \"name\",  \"assigned\" : true,  \"id\" : \"id\",  \"featureDetails\" : [ {    \"featureTypeCode\" : \"featureTypeCode\",    \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"  }, {    \"featureTypeCode\" : \"featureTypeCode\",    \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getScorecardByOperationalPortfolio", nickname = "getScorecardByOperationalPortfolioUsingGET", notes = "Retrieve scorecard assigned Operational Portfolio", response = Scorecard.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Scorecard.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/breakdowns/scorecards",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Scorecard> getScorecardByOperationalPortfolioUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"distributorId\" : 0,  \"name\" : \"name\",  \"assigned\" : true,  \"id\" : \"id\",  \"featureDetails\" : [ {    \"featureTypeCode\" : \"featureTypeCode\",    \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"  }, {    \"featureTypeCode\" : \"featureTypeCode\",    \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSettlementByIdAsPdf", nickname = "getSettlementByIdAsPdfUsingGET", notes = "Returns settlement details as PDF", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/settlements/{settlementId}/pdf",
        produces = {"application/pdf"},
        method = RequestMethod.GET)
    default ResponseEntity<List<byte[]>> getSettlementByIdAsPdfUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Settlement}", required = true) @PathVariable("settlementId") String settlementId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSettlementById", nickname = "getSettlementByIdUsingGET", notes = "Find Settlement details", response = Settlement.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Settlement.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/settlements/{settlementId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Settlement> getSettlementByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Settlement}", required = true) @PathVariable("settlementId") String settlementId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"settlementDateData\" : {    \"settledDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"paymentDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"transactionOrderedDate\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"settlementCapitalGainedData\" : {    \"capitalGained\" : 6.8468526983526398765889098285697400569915771484375,    \"capitalGainedInLocalCurrency\" : 7.4577447736837658709418974467553198337554931640625  },  \"settlementEtfData\" : {    \"brokerId\" : 1,    \"stockExchangeId\" : \"stockExchangeId\"  },  \"settlementSharesData\" : {    \"awardedShares\" : 6.683562403749608193948006373830139636993408203125,    \"requestedShares\" : 8.7620420127490010742121739895083010196685791015625  },  \"settlementBasicData\" : {    \"productId\" : 1,    \"depositaryId\" : 4,    \"distributorId\" : 7,    \"paymentCurrencyCode\" : \"paymentCurrencyCode\",    \"settlementTransactionTypeCode\" : \"settlementTransactionTypeCode\",    \"paymentSequence\" : 1,    \"dealingInstrumentType\" : \"FUND\",    \"settlementStatusCode\" : \"settlementStatusCode\",    \"contractExternalReference\" : \"contractExternalReference\",    \"localCurrencyCode\" : \"localCurrencyCode\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"statusChangePermitted\" : true,    \"exchangeRateApplied\" : 1.231513536777255612975068288506008684635162353515625,    \"externalReference\" : \"externalReference\",    \"transactionExternalReference\" : \"transactionExternalReference\",    \"contractId\" : 3,    \"dealingFundHouseId\" : 2,    \"currencyCode\" : \"currencyCode\"  },  \"price\" : {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  },  \"settlementAmountData\" : {    \"awardedGrossAmount\" : 5.962133916683182377482808078639209270477294921875,    \"requestedNetAmount\" : 7.061401241503109105224211816675961017608642578125,    \"requestedGrossAmount\" : 2.3021358869347654518833223846741020679473876953125,    \"awardedNetAmount\" : 5.63737665663332876420099637471139430999755859375,    \"settledAmount\" : 9.301444243932575517419536481611430644989013671875  },  \"id\" : \"id\",  \"settlementsWithholdingData\" : {    \"withheldAmount\" : 9.0183481860707832566959041287191212177276611328125  },  \"settlementSettingsData\" : {    \"grouped\" : true,    \"groupedTransaction\" : true,    \"numberGroupedTransactions\" : 9,    \"groupedTransactionsConfirmed\" : true  },  \"settlementFeeData\" : {    \"feePerDealingInstrument\" : 9.965781217890562260208753286860883235931396484375,    \"amount\" : 4.9652184929849543237878606305457651615142822265625,    \"appliedDealingFundHouseFee\" : 5.02500479152029466689555192715488374233245849609375  },  \"transaction\" : {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSpanishTransferByIdAsPdf", nickname = "getSpanishTransferByIdAsPdfUsingGET", notes = "Gets a {SpanishTransfer} by Id", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/{spanishTransferId}/pdf",
        produces = {"application/pdf"},
        method = RequestMethod.GET)
    default ResponseEntity<List<byte[]>> getSpanishTransferByIdAsPdfUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {SpanishTransfer}", required = true) @PathVariable("spanishTransferId") String spanishTransferId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSpanishTransferById", nickname = "getSpanishTransferByIdUsingGET", notes = "Gets a {SpanishTransfer} by Id", response = SpanishTransfer.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SpanishTransfer.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/{spanishTransferId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<SpanishTransfer> getSpanishTransferByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {SpanishTransfer}", required = true) @PathVariable("spanishTransferId") String spanishTransferId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"exchangeRateApplied\" : 4.1456080298839363962315474054776132106781005859375,  \"transactionExternalReference\" : \"transactionExternalReference\",  \"processedAsSwitch\" : true,  \"sourceItem\" : {    \"marketer\" : {      \"entityCnmvCode\" : \"entityCnmvCode\",      \"entityCnmvNif\" : \"entityCnmvNif\",      \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",      \"dealingInstrumentName\" : \"dealingInstrumentName\",      \"currentAccountCode\" : \"currentAccountCode\",      \"entityName\" : \"entityName\",      \"dealingInstrumentNif\" : \"dealingInstrumentNif\"    },    \"etfData\" : {      \"brokerId\" : 2,      \"stockExchangeId\" : \"stockExchangeId\"    },    \"feeData\" : {      \"secondSpanishTransferFeeAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"firstSpanishTransferFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"firstSpanishTransferFeePercentage\" : 9.301444243932575517419536481611430644989013671875,      \"secondSpanishTransferFeePercentage\" : 2.027123023002321833274663731572218239307403564453125    },    \"omnibus\" : true,    \"distributorId\" : 5,    \"dealingInstrumentExternalCodeKeyValues\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"dealingInstrumentType\" : \"FUND\",    \"contractExternalReference\" : \"contractExternalReference\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"currencyCode\" : \"currencyCode\"  },  \"substatusCode\" : \"substatusCode\",  \"basicData\" : {    \"externalReference\" : \"externalReference\",    \"shares\" : 1.46581298050294517310021547018550336360931396484375,    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"requestType\" : \"OUTSIDE\",    \"distributorId\" : 6,    \"transferType\" : \"TOTAL\",    \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"transferClass\" : \"ENTRY\",    \"subdistributorId\" : 5,    \"statusCode\" : \"statusCode\"  },  \"principals\" : [ {    \"firstName\" : \"firstName\",    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"taxpayerId\" : \"taxpayerId\"  }, {    \"firstName\" : \"firstName\",    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"taxpayerId\" : \"taxpayerId\"  } ],  \"dateData\" : {    \"sourceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"destinationDate\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"id\" : \"id\",  \"destinationItem\" : {    \"marketer\" : {      \"entityCnmvCode\" : \"entityCnmvCode\",      \"entityCnmvNif\" : \"entityCnmvNif\",      \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",      \"dealingInstrumentName\" : \"dealingInstrumentName\",      \"currentAccountCode\" : \"currentAccountCode\",      \"entityName\" : \"entityName\",      \"dealingInstrumentNif\" : \"dealingInstrumentNif\"    },    \"etfData\" : {      \"brokerId\" : 2,      \"stockExchangeId\" : \"stockExchangeId\"    },    \"feeData\" : {      \"secondSpanishTransferFeeAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"firstSpanishTransferFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"firstSpanishTransferFeePercentage\" : 9.301444243932575517419536481611430644989013671875,      \"secondSpanishTransferFeePercentage\" : 2.027123023002321833274663731572218239307403564453125    },    \"omnibus\" : true,    \"distributorId\" : 5,    \"dealingInstrumentExternalCodeKeyValues\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"dealingInstrumentType\" : \"FUND\",    \"contractExternalReference\" : \"contractExternalReference\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"currencyCode\" : \"currencyCode\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSpanishTransferEvolution", nickname = "getSpanishTransferEvolutionUsingGET", notes = "Returns a {SpanishTransferEvolution} object describing the evolution of a {SpanishTransfer}.", response = SpanishTransferEvolution.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SpanishTransferEvolution.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/{spanishTransferId}/evolution",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<SpanishTransferEvolution> getSpanishTransferEvolutionUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {SpanishTransfer}", required = true) @PathVariable("spanishTransferId") String spanishTransferId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"externalReference\" : \"externalReference\",  \"associatedSpanishTransferId\" : \"associatedSpanishTransferId\",  \"spanishTransferId\" : \"spanishTransferId\",  \"subscriptionType\" : \"AMOUNT\",  \"distributorId\" : 0,  \"transferType\" : \"TOTAL\",  \"transferClass\" : \"ENTRY\",  \"subdistributorId\" : 6,  \"actions\" : [ \"actions\", \"actions\" ],  \"operationsStatusCode\" : \"operationsStatusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getStockTransferApplicationFormAsPdf", nickname = "getStockTransferApplicationFormAsPdfUsingPOST", notes = "Get stockTransfers Application Form as a PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/stockTransfers/{stockTransferId}/applicationForm/pdf",
        produces = {"application/pdf"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> getStockTransferApplicationFormAsPdfUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {StockTransfer}", required = true) @PathVariable("stockTransferId") String stockTransferId, @ApiParam(value = "body") @Valid @RequestBody ApplicationFormFilter applicationFormFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getStockTransferById", nickname = "getStockTransferByIdUsingGET", notes = "Find Stock Transfer by ID", response = StockTransfer.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = StockTransfer.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/stockTransfers/{stockTransferId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<StockTransfer> getStockTransferByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {StockTransfer}", required = true) @PathVariable("stockTransferId") String stockTransferId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"intermediaryBic\" : \"intermediaryBic\",  \"stockTransferSharesData\" : {    \"sharesAfterDistribution\" : 2.027123023002321833274663731572218239307403564453125,    \"requestedSharesAsWords\" : \"requestedSharesAsWords\",    \"requestedShares\" : 3.61607674925191080461672754609026014804840087890625,    \"sharesBeforeDistribution\" : 4.1456080298839363962315474054776132106781005859375  },  \"stockTransferItalianRetailMarketData\" : {    \"weightedAveragePrice\" : 7.061401241503109105224211816675961017608642578125,    \"withheldAmount\" : 9.301444243932575517419536481611430644989013671875,    \"weightedAverageCost\" : 2.3021358869347654518833223846741020679473876953125  },  \"senderBic\" : \"senderBic\",  \"swiftText\" : \"swiftText\",  \"stockTransferBasicData\" : {    \"productId\" : 5,    \"stockTransferStatusCode\" : \"stockTransferStatusCode\",    \"distributorId\" : 1,    \"stockTransferTypeCode\" : \"stockTransferTypeCode\",    \"dealingInstrumentType\" : \"FUND\",    \"categoryCode\" : \"categoryCode\",    \"contractExternalReference\" : \"contractExternalReference\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"externalReference\" : \"externalReference\",    \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"additionalReferenceSwift\" : \"additionalReferenceSwift\",    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"additionalReference\" : \"additionalReference\",    \"subdistributorId\" : 5,    \"dealingFundHouseId\" : 6,    \"followupDate\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"stockTransferSettingsData\" : {    \"applicationFormAccessible\" : true,    \"errorCode\" : \"errorCode\",    \"platformAccount\" : \"platformAccount\",    \"signedApplicationFormAccessible\" : true,    \"platformCode\" : \"platformCode\",    \"taxTransactionHistory\" : true  },  \"historyAccessible\" : true,  \"id\" : \"id\",  \"currencyCode\" : \"currencyCode\",  \"stockTransferTransactionData\" : {    \"externalReference\" : \"externalReference\",    \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"transaction\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  },  \"internalStockTransferData\" : {    \"associatedProductId\" : 0,    \"associatedContractExternalReference\" : \"associatedContractExternalReference\",    \"associatedTransactionExternalReference\" : \"associatedTransactionExternalReference\"  },  \"externalStockTransferData\" : {    \"address\" : \"address\",    \"externalAccountCode\" : \"externalAccountCode\",    \"document\" : \"document\",    \"externalCurrentAccountCode\" : \"externalCurrentAccountCode\",    \"name\" : \"name\",    \"externalAccountName\" : \"externalAccountName\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getStockTransferTaxTransactions", nickname = "getStockTransferTaxTransactionsUsingGET", notes = "Returns an object with the  {TaxTransaction}s associated to a {StockTrnasfer}", response = StockTransferTaxTransactions.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = StockTransferTaxTransactions.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/stockTransfers/{stockTransferId}/breakdowns/taxTransactions",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<StockTransferTaxTransactions> getStockTransferTaxTransactionsUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {StockTransfer}", required = true) @PathVariable("stockTransferId") String stockTransferId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"feeDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"taxTransactions\" : [ {    \"exchangeRateApplied\" : 3.61607674925191080461672754609026014804840087890625,    \"shares\" : 7.3862819483858839220147274318151175975799560546875,    \"amount\" : 9.301444243932575517419536481611430644989013671875,    \"associatedTransaction\" : {      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"orderNumber\" : 4.1456080298839363962315474054776132106781005859375,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"fee\" : 2.027123023002321833274663731572218239307403564453125,    \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"spanishMarketData\" : {      \"valuationUntil2006\" : 1.024645700144157789424070870154537260532379150390625,      \"valuationUntil2005\" : 1.231513536777255612975068288506008684635162353515625    }  }, {    \"exchangeRateApplied\" : 3.61607674925191080461672754609026014804840087890625,    \"shares\" : 7.3862819483858839220147274318151175975799560546875,    \"amount\" : 9.301444243932575517419536481611430644989013671875,    \"associatedTransaction\" : {      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"orderNumber\" : 4.1456080298839363962315474054776132106781005859375,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"fee\" : 2.027123023002321833274663731572218239307403564453125,    \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"spanishMarketData\" : {      \"valuationUntil2006\" : 1.024645700144157789424070870154537260532379150390625,      \"valuationUntil2005\" : 1.231513536777255612975068288506008684635162353515625    }  } ],  \"currencyCode\" : \"currencyCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSubDistributorById", nickname = "getSubDistributorByIdUsingGET", notes = "Find Subdistributor by ID", response = Subdistributor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Subdistributor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Subdistributor> getSubDistributorByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"distributorId\" : 0,  \"name\" : \"name\",  \"id\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTheoreticalPortfolioAnnualPerformance", nickname = "getTheoreticalPortfolioAnnualPerformanceUsingPOST", notes = "Get a annual performance Portfolio", response = AnnualBenchmarkAndInstrumentPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Operation.", response = AnnualBenchmarkAndInstrumentPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/performances/annual",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<AnnualBenchmarkAndInstrumentPerformance> getTheoreticalPortfolioAnnualPerformanceUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.") @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentPerformance\" : {    \"history1\" : 0.80082819046101150206595775671303272247314453125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"history2\" : 6.02745618307040320615897144307382404804229736328125,    \"history3\" : 1.46581298050294517310021547018550336360931396484375,    \"ytd\" : 2.3021358869347654518833223846741020679473876953125,    \"history4\" : 5.962133916683182377482808078639209270477294921875,    \"history5\" : 5.63737665663332876420099637471139430999755859375  },  \"benchmarkPerformance\" : {    \"history1\" : 0.80082819046101150206595775671303272247314453125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"history2\" : 6.02745618307040320615897144307382404804229736328125,    \"history3\" : 1.46581298050294517310021547018550336360931396484375,    \"ytd\" : 2.3021358869347654518833223846741020679473876953125,    \"history4\" : 5.962133916683182377482808078639209270477294921875,    \"history5\" : 5.63737665663332876420099637471139430999755859375  },  \"benchmarkId\" : \"benchmarkId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTheoreticalPortfolioBreakdownsComposition", nickname = "getTheoreticalPortfolioBreakdownsCompositionUsingPOST", notes = "Retrieve a portfolio composition breakdown monthly", response = Composition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Composition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdownsComposition",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<Composition> getTheoreticalPortfolioBreakdownsCompositionUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "Date filter to composition breakdown", required = true) @Valid @RequestBody CompositionDateFilter compositionDateFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\",  \"resources\" : [ {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTheoreticalPortfolioById", nickname = "getTheoreticalPortfolioByIdUsingGET", notes = "Retrieve a portfolio from its Id", response = Portfolio.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Portfolio.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Portfolio> getTheoreticalPortfolioByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : [ {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"fees\" : {    \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,    \"total\" : 2.027123023002321833274663731572218239307403564453125,    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performance\" : 3.61607674925191080461672754609026014804840087890625,    \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,    \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,    \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,    \"distribution\" : 5.962133916683182377482808078639209270477294921875,    \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,    \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,    \"others\" : 9.301444243932575517419536481611430644989013671875  },  \"typeShare\" : \"ACUMULATION\",  \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",  \"investmentObjective\" : \"investmentObjective\",  \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"lastCompositionId\" : 6,  \"lastBenchmarkCompositionId\" : 0,  \"emails\" : [ \"emails\", \"emails\" ],  \"portfolioType\" : \"SIMULATED\",  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"rebalancingTypeCode\" : \"rebalancingTypeCode\",  \"name\" : \"name\",  \"id\" : \"id\",  \"currencyCode\" : \"currencyCode\",  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTheoreticalPortfolioCalculatorPerformance", nickname = "getTheoreticalPortfolioCalculatorPerformanceUsingPOST", notes = "Get a calculator performance Portfolio", response = CalculatorCummulativeAndAnnualizedPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Operation.", response = CalculatorCummulativeAndAnnualizedPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/performances/calculator",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<CalculatorCummulativeAndAnnualizedPerformance> getTheoreticalPortfolioCalculatorPerformanceUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.") @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"annualizedPerformance\" : {    \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,    \"oneYear\" : 1.46581298050294517310021547018550336360931396484375,    \"fromInception\" : 6.02745618307040320615897144307382404804229736328125,    \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,    \"ytd\" : 7.061401241503109105224211816675961017608642578125,    \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,    \"sixMonths\" : 5.962133916683182377482808078639209270477294921875  },  \"cummulativePerformance\" : {    \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,    \"oneYear\" : 1.46581298050294517310021547018550336360931396484375,    \"fromInception\" : 6.02745618307040320615897144307382404804229736328125,    \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,    \"ytd\" : 7.061401241503109105224211816675961017608642578125,    \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,    \"sixMonths\" : 5.962133916683182377482808078639209270477294921875  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTheoreticalPortfolioCaptureRatio", nickname = "getTheoreticalPortfolioCaptureRatioUsingPOST", notes = "Get statistic capture ratios of a Portfolio", response = CaptureRatio.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = CaptureRatio.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/statistic/captureRatio",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<CaptureRatio> getTheoreticalPortfolioCaptureRatioUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.", required = true) @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"downCaptureRatio\" : 0.80082819046101150206595775671303272247314453125,  \"totalPerformance\" : 5.962133916683182377482808078639209270477294921875,  \"upPerformance\" : 7.061401241503109105224211816675961017608642578125,  \"upCaptureRatio\" : 5.63737665663332876420099637471139430999755859375,  \"downMonth\" : 6.02745618307040320615897144307382404804229736328125,  \"downPerformance\" : 1.46581298050294517310021547018550336360931396484375,  \"upMonth\" : 2.3021358869347654518833223846741020679473876953125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTheoreticalPortfolioCompositionById", nickname = "getTheoreticalPortfolioCompositionByIdUsingGET", notes = "Retrieve a portfolio from its Id", response = Composition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Composition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/compositions/{compositionId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Composition> getTheoreticalPortfolioCompositionByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "Composition Id", required = true) @PathVariable("compositionId") Long compositionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\",  \"resources\" : [ {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTheoreticalPortfolioCompositionReal", nickname = "getTheoreticalPortfolioCompositionRealUsingPOST", notes = "Retrieve a portfolio composition real", response = Composition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Composition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/composition/real",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<Composition> getTheoreticalPortfolioCompositionRealUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "Date filter to composition real", required = true) @Valid @RequestBody CompositionDateFilter compositionDateFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\",  \"resources\" : [ {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTheoreticalPortfolioCumulativePerformance", nickname = "getTheoreticalPortfolioCumulativePerformanceUsingPOST", notes = "Get a cumulative performance Portfolio", response = CumulativeBenchmarkAndInstrumentPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Operation.", response = CumulativeBenchmarkAndInstrumentPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/performances/cumulative",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<CumulativeBenchmarkAndInstrumentPerformance> getTheoreticalPortfolioCumulativePerformanceUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.") @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentPerformance\" : {    \"oneMonth\" : 5.63737665663332876420099637471139430999755859375,    \"threeMonths\" : 9.301444243932575517419536481611430644989013671875,    \"oneYear\" : 2.3021358869347654518833223846741020679473876953125,    \"week\" : 7.3862819483858839220147274318151175975799560546875,    \"threeYears\" : 3.61607674925191080461672754609026014804840087890625,    \"fiveYears\" : 6.02745618307040320615897144307382404804229736328125,    \"twelveYears\" : 2.027123023002321833274663731572218239307403564453125,    \"sixMonths\" : 7.061401241503109105224211816675961017608642578125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"fromInception\" : 1.46581298050294517310021547018550336360931396484375,    \"mtd\" : 5.962133916683182377482808078639209270477294921875,    \"twoMonth\" : 4.1456080298839363962315474054776132106781005859375,    \"day\" : 0.80082819046101150206595775671303272247314453125  },  \"benchmarkPerformance\" : {    \"oneMonth\" : 5.63737665663332876420099637471139430999755859375,    \"threeMonths\" : 9.301444243932575517419536481611430644989013671875,    \"oneYear\" : 2.3021358869347654518833223846741020679473876953125,    \"week\" : 7.3862819483858839220147274318151175975799560546875,    \"threeYears\" : 3.61607674925191080461672754609026014804840087890625,    \"fiveYears\" : 6.02745618307040320615897144307382404804229736328125,    \"twelveYears\" : 2.027123023002321833274663731572218239307403564453125,    \"sixMonths\" : 7.061401241503109105224211816675961017608642578125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"fromInception\" : 1.46581298050294517310021547018550336360931396484375,    \"mtd\" : 5.962133916683182377482808078639209270477294921875,    \"twoMonth\" : 4.1456080298839363962315474054776132106781005859375,    \"day\" : 0.80082819046101150206595775671303272247314453125  },  \"benchmarkId\" : \"benchmarkId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTheoreticalPortfolioFees", nickname = "getTheoreticalPortfolioFeesUsingPOST", notes = "Get all Fees", response = Fees.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Fees.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/fees",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<Fees> getTheoreticalPortfolioFeesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "body") @Valid @RequestBody FeesFilter feesFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,  \"total\" : 2.027123023002321833274663731572218239307403564453125,  \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"performance\" : 3.61607674925191080461672754609026014804840087890625,  \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,  \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,  \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,  \"distribution\" : 5.962133916683182377482808078639209270477294921875,  \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,  \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,  \"others\" : 9.301444243932575517419536481611430644989013671875}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTheoreticalPortfolioRiskClassification", nickname = "getTheoreticalPortfolioRiskClassificationUsingPOST", notes = "Get risk classification information of a Portfolio", response = RiskClassification.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Operation.", response = RiskClassification.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/statistic/riskClassification",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<RiskClassification> getTheoreticalPortfolioRiskClassificationUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.", required = true) @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"benchmarkVolatility\" : 6.02745618307040320615897144307382404804229736328125,  \"instrumentPerformance\" : 1.46581298050294517310021547018550336360931396484375,  \"instrumentVolatility\" : 5.962133916683182377482808078639209270477294921875,  \"benchmarkPerformance\" : 0.80082819046101150206595775671303272247314453125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTheoreticalPortfolioStatistic", nickname = "getTheoreticalPortfolioStatisticUsingPOST", notes = "Get Portfolio statistic.", response = Statistic.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Operation.", response = Statistic.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/statistic",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<Statistic> getTheoreticalPortfolioStatisticUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.", required = true) @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkId\" : \"benchmarkId\",  \"relative\" : {    \"r2\" : 1.489415909854170383397331534069962799549102783203125,    \"trackingError\" : 6.8468526983526398765889098285697400569915771484375,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"correlation\" : 7.3862819483858839220147274318151175975799560546875,    \"infoRatio\" : 1.231513536777255612975068288506008684635162353515625,    \"actPremium\" : 3.61607674925191080461672754609026014804840087890625,    \"alpha\" : 2.027123023002321833274663731572218239307403564453125,    \"treynorRatio\" : 7.4577447736837658709418974467553198337554931640625,    \"jesenAlpha\" : 1.024645700144157789424070870154537260532379150390625,    \"beta\" : 4.1456080298839363962315474054776132106781005859375  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTransactionByIdAsPdf", nickname = "getTransactionByIdAsPdfUsingGET", notes = "Get order details as PDF", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/transactions/{transactionId}/pdf",
        produces = {"application/pdf"},
        method = RequestMethod.GET)
    default ResponseEntity<List<byte[]>> getTransactionByIdAsPdfUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Transaction}", required = true) @PathVariable("transactionId") Long transactionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTransactionById", nickname = "getTransactionByIdUsingGET", notes = "Find Transaction by ID", response = Transaction.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Transaction.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/transactions/{transactionId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Transaction> getTransactionByIdUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Transaction}", required = true) @PathVariable("transactionId") Long transactionId) {
        Transaction transaction = new Transaction();

        Random random = new SecureRandom();

        OffsetDateTime priceDate = OffsetDateTime.now(ZoneOffset.UTC);
        double priceValue = random.nextDouble();
        double exchangeRateApplied = random.nextDouble();
        double transactionSharesDataAwardedShare = random.nextDouble();
        double transactionAmountDataAwardedGrossAmount = random.nextDouble();
        double transactionAmountDataAwardedNetAmount = random.nextDouble();
        double transactionAmountDataSettledAmount = random.nextDouble();
        double transactionItalianMarketDataWeightedAveragePrice = random.nextDouble();
        double transactionItalianMarketDataWeightedAverageCost = random.nextDouble();
        double transactionCapitalGainedDataCapitalGained = random.nextDouble();
        double transactionItalianMarketDataFiscalAccruedIncome = random.nextDouble();
        double transactionFeeDataAppliedDistributorFee = random.nextDouble();
        double transactionFeeDataAppliedDealingFundHouseFee = random.nextDouble();
        double transactionFeeDataExpensesAppliedByAFB = random.nextDouble();

        Price price = new Price();
        price.setDate(priceDate);
        price.setValue(priceValue);

        transaction.setPrice(price);
        transaction.setExchangeRateApplied(exchangeRateApplied);

        TransactionSharesData transactionSharesData = new TransactionSharesData();
        transactionSharesData.setAwardedShares(transactionSharesDataAwardedShare);

        transaction.setTransactionSharesData(transactionSharesData);
        TransactionAmountData transactionAmountData = new TransactionAmountData();
        transactionAmountData.setAwardedGrossAmount(transactionAmountDataAwardedGrossAmount);
        transactionAmountData.setAwardedNetAmount(transactionAmountDataAwardedNetAmount);
        transactionAmountData.setSettledAmount(transactionAmountDataSettledAmount);

        transaction.setTransactionAmountData(transactionAmountData);
        TransactionItalianRetailMarketData transactionItalianRetailMarketData = new TransactionItalianRetailMarketData();
        transactionItalianRetailMarketData.setFiscalAccruedIncome(transactionItalianMarketDataFiscalAccruedIncome);
        transactionItalianRetailMarketData.setWeightedAverageCost(transactionItalianMarketDataWeightedAverageCost);
        transactionItalianRetailMarketData.setWeightedAveragePrice(transactionItalianMarketDataWeightedAveragePrice);

        transaction.setTransactionItalianRetailMarketData(transactionItalianRetailMarketData);
        TransactionCapitalGainedData transactionCapitalGainedData = new TransactionCapitalGainedData();
        transactionCapitalGainedData.setCapitalGained(transactionCapitalGainedDataCapitalGained);

        transaction.setTransactionCapitalGainedData(transactionCapitalGainedData);
        TransactionFeeData transactionFeeData = new TransactionFeeData();
        transactionFeeData.setAppliedDealingFundHouseFee(transactionFeeDataAppliedDealingFundHouseFee);
        transactionFeeData.setAppliedDistributorFee(transactionFeeDataAppliedDistributorFee);
        transactionFeeData.setExpensesAppliedByAfb(transactionFeeDataExpensesAppliedByAFB);

        transaction.setTransactionFeeData(transactionFeeData);
        transaction.setId(transactionId);
        transaction.setTransactionStatusCode("CE");

        return ResponseEntity.ok(transaction);

    }


    @ApiOperation(value = "getTransactionConfirmationLetterAsPdf", nickname = "getTransactionConfirmationLetterAsPdfUsingGET", notes = "List of transactions by different parameters (as an Pdf file)", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/transactions/{transactionId}/confirmationLetter/pdf",
        produces = {"application/pdf"},
        method = RequestMethod.GET)
    default ResponseEntity<List<byte[]>> getTransactionConfirmationLetterAsPdfUsingGET(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Transaction}", required = true) @PathVariable("transactionId") Long transactionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listAssignableUsers", nickname = "listAssignableUsersUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/assignableUsers/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> listAssignableUsersUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody DistributorsFilterAndPageFilter distributorsFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listAvailableBreakdownsDates", nickname = "listAvailableBreakdownsDatesUsingPOST", notes = "", response = BreakDownDatesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = BreakDownDatesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/availableBreakdownsDates/list",
        produces = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<BreakDownDatesAndPage> listAvailableBreakdownsDatesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"breakdownDates\" : [ \"2000-01-23T04:56:07.000+00:00\", \"2000-01-23T04:56:07.000+00:00\" ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listAvailableRequestsDates", nickname = "listAvailableRequestsDatesUsingPOST", notes = "", response = SpanishTransferAvailableRequestsDatesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SpanishTransferAvailableRequestsDatesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/availableRequestsDates/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<SpanishTransferAvailableRequestsDatesAndPage> listAvailableRequestsDatesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "filter", required = true) @Valid @RequestBody SpanishTransferRequestsDatesFilterAndPageFilter spanishTransferRequestsDatesFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"requestsDates\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"numberOfRequests\" : 0,    \"pendingDays\" : 6  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"numberOfRequests\" : 0,    \"pendingDays\" : 6  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCheckInvestmentLimits", nickname = "listCheckInvestmentLimitsUsingPOST", notes = "Check Investment Limits", response = CheckInvestmentLimitAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = CheckInvestmentLimitAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/investmentLimits/{investmentLimitId}/check",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<CheckInvestmentLimitAndPage> listCheckInvestmentLimitsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {InvestmentLimit}", required = true) @PathVariable("investmentLimitId") Long investmentLimitId, @ApiParam(value = "body") @Valid @RequestBody CheckInvestmentLimitFilterAndPageFilter checkInvestmentLimitFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"featureBreakdowns\" : [ {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"failsRiskLevel\" : true,    \"featureTypeCode\" : \"featureTypeCode\",    \"percentage\" : 0.80082819046101150206595775671303272247314453125,    \"id\" : \"id\"  }, {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"failsRiskLevel\" : true,    \"featureTypeCode\" : \"featureTypeCode\",    \"percentage\" : 0.80082819046101150206595775671303272247314453125,    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listDealingInstrumentNotifications", nickname = "listDealingInstrumentNotificationsUsingPOST", notes = "", response = DealingInstrumentNotificationAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = DealingInstrumentNotificationAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/notifications/{notificationId}/breakdowns/dealingInstruments/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<DealingInstrumentNotificationAndPage> listDealingInstrumentNotificationsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Notification}", required = true) @PathVariable("notificationId") Long notificationId, @ApiParam(value = "body", required = true) @Valid @RequestBody DealingInstrumentNotificationFilterAndPageFilter dealingInstrumentNotificationFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"dealingInstrumentNotifications\" : [ {    \"weightPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"dealingInstrument\" : {      \"brokerId\" : 0,      \"instrumentType\" : \"FUND\",      \"externalCodeKeyValues\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ],      \"name\" : \"name\",      \"id\" : 1,      \"dealingFundHouseId\" : 6,      \"currencyCode\" : \"currencyCode\",      \"stockExchangeId\" : \"stockExchangeId\"    }  }, {    \"weightPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"dealingInstrument\" : {      \"brokerId\" : 0,      \"instrumentType\" : \"FUND\",      \"externalCodeKeyValues\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ],      \"name\" : \"name\",      \"id\" : 1,      \"dealingFundHouseId\" : 6,      \"currencyCode\" : \"currencyCode\",      \"stockExchangeId\" : \"stockExchangeId\"    }  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listDealingTheoreticalPortfolios", nickname = "listDealingTheoreticalPortfoliosUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/dealing/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> listDealingTheoreticalPortfoliosUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The PageFilter object to use", required = true) @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listDepositaries", nickname = "listDepositariesUsingPOST1", notes = "Returns list of depositaries", response = DepositaryAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = DepositaryAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/depositaries/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<DepositaryAndPage> listDepositariesUsingPOST1(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"depositaries\" : [ {    \"distributorId\" : 0,    \"name\" : \"name\",    \"accountCodeRequired\" : true,    \"id\" : 6  }, {    \"distributorId\" : 0,    \"name\" : \"name\",    \"accountCodeRequired\" : true,    \"id\" : 6  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listDistributors", nickname = "listDistributorsUsingPOST", notes = "Returns list of distributors", response = DistributorAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = DistributorAndPage.class)})
    @RequestMapping(value = "/distributors/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<DistributorAndPage> listDistributorsUsingPOST(@ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"distributors\" : [ {    \"accountingCenterCountryCode\" : \"accountingCenterCountryCode\",    \"address\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"name\" : \"name\",    \"nif\" : \"nif\",    \"id\" : 0,    \"logoUrl\" : \"logoUrl\"  }, {    \"accountingCenterCountryCode\" : \"accountingCenterCountryCode\",    \"address\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"name\" : \"name\",    \"nif\" : \"nif\",    \"id\" : 0,    \"logoUrl\" : \"logoUrl\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listDocumentTypesByDistributor", nickname = "listDocumentTypesByDistributorUsingPOST", notes = "Returns list of Document Types", response = DocumentTypeAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = DocumentTypeAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/documentTypes/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<DocumentTypeAndPage> listDocumentTypesByDistributorUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"documentTypeCodes\" : [ \"documentTypeCodes\", \"documentTypeCodes\" ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFeatureBreakdowns", nickname = "listFeatureBreakdownsUsingPOST", notes = "Returns list to paint a graphic", response = FeatureBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = FeatureBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/investmentLimits/breakdowns/features/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<FeatureBreakdownAndPage> listFeatureBreakdownsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody InvestmentLimitByFeatureFilterAndPageFilter investmentLimitByFeatureFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"featureBreakdowns\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listInvestmentLimitFeaturesByDistributor", nickname = "listInvestmentLimitFeaturesByDistributorUsingPOST", notes = "Returns list of InvestmentLimitsFeatures By Distributor", response = InvestmentLimitFeatureAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = InvestmentLimitFeatureAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/investmentLimitFeatures/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<InvestmentLimitFeatureAndPage> listInvestmentLimitFeaturesByDistributorUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"investmentLimitFeatures\" : [ \"investmentLimitFeatures\", \"investmentLimitFeatures\" ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listInvestmentLimits", nickname = "listInvestmentLimitsUsingPOST", notes = "", response = InvestmentLimitAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = InvestmentLimitAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/investmentLimits/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<InvestmentLimitAndPage> listInvestmentLimitsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody InvestmentLimitFilterAndPageFilter investmentLimitFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"investmentLimits\" : [ {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  }, {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listMarketersForSpanishTransfer", nickname = "listMarketersForSpanishTransferUsingPOST", notes = "Returns information about the {DealingInstrument} used for {SpanishTransfer}'s", response = SpanishTransferMarketerAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SpanishTransferMarketerAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/marketers/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<SpanishTransferMarketerAndPage> listMarketersForSpanishTransferUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "filter", required = true) @Valid @RequestBody MarketerFilterAndPageFilter marketerFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"marketers\" : [ {    \"entityCnmvCode\" : \"entityCnmvCode\",    \"entityCnmvNif\" : \"entityCnmvNif\",    \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",    \"dealingInstrumentName\" : \"dealingInstrumentName\",    \"currentAccountCode\" : \"currentAccountCode\",    \"entityName\" : \"entityName\",    \"dealingInstrumentNif\" : \"dealingInstrumentNif\"  }, {    \"entityCnmvCode\" : \"entityCnmvCode\",    \"entityCnmvNif\" : \"entityCnmvNif\",    \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",    \"dealingInstrumentName\" : \"dealingInstrumentName\",    \"currentAccountCode\" : \"currentAccountCode\",    \"entityName\" : \"entityName\",    \"dealingInstrumentNif\" : \"dealingInstrumentNif\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listNotifications", nickname = "listNotificationsUsingPOST", notes = "", response = NotificationAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = NotificationAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/notifications/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<NotificationAndPage> listNotificationsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody NotificationFilterAndPageFilter notificationFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"notifications\" : [ {    \"externalReference\" : \"externalReference\",    \"investmentLimits\" : [ {      \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",      \"operationalStatus\" : \"ACTIVED\",      \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,      \"features\" : [ {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      }, {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      } ],      \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,      \"notificationCause\" : \"LIMIT\",      \"distributorId\" : 6,      \"name\" : \"name\",      \"assigned\" : true,      \"id\" : 5,      \"descriptionData\" : \"descriptionData\"    }, {      \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",      \"operationalStatus\" : \"ACTIVED\",      \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,      \"features\" : [ {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      }, {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      } ],      \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,      \"notificationCause\" : \"LIMIT\",      \"distributorId\" : 6,      \"name\" : \"name\",      \"assigned\" : true,      \"id\" : 5,      \"descriptionData\" : \"descriptionData\"    } ],    \"mailNotification\" : true,    \"dataDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioId\" : 1,    \"notificationTypeCode\" : \"notificationTypeCode\",    \"distributorId\" : 0,    \"scope\" : \"MODEL_PORTFOLIO\",    \"name\" : \"name\",    \"notificationStatusCode\" : \"notificationStatusCode\",    \"id\" : 6,    \"notificationDate\" : \"2000-01-23T04:56:07.000+00:00\"  }, {    \"externalReference\" : \"externalReference\",    \"investmentLimits\" : [ {      \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",      \"operationalStatus\" : \"ACTIVED\",      \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,      \"features\" : [ {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      }, {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      } ],      \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,      \"notificationCause\" : \"LIMIT\",      \"distributorId\" : 6,      \"name\" : \"name\",      \"assigned\" : true,      \"id\" : 5,      \"descriptionData\" : \"descriptionData\"    }, {      \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",      \"operationalStatus\" : \"ACTIVED\",      \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,      \"features\" : [ {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      }, {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      } ],      \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,      \"notificationCause\" : \"LIMIT\",      \"distributorId\" : 6,      \"name\" : \"name\",      \"assigned\" : true,      \"id\" : 5,      \"descriptionData\" : \"descriptionData\"    } ],    \"mailNotification\" : true,    \"dataDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"operationalPortfolioId\" : 1,    \"notificationTypeCode\" : \"notificationTypeCode\",    \"distributorId\" : 0,    \"scope\" : \"MODEL_PORTFOLIO\",    \"name\" : \"name\",    \"notificationStatusCode\" : \"notificationStatusCode\",    \"id\" : 6,    \"notificationDate\" : \"2000-01-23T04:56:07.000+00:00\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOperationTypesByDistributor", nickname = "listOperationTypesByDistributorUsingPOST", notes = "Operation types. This is a sub-set of {listOperationTypes}", response = OperationTypeAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationTypeAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/operations/operationTypes/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationTypeAndPage> listOperationTypesByDistributorUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"orderTypeCodes\" : [ \"orderTypeCodes\", \"orderTypeCodes\" ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOperationalPortfolioGroups", nickname = "listOperationalPortfolioGroupsUsingPOST", notes = "Returns list of Operational portfolio groups", response = OperationalGroupAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalGroupAndPage.class)})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/groups/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalGroupAndPage> listOperationalPortfolioGroupsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalGroups\" : [ {    \"name\" : \"name\",    \"id\" : 0  }, {    \"name\" : \"name\",    \"id\" : 0  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOperationalPortfolioHistoricalPerformances", nickname = "listOperationalPortfolioHistoricalPerformancesUsingPOST", notes = "Get a list of Operational portfolio historical performance", response = HistoricalPerformancesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Operation.", response = HistoricalPerformancesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/backtesting/{backtestingPortfolioId}/performances/historical/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<HistoricalPerformancesAndPage> listOperationalPortfolioHistoricalPerformancesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "The Id of the {OperationalPortfolioBacktesting}", required = true) @PathVariable("backtestingPortfolioId") String backtestingPortfolioId, @ApiParam(value = "body") @Valid @RequestBody HistoricalOperationalPerformanceFilterAndPageFilter historicalOperationalPerformanceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"benchmarkPerformances\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"instrumentPerformances\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOperationalPortfolioInvestmentLimits", nickname = "listOperationalPortfolioInvestmentLimitsUsingPOST", notes = "", response = InvestmentLimitAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = InvestmentLimitAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/breakdowns/investmentLimits/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<InvestmentLimitAndPage> listOperationalPortfolioInvestmentLimitsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"investmentLimits\" : [ {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  }, {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOrderTypes", nickname = "listOrderTypesUsingPOST", notes = "List of order types", response = OrderTypeAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OrderTypeAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/orders/orderTypes/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OrderTypeAndPage> listOrderTypesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"orderTypeCodes\" : [ \"orderTypeCodes\", \"orderTypeCodes\" ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listPaymentCurrencies", nickname = "listPaymentCurrenciesUsingPOST", notes = "Request payment currencies by distributor. This is a sub-set of {listCurrencies}.", response = PaymentCurrencyAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = PaymentCurrencyAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/paymentCurrencies/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<PaymentCurrencyAndPage> listPaymentCurrenciesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"paymentCurrenciesCodes\" : [ \"paymentCurrenciesCodes\", \"paymentCurrenciesCodes\" ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listProducts", nickname = "listProductsUsingPOST", notes = "Returns a products list.", response = ProductAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ProductAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/products/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ProductAndPage> listProductsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"products\" : [ {    \"portfolioExternalData\" : true,    \"apportionByContract\" : true,    \"distributorId\" : 0,    \"name\" : \"name\",    \"accountCodeRequired\" : true,    \"id\" : 6,    \"accountCodeAutoGenerated\" : true  }, {    \"portfolioExternalData\" : true,    \"apportionByContract\" : true,    \"distributorId\" : 0,    \"name\" : \"name\",    \"accountCodeRequired\" : true,    \"id\" : 6,    \"accountCodeAutoGenerated\" : true  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listRebateCurrencies", nickname = "listRebateCurrenciesUsingPOST", notes = "List of currencies in which rebates could be expressed", response = RebateCurrencyAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = RebateCurrencyAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/rebates/currencies/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<RebateCurrencyAndPage> listRebateCurrenciesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"currencyCodes\" : [ \"currencyCodes\", \"currencyCodes\" ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listRebatePricesAsExcel", nickname = "listRebatePricesAsExcelUsingPOST", notes = "List all rebate prices filtering by different parameters returned into an Excel file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/rebates/prices/list/xls",
        produces = {"application/vnd.ms-excel"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> listRebatePricesAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody RebatePriceFilterAndPageFilter rebatePriceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listRebatePrices", nickname = "listRebatePricesUsingPOST", notes = "List all rebate prices filtering by different parameters", response = RebatePriceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = RebatePriceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/rebates/prices/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<RebatePriceAndPage> listRebatePricesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody RebatePriceFilterAndPageFilter rebatePriceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"rebatePrices\" : [ {    \"feeData\" : {      \"appliedManagementFee\" : 5.63737665663332876420099637471139430999755859375,      \"appliedDistributionFee\" : 5.962133916683182377482808078639209270477294921875,      \"totalFeeApplied\" : 7.061401241503109105224211816675961017608642578125,      \"feesCorrelationPercentage\" : 2.3021358869347654518833223846741020679473876953125    },    \"basisPoints\" : 6.02745618307040320615897144307382404804229736328125,    \"rebatePercentage\" : 9.301444243932575517419536481611430644989013671875,    \"assetManagementHouseTrancheApplied\" : 0.80082819046101150206595775671303272247314453125,    \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"basicRebate\" : {      \"productId\" : 6,      \"rebateValue\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"amount\" : 1.46581298050294517310021547018550336360931396484375,        \"currencyCode\" : \"currencyCode\"      },      \"distributorId\" : 0,      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"dealingFundHouseId\" : 1  }, {    \"feeData\" : {      \"appliedManagementFee\" : 5.63737665663332876420099637471139430999755859375,      \"appliedDistributionFee\" : 5.962133916683182377482808078639209270477294921875,      \"totalFeeApplied\" : 7.061401241503109105224211816675961017608642578125,      \"feesCorrelationPercentage\" : 2.3021358869347654518833223846741020679473876953125    },    \"basisPoints\" : 6.02745618307040320615897144307382404804229736328125,    \"rebatePercentage\" : 9.301444243932575517419536481611430644989013671875,    \"assetManagementHouseTrancheApplied\" : 0.80082819046101150206595775671303272247314453125,    \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"basicRebate\" : {      \"productId\" : 6,      \"rebateValue\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"amount\" : 1.46581298050294517310021547018550336360931396484375,        \"currencyCode\" : \"currencyCode\"      },      \"distributorId\" : 0,      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"dealingFundHouseId\" : 1  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listRiskControlAlarmInvestmentLimitsByOperationalPortfolio", nickname = "listRiskControlAlarmInvestmentLimitsByOperationalPortfolioUsingPOST", notes = "Returns list of Investment Limits Risk Control Alarm By Operational Portfolio", response = InvestmentLimitAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = InvestmentLimitAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/riskControlAlarms/breakdowns/investmentLimits/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<InvestmentLimitAndPage> listRiskControlAlarmInvestmentLimitsByOperationalPortfolioUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"investmentLimits\" : [ {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  }, {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listRiskControlAlarms", nickname = "listRiskControlAlarmsUsingPOST", notes = "", response = RiskControlAlarmAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = RiskControlAlarmAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/riskControlAlarms/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<RiskControlAlarmAndPage> listRiskControlAlarmsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody RiskControlAlarmFilterAndPageFilter riskControlAlarmFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"riskControlAlarms\" : [ {    \"operationalStatus\" : \"ACTIVED\",    \"investmentLimits\" : [ {      \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",      \"operationalStatus\" : \"ACTIVED\",      \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,      \"features\" : [ {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      }, {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      } ],      \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,      \"notificationCause\" : \"LIMIT\",      \"distributorId\" : 6,      \"name\" : \"name\",      \"assigned\" : true,      \"id\" : 5,      \"descriptionData\" : \"descriptionData\"    }, {      \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",      \"operationalStatus\" : \"ACTIVED\",      \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,      \"features\" : [ {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      }, {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      } ],      \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,      \"notificationCause\" : \"LIMIT\",      \"distributorId\" : 6,      \"name\" : \"name\",      \"assigned\" : true,      \"id\" : 5,      \"descriptionData\" : \"descriptionData\"    } ],    \"mailNotification\" : true,    \"operationalPortfolioId\" : 5,    \"distributorId\" : 0,    \"scope\" : \"MODEL_PORTFOLIO\",    \"name\" : \"name\",    \"language\" : \"SPANISH\",    \"id\" : 6,    \"mailNotifications\" : [ {      \"investmentLimitRiskLevelCodes\" : [ \"investmentLimitRiskLevelCodes\", \"investmentLimitRiskLevelCodes\" ],      \"id\" : 1,      \"email\" : \"email\"    }, {      \"investmentLimitRiskLevelCodes\" : [ \"investmentLimitRiskLevelCodes\", \"investmentLimitRiskLevelCodes\" ],      \"id\" : 1,      \"email\" : \"email\"    } ],    \"typeCode\" : \"typeCode\"  }, {    \"operationalStatus\" : \"ACTIVED\",    \"investmentLimits\" : [ {      \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",      \"operationalStatus\" : \"ACTIVED\",      \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,      \"features\" : [ {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      }, {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      } ],      \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,      \"notificationCause\" : \"LIMIT\",      \"distributorId\" : 6,      \"name\" : \"name\",      \"assigned\" : true,      \"id\" : 5,      \"descriptionData\" : \"descriptionData\"    }, {      \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",      \"operationalStatus\" : \"ACTIVED\",      \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,      \"features\" : [ {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      }, {        \"featureTypeCode\" : \"featureTypeCode\",        \"maximum\" : 1.46581298050294517310021547018550336360931396484375,        \"valueCode\" : \"valueCode\",        \"id\" : \"id\",        \"minimum\" : 5.962133916683182377482808078639209270477294921875      } ],      \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,      \"notificationCause\" : \"LIMIT\",      \"distributorId\" : 6,      \"name\" : \"name\",      \"assigned\" : true,      \"id\" : 5,      \"descriptionData\" : \"descriptionData\"    } ],    \"mailNotification\" : true,    \"operationalPortfolioId\" : 5,    \"distributorId\" : 0,    \"scope\" : \"MODEL_PORTFOLIO\",    \"name\" : \"name\",    \"language\" : \"SPANISH\",    \"id\" : 6,    \"mailNotifications\" : [ {      \"investmentLimitRiskLevelCodes\" : [ \"investmentLimitRiskLevelCodes\", \"investmentLimitRiskLevelCodes\" ],      \"id\" : 1,      \"email\" : \"email\"    }, {      \"investmentLimitRiskLevelCodes\" : [ \"investmentLimitRiskLevelCodes\", \"investmentLimitRiskLevelCodes\" ],      \"id\" : 1,      \"email\" : \"email\"    } ],    \"typeCode\" : \"typeCode\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSavingPlanPeriods", nickname = "listSavingPlanPeriodsUsingPOST1", notes = "Obteins the {SavingPlan} periods in order to add a new one", response = SavingPlanPeriodsAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SavingPlanPeriodsAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/savingPlans/periods/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<SavingPlanPeriodsAndPage> listSavingPlanPeriodsUsingPOST1(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "body", required = true) @Valid @RequestBody SavingPlanFilterAndPageFilter savingPlanFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"periodCodes\" : [ \"periodCodes\", \"periodCodes\" ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSavingPlanTransactionTypes", nickname = "listSavingPlanTransactionTypesUsingPOST", notes = "Obtains the {SavingPlan} transactionTypes in order to add a new {SavingPlan}", response = SavingPlanTransactionTypesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SavingPlanTransactionTypesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/savingPlans/transactionTypes/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<SavingPlanTransactionTypesAndPage> listSavingPlanTransactionTypesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "body", required = true) @Valid @RequestBody SavingPlanFilterAndPageFilter savingPlanFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"transactionTypesCodes\" : [ \"transactionTypesCodes\", \"transactionTypesCodes\" ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listScorecardFeaturesByDistributor", nickname = "listScorecardFeaturesByDistributorUsingPOST", notes = "Returns list of Scorecard Features By Distributor", response = ScorecardFeatureAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ScorecardFeatureAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/scorecardFeatures/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ScorecardFeatureAndPage> listScorecardFeaturesByDistributorUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"scorecardFeatures\" : [ \"scorecardFeatures\", \"scorecardFeatures\" ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listScorecardsByOperationalPortfolio", nickname = "listScorecardsByOperationalPortfolioUsingPOST", notes = "Returns list of Scorecards By Operational Portfolio", response = ScorecardAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ScorecardAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/breakdowns/scorecards/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ScorecardAndPage> listScorecardsByOperationalPortfolioUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"scorecards\" : [ {    \"distributorId\" : 0,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : \"id\",    \"featureDetails\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"    } ]  }, {    \"distributorId\" : 0,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : \"id\",    \"featureDetails\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"    } ]  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listScorecards", nickname = "listScorecardsUsingPOST", notes = "", response = ScorecardAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ScorecardAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/scorecards/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ScorecardAndPage> listScorecardsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"scorecards\" : [ {    \"distributorId\" : 0,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : \"id\",    \"featureDetails\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"    } ]  }, {    \"distributorId\" : 0,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : \"id\",    \"featureDetails\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"    } ]  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSpanishTransferHistory", nickname = "listSpanishTransferHistoryUsingPOST", notes = "Returns a {SpanishTransferHistory} object describing the history of a {SpanishTransfer}.", response = SpanishTransferHistoryAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SpanishTransferHistoryAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/{spanishTransferId}/history/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<SpanishTransferHistoryAndPage> listSpanishTransferHistoryUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {SpanishTransfer}", required = true) @PathVariable("spanishTransferId") String spanishTransferId, @ApiParam(value = "filter") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"history\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"orderedBy\" : \"orderedBy\",    \"actionCode\" : \"actionCode\"  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"orderedBy\" : \"orderedBy\",    \"actionCode\" : \"actionCode\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listStockTransferHistory", nickname = "listStockTransferHistoryUsingPOST", notes = "Returns a StockTransfer's history list.", response = StockTransferHistoryAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = StockTransferHistoryAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/stockTransfers/{stockTransferId}/history/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<StockTransferHistoryAndPage> listStockTransferHistoryUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {StockTransfer}", required = true) @PathVariable("stockTransferId") String stockTransferId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"history\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"actionCode\" : \"actionCode\"  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"actionCode\" : \"actionCode\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSubDistributors", nickname = "listSubDistributorsUsingPOST", notes = "Returns list of subdistributors", response = SubdistributorAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SubdistributorAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<SubdistributorAndPage> listSubDistributorsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"subdistributors\" : [ {    \"distributorId\" : 0,    \"name\" : \"name\",    \"id\" : 6  }, {    \"distributorId\" : 0,    \"name\" : \"name\",    \"id\" : 6  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioAssets", nickname = "listTheoreticalPortfolioAssetsUsingPOST", notes = "Get a list of asset", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/assets/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioAssetsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}", required = true) @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioCompositions", nickname = "listTheoreticalPortfolioCompositionsUsingPOST", notes = "List of Theoretical Portfolios Compositions", response = ComposedCompositionAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ComposedCompositionAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/compositions/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ComposedCompositionAndPage> listTheoreticalPortfolioCompositionsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "Composition Filter", required = true) @Valid @RequestBody CompositionFilterAndPageFilter compositionFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"compositions\" : [ {    \"composition\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"resources\" : [ {        \"reference\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"instrumentType\" : \"FUND\",        \"weight\" : 0.80082819046101150206595775671303272247314453125      }, {        \"reference\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"instrumentType\" : \"FUND\",        \"weight\" : 0.80082819046101150206595775671303272247314453125      } ],      \"id\" : 0    },    \"benchmarkComposition\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"resources\" : [ {        \"reference\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"instrumentType\" : \"FUND\",        \"weight\" : 0.80082819046101150206595775671303272247314453125      }, {        \"reference\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"instrumentType\" : \"FUND\",        \"weight\" : 0.80082819046101150206595775671303272247314453125      } ],      \"id\" : 0    }  }, {    \"composition\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"resources\" : [ {        \"reference\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"instrumentType\" : \"FUND\",        \"weight\" : 0.80082819046101150206595775671303272247314453125      }, {        \"reference\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"instrumentType\" : \"FUND\",        \"weight\" : 0.80082819046101150206595775671303272247314453125      } ],      \"id\" : 0    },    \"benchmarkComposition\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"resources\" : [ {        \"reference\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"instrumentType\" : \"FUND\",        \"weight\" : 0.80082819046101150206595775671303272247314453125      }, {        \"reference\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"instrumentType\" : \"FUND\",        \"weight\" : 0.80082819046101150206595775671303272247314453125      } ],      \"id\" : 0    }  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioCreditQualities", nickname = "listTheoreticalPortfolioCreditQualitiesUsingPOST", notes = "Get a list of credit quality", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/creditQualities/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioCreditQualitiesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}", required = true) @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioCurrencies", nickname = "listTheoreticalPortfolioCurrenciesUsingPOST", notes = "Get a list of currency", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/currencies/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioCurrenciesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}", required = true) @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioDrawdowns", nickname = "listTheoreticalPortfolioDrawdownsUsingPOST", notes = "Get drawdown analysis statistic of a Portfolio", response = DrawdownsAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = DrawdownsAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/statistic/drawdown/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<DrawdownsAndPage> listTheoreticalPortfolioDrawdownsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.", required = true) @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"drawdowns\" : [ {    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"numberOfMonthToLength\" : 0.80082819046101150206595775671303272247314453125,    \"numberOfMonthToRecovery\" : 6.02745618307040320615897144307382404804229736328125,    \"value\" : 1.46581298050294517310021547018550336360931396484375,    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  }, {    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"numberOfMonthToLength\" : 0.80082819046101150206595775671303272247314453125,    \"numberOfMonthToRecovery\" : 6.02745618307040320615897144307382404804229736328125,    \"value\" : 1.46581298050294517310021547018550336360931396484375,    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioEvolutionTopAssets", nickname = "listTheoreticalPortfolioEvolutionTopAssetsUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/top/evolution/assets/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioEvolutionTopAssetsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "filter") @Valid @RequestBody EvolutionBreakdownFilterAndPageFilter evolutionBreakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioEvolutionTopCreditQualities", nickname = "listTheoreticalPortfolioEvolutionTopCreditQualitiesUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/top/evolution/creditQualities/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioEvolutionTopCreditQualitiesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "filter") @Valid @RequestBody EvolutionBreakdownFilterAndPageFilter evolutionBreakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioEvolutionTopCurrencies", nickname = "listTheoreticalPortfolioEvolutionTopCurrenciesUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/top/evolution/currencies/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioEvolutionTopCurrenciesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "filter") @Valid @RequestBody EvolutionBreakdownFilterAndPageFilter evolutionBreakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioEvolutionTopGeographicAreas", nickname = "listTheoreticalPortfolioEvolutionTopGeographicAreasUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/top/evolution/geographicAreas/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioEvolutionTopGeographicAreasUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "filter") @Valid @RequestBody EvolutionBreakdownFilterAndPageFilter evolutionBreakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioEvolutionTopSectors", nickname = "listTheoreticalPortfolioEvolutionTopSectorsUsingPOST", notes = "Get a top sector evolution", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/top/evolution/sectors/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioEvolutionTopSectorsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "filter") @Valid @RequestBody EvolutionBreakdownFilterAndPageFilter evolutionBreakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioGeographicAreas", nickname = "listTheoreticalPortfolioGeographicAreasUsingPOST", notes = "Get a geograhic list", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/geographicAreas/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioGeographicAreasUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}", required = true) @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioHistoricalPerformances", nickname = "listTheoreticalPortfolioHistoricalPerformancesUsingPOST", notes = "Get a list of historical performance", response = HistoricalPerformancesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Operation.", response = HistoricalPerformancesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/performances/historical/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<HistoricalPerformancesAndPage> listTheoreticalPortfolioHistoricalPerformancesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.", required = true) @Valid @RequestBody HistoricalPerformanceFilterAndPageFilter historicalPerformanceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"benchmarkPerformances\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"instrumentPerformances\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioHoldings", nickname = "listTheoreticalPortfolioHoldingsUsingPOST", notes = "Get a holding list", response = HoldingBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = HoldingBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/holdings/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<HoldingBreakdownAndPage> listTheoreticalPortfolioHoldingsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}", required = true) @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"holdingBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioPrices", nickname = "listTheoreticalPortfolioPricesUsingPOST", notes = "", response = PriceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = PriceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/prices/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<PriceAndPage> listTheoreticalPortfolioPricesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "filter") @Valid @RequestBody PriceFilterAndPageFilter priceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"prices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioQuarterlyPerformances", nickname = "listTheoreticalPortfolioQuarterlyPerformancesUsingPOST", notes = "Get a list of Quarterly Performances", response = QuarterlyPerformancesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Operation.", response = QuarterlyPerformancesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/performances/quarterly/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<QuarterlyPerformancesAndPage> listTheoreticalPortfolioQuarterlyPerformancesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.", required = true) @Valid @RequestBody PerformanceFilterAndPageFilter performanceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"quarterlyPerformances\" : [ {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"quarter1\" : 0.80082819046101150206595775671303272247314453125,    \"year\" : 5.63737665663332876420099637471139430999755859375,    \"quarter2\" : 6.02745618307040320615897144307382404804229736328125,    \"quarter3\" : 1.46581298050294517310021547018550336360931396484375,    \"quarter4\" : 5.962133916683182377482808078639209270477294921875  }, {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"quarter1\" : 0.80082819046101150206595775671303272247314453125,    \"year\" : 5.63737665663332876420099637471139430999755859375,    \"quarter2\" : 6.02745618307040320615897144307382404804229736328125,    \"quarter3\" : 1.46581298050294517310021547018550336360931396484375,    \"quarter4\" : 5.962133916683182377482808078639209270477294921875  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioSectors", nickname = "listTheoreticalPortfolioSectorsUsingPOST", notes = "Get a sector list", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/sectors/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioSectorsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}", required = true) @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioTopAssets", nickname = "listTheoreticalPortfolioTopAssetsUsingPOST", notes = "Get a top list of asset", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/top/assets/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioTopAssetsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}", required = true) @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioTopCreditQualities", nickname = "listTheoreticalPortfolioTopCreditQualitiesUsingPOST", notes = "Get a top list of credit quality", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/top/creditQualities/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioTopCreditQualitiesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}", required = true) @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioTopCurrencies", nickname = "listTheoreticalPortfolioTopCurrenciesUsingPOST", notes = "Get a top list of currency", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/top/currencies/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioTopCurrenciesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}", required = true) @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioTopGeographicAreas", nickname = "listTheoreticalPortfolioTopGeographicAreasUsingPOST", notes = "Get a top geograhic list", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/top/geographicAreas/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioTopGeographicAreasUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}", required = true) @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioTopHoldings", nickname = "listTheoreticalPortfolioTopHoldingsUsingPOST", notes = "Get a top holding list", response = HoldingBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = HoldingBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/top/holdings/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<HoldingBreakdownAndPage> listTheoreticalPortfolioTopHoldingsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}", required = true) @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"holdingBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioTopSectors", nickname = "listTheoreticalPortfolioTopSectorsUsingPOST", notes = "Get a top sector list", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/breakdowns/top/sectors/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listTheoreticalPortfolioTopSectorsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}", required = true) @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolioValueAddedMonthlyIndexes", nickname = "listTheoreticalPortfolioValueAddedMonthlyIndexesUsingPOST", notes = "Get a list of VAMI (Value Added Monthly Index)", response = ValueAddedMonthlyIndexAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = ValueAddedMonthlyIndexAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/performances/valueAddedMonthlyIndex/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ValueAddedMonthlyIndexAndPage> listTheoreticalPortfolioValueAddedMonthlyIndexesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics.", required = true) @Valid @RequestBody HistoricalPerformanceFilterAndPageFilter historicalPerformanceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"portfolioPerformances\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTheoreticalPortfolios", nickname = "listTheoreticalPortfoliosUsingPOST", notes = "", response = PortfolioAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = PortfolioAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<PortfolioAndPage> listTheoreticalPortfoliosUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The PageFilter object to use", required = true) @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"portfolios\" : [ {    \"owner\" : [ {      \"distributorName\" : \"distributorName\",      \"distributorId\" : \"distributorId\",      \"name\" : \"name\",      \"id\" : \"id\"    }, {      \"distributorName\" : \"distributorName\",      \"distributorId\" : \"distributorId\",      \"name\" : \"name\",      \"id\" : \"id\"    } ],    \"fees\" : {      \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,      \"total\" : 2.027123023002321833274663731572218239307403564453125,      \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"performance\" : 3.61607674925191080461672754609026014804840087890625,      \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,      \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,      \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,      \"distribution\" : 5.962133916683182377482808078639209270477294921875,      \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,      \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,      \"others\" : 9.301444243932575517419536481611430644989013671875    },    \"typeShare\" : \"ACUMULATION\",    \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",    \"investmentObjective\" : \"investmentObjective\",    \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"lastCompositionId\" : 6,    \"lastBenchmarkCompositionId\" : 0,    \"emails\" : [ \"emails\", \"emails\" ],    \"portfolioType\" : \"SIMULATED\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"rebalancingTypeCode\" : \"rebalancingTypeCode\",    \"name\" : \"name\",    \"id\" : \"id\",    \"currencyCode\" : \"currencyCode\",    \"lastPrices\" : [ {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    }, {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    } ],    \"statusCode\" : \"statusCode\"  }, {    \"owner\" : [ {      \"distributorName\" : \"distributorName\",      \"distributorId\" : \"distributorId\",      \"name\" : \"name\",      \"id\" : \"id\"    }, {      \"distributorName\" : \"distributorName\",      \"distributorId\" : \"distributorId\",      \"name\" : \"name\",      \"id\" : \"id\"    } ],    \"fees\" : {      \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,      \"total\" : 2.027123023002321833274663731572218239307403564453125,      \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"performance\" : 3.61607674925191080461672754609026014804840087890625,      \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,      \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,      \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,      \"distribution\" : 5.962133916683182377482808078639209270477294921875,      \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,      \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,      \"others\" : 9.301444243932575517419536481611430644989013671875    },    \"typeShare\" : \"ACUMULATION\",    \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",    \"investmentObjective\" : \"investmentObjective\",    \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"lastCompositionId\" : 6,    \"lastBenchmarkCompositionId\" : 0,    \"emails\" : [ \"emails\", \"emails\" ],    \"portfolioType\" : \"SIMULATED\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"rebalancingTypeCode\" : \"rebalancingTypeCode\",    \"name\" : \"name\",    \"id\" : \"id\",    \"currencyCode\" : \"currencyCode\",    \"lastPrices\" : [ {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    }, {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    } ],    \"statusCode\" : \"statusCode\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTransactionHistory", nickname = "listTransactionHistoryUsingPOST", notes = "Returns a Transaction history list.", response = TransactionHistoryAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = TransactionHistoryAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/transactions/{transactionId}/history/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<TransactionHistoryAndPage> listTransactionHistoryUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Transaction}", required = true) @PathVariable("transactionId") Long transactionId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"history\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"orderedBy\" : \"orderedBy\",    \"actionCode\" : \"actionCode\"  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"orderedBy\" : \"orderedBy\",    \"actionCode\" : \"actionCode\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTransactionTypesByDistributor", nickname = "listTransactionTypesByDistributorUsingPOST", notes = "Transaction types. This is a sub-set of {listTransactionTypes}", response = TransactionTypeAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = TransactionTypeAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/transactions/transactionTypes/list",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<TransactionTypeAndPage> listTransactionTypesByDistributorUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"transactionTypeCodes\" : [ \"transactionTypeCodes\", \"transactionTypeCodes\" ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateAccountsAsExcel", nickname = "navigateAccountsAsExcelUsingPOST", notes = "Returns an Excel file, that contains a list of accounts", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/accounts/navigate/xls",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateAccountsAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody AccountFilterAndCursorFilter accountFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateAccounts", nickname = "navigateAccountsUsingPOST", notes = "Returns list of accounts", response = AccountAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = AccountAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/accounts/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<AccountAndCursor> navigateAccountsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody AccountFilterAndCursorFilter accountFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"accounts\" : [ {    \"currentAccountCode\" : \"currentAccountCode\",    \"productId\" : 6,    \"name\" : \"name\",    \"id\" : \"id\",    \"dealingFundHouseId\" : 0  }, {    \"currentAccountCode\" : \"currentAccountCode\",    \"productId\" : 6,    \"name\" : \"name\",    \"id\" : \"id\",    \"dealingFundHouseId\" : 0  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateClientSummaries", nickname = "navigateClientSummariesUsingPOST", notes = "List all clients filtering by different parameters", response = ClientSummaryAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ClientSummaryAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/clients/summaries/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ClientSummaryAndCursor> navigateClientSummariesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody ClientFilterAndCursorFilter clientFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"clientSummaries\" : [ {    \"externalReference\" : \"externalReference\",    \"firstName\" : \"firstName\",    \"clientId\" : \"clientId\",    \"distributorId\" : 0,    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"subdistributorId\" : 6,    \"fatca\" : true  }, {    \"externalReference\" : \"externalReference\",    \"firstName\" : \"firstName\",    \"clientId\" : \"clientId\",    \"distributorId\" : 0,    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"subdistributorId\" : 6,    \"fatca\" : true  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateConsolidatedGroupedRebatesAsExcel", nickname = "navigateConsolidatedGroupedRebatesAsExcelUsingPOST", notes = "List all consolidated grouped rebates filtering by different parameters returned into an Excel file", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/rebates/consolidated/grouped/navigate/xls",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateConsolidatedGroupedRebatesAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody ConsolidatedGroupedRebateFilterAndCursorFilter consolidatedGroupedRebateFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateConsolidatedGroupedRebates", nickname = "navigateConsolidatedGroupedRebatesUsingPOST", notes = "List all consolidated grouped rebates filtering by different parameters", response = GroupedRebateAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GroupedRebateAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/rebates/consolidated/grouped/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GroupedRebateAndCursor> navigateConsolidatedGroupedRebatesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody ConsolidatedGroupedRebateFilterAndCursorFilter consolidatedGroupedRebateFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"groupedRebates\" : [ {    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"basicRebate\" : {      \"productId\" : 6,      \"rebateValue\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"amount\" : 1.46581298050294517310021547018550336360931396484375,        \"currencyCode\" : \"currencyCode\"      },      \"distributorId\" : 0,      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"groupingLevelCode\" : \"groupingLevelCode\"  }, {    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"basicRebate\" : {      \"productId\" : 6,      \"rebateValue\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"amount\" : 1.46581298050294517310021547018550336360931396484375,        \"currencyCode\" : \"currencyCode\"      },      \"distributorId\" : 0,      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"groupingLevelCode\" : \"groupingLevelCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateConsolidatedRebatesAsExcel", nickname = "navigateConsolidatedRebatesAsExcelUsingPOST", notes = "List all consolidated rebates for the {Distributor} returned into an Excel file.", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/rebates/consolidated/navigate/xls",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateConsolidatedRebatesAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody ConsolidatedRebateFilterAndCursorFilter consolidatedRebateFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateConsolidatedRebates", nickname = "navigateConsolidatedRebatesUsingPOST", notes = "List all consolidated rebates for the {Distributor}.", response = RebateAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = RebateAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/rebates/consolidated/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<RebateAndCursor> navigateConsolidatedRebatesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody ConsolidatedRebateFilterAndCursorFilter consolidatedRebateFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"rebates\" : [ {    \"exchangeRateApplied\" : 5.962133916683182377482808078639209270477294921875,    \"shares\" : 2.3021358869347654518833223846741020679473876953125,    \"basisPoints\" : 1.46581298050294517310021547018550336360931396484375,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"rebatePercentage\" : 5.63737665663332876420099637471139430999755859375,    \"aum\" : 6.02745618307040320615897144307382404804229736328125,    \"appliedDealingFundHouseFee\" : 0.80082819046101150206595775671303272247314453125,    \"basicRebate\" : {      \"productId\" : 6,      \"rebateValue\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"amount\" : 1.46581298050294517310021547018550336360931396484375,        \"currencyCode\" : \"currencyCode\"      },      \"distributorId\" : 0,      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }  }, {    \"exchangeRateApplied\" : 5.962133916683182377482808078639209270477294921875,    \"shares\" : 2.3021358869347654518833223846741020679473876953125,    \"basisPoints\" : 1.46581298050294517310021547018550336360931396484375,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"rebatePercentage\" : 5.63737665663332876420099637471139430999755859375,    \"aum\" : 6.02745618307040320615897144307382404804229736328125,    \"appliedDealingFundHouseFee\" : 0.80082819046101150206595775671303272247314453125,    \"basicRebate\" : {      \"productId\" : 6,      \"rebateValue\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"amount\" : 1.46581298050294517310021547018550336360931396484375,        \"currencyCode\" : \"currencyCode\"      },      \"distributorId\" : 0,      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateContractDistributorSummaries", nickname = "navigateContractDistributorSummariesUsingPOST", notes = "List of contracts summary filtering by different parameters", response = ContractSummaryAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ContractSummaryAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/any/contracts/summaries/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ContractSummaryAndCursor> navigateContractDistributorSummariesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody ContractFilterAndCursorFilter contractFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"contractSummaries\" : [ {    \"externalReference\" : \"externalReference\",    \"principalHolderClientId\" : \"principalHolderClientId\",    \"numberOfShareholders\" : 1,    \"principalHolderName\" : \"principalHolderName\",    \"distributorId\" : 6,    \"contractId\" : 0,    \"principalHolderSurname\" : \"principalHolderSurname\",    \"principalHolderExternalReference\" : \"principalHolderExternalReference\",    \"subdistributorId\" : 5,    \"principalHolderSecondSurname\" : \"principalHolderSecondSurname\"  }, {    \"externalReference\" : \"externalReference\",    \"principalHolderClientId\" : \"principalHolderClientId\",    \"numberOfShareholders\" : 1,    \"principalHolderName\" : \"principalHolderName\",    \"distributorId\" : 6,    \"contractId\" : 0,    \"principalHolderSurname\" : \"principalHolderSurname\",    \"principalHolderExternalReference\" : \"principalHolderExternalReference\",    \"subdistributorId\" : 5,    \"principalHolderSecondSurname\" : \"principalHolderSecondSurname\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateContractSummaries", nickname = "navigateContractSummariesUsingPOST", notes = "List of contracts summaries filtering by different parameters", response = ContractSummaryAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ContractSummaryAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/summaries/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ContractSummaryAndCursor> navigateContractSummariesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody ContractFilterAndCursorFilter contractFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"contractSummaries\" : [ {    \"externalReference\" : \"externalReference\",    \"principalHolderClientId\" : \"principalHolderClientId\",    \"numberOfShareholders\" : 1,    \"principalHolderName\" : \"principalHolderName\",    \"distributorId\" : 6,    \"contractId\" : 0,    \"principalHolderSurname\" : \"principalHolderSurname\",    \"principalHolderExternalReference\" : \"principalHolderExternalReference\",    \"subdistributorId\" : 5,    \"principalHolderSecondSurname\" : \"principalHolderSecondSurname\"  }, {    \"externalReference\" : \"externalReference\",    \"principalHolderClientId\" : \"principalHolderClientId\",    \"numberOfShareholders\" : 1,    \"principalHolderName\" : \"principalHolderName\",    \"distributorId\" : 6,    \"contractId\" : 0,    \"principalHolderSurname\" : \"principalHolderSurname\",    \"principalHolderExternalReference\" : \"principalHolderExternalReference\",    \"subdistributorId\" : 5,    \"principalHolderSecondSurname\" : \"principalHolderSecondSurname\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateGroupedRebatesAsExcel", nickname = "navigateGroupedRebatesAsExcelUsingPOST", notes = "List the rebates grouped by {GroupedRebateFilter.period} for the {Distributor} returned into an Excel file.", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/rebates/grouped/navigate/xls",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateGroupedRebatesAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody GroupedRebateFilterAndCursorFilter groupedRebateFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateGroupedRebates", nickname = "navigateGroupedRebatesUsingPOST", notes = "List the rebates grouped by {GroupedRebateFilter.period} for the {Distributor}.", response = GroupedRebateAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = GroupedRebateAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/rebates/grouped/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<GroupedRebateAndCursor> navigateGroupedRebatesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody GroupedRebateFilterAndCursorFilter groupedRebateFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"groupedRebates\" : [ {    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"basicRebate\" : {      \"productId\" : 6,      \"rebateValue\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"amount\" : 1.46581298050294517310021547018550336360931396484375,        \"currencyCode\" : \"currencyCode\"      },      \"distributorId\" : 0,      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"groupingLevelCode\" : \"groupingLevelCode\"  }, {    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"basicRebate\" : {      \"productId\" : 6,      \"rebateValue\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"amount\" : 1.46581298050294517310021547018550336360931396484375,        \"currencyCode\" : \"currencyCode\"      },      \"distributorId\" : 0,      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"groupingLevelCode\" : \"groupingLevelCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateHoldingsAsExcel", nickname = "navigateHoldingsAsExcelUsingPOST", notes = "Returns an Excel file, that contains a list of daily Holdings filtering by different parameters", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/holdings/navigate/xls",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateHoldingsAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody HoldingFilterAndCursorFilter holdingFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateHoldingsAsPdf", nickname = "navigateHoldingsAsPdfUsingPOST", notes = "List of daily Holdings filtering by different parameters returned as PDF", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/holdings/navigate/pdf",
        produces = {"application/pdf"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> navigateHoldingsAsPdfUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody HoldingFilterAndCursorFilter holdingFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateHoldings", nickname = "navigateHoldingsUsingPOST", notes = "List of daily Holdings filtering by different parameters", response = HoldingAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = HoldingAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/holdings/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<HoldingAndCursor> navigateHoldingsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody HoldingFilterAndCursorFilter holdingFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"holdings\" : [ {    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"weightedAveragePrice\" : 1.231513536777255612975068288506008684635162353515625,    \"productId\" : 7,    \"weightedAverageCost\" : 7.3862819483858839220147274318151175975799560546875,    \"distributorId\" : 5,    \"sharesBeforeDistribution\" : 2.027123023002321833274663731572218239307403564453125,    \"capitalGained\" : 6.02745618307040320615897144307382404804229736328125,    \"dealingInstrumentType\" : \"FUND\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"shares\" : 9.301444243932575517419536481611430644989013671875,    \"sharesAfterDistribution\" : 3.61607674925191080461672754609026014804840087890625,    \"fiscalShares\" : 2.3021358869347654518833223846741020679473876953125,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"contractId\" : 1,    \"subdistributorId\" : 4,    \"dealingFundHouseId\" : 5,    \"currencyCode\" : \"currencyCode\"  }, {    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"weightedAveragePrice\" : 1.231513536777255612975068288506008684635162353515625,    \"productId\" : 7,    \"weightedAverageCost\" : 7.3862819483858839220147274318151175975799560546875,    \"distributorId\" : 5,    \"sharesBeforeDistribution\" : 2.027123023002321833274663731572218239307403564453125,    \"capitalGained\" : 6.02745618307040320615897144307382404804229736328125,    \"dealingInstrumentType\" : \"FUND\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"shares\" : 9.301444243932575517419536481611430644989013671875,    \"sharesAfterDistribution\" : 3.61607674925191080461672754609026014804840087890625,    \"fiscalShares\" : 2.3021358869347654518833223846741020679473876953125,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"contractId\" : 1,    \"subdistributorId\" : 4,    \"dealingFundHouseId\" : 5,    \"currencyCode\" : \"currencyCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateOperationalPorfolioContractMonitoring", nickname = "navigateOperationalPorfolioContractMonitoringUsingPOST", notes = "", response = OrderMonitoringAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OrderMonitoringAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/monitoring/rebalances/contracts/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OrderMonitoringAndCursor> navigateOperationalPorfolioContractMonitoringUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body") @Valid @RequestBody OrderMonitoringFilterAndCursorFilter orderMonitoringFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"orderMonitoring\" : [ {    \"confirmationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalReference\" : 6.02745618307040320615897144307382404804229736328125,    \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"requestedNetAmount\" : 1.46581298050294517310021547018550336360931396484375,    \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"transactionTypeCode\" : \"transactionTypeCode\",    \"awardedNetAmount\" : 0.80082819046101150206595775671303272247314453125,    \"transactionId\" : 5,    \"statusCode\" : \"statusCode\"  }, {    \"confirmationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalReference\" : 6.02745618307040320615897144307382404804229736328125,    \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"requestedNetAmount\" : 1.46581298050294517310021547018550336360931396484375,    \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"transactionTypeCode\" : \"transactionTypeCode\",    \"awardedNetAmount\" : 0.80082819046101150206595775671303272247314453125,    \"transactionId\" : 5,    \"statusCode\" : \"statusCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateOperationalPorfolioTransactionOrders", nickname = "navigateOperationalPorfolioTransactionOrdersUsingPOST", notes = "", response = OperationalPortfolioTransactionAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioTransactionAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/transactions/orders/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioTransactionAndCursor> navigateOperationalPorfolioTransactionOrdersUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body") @Valid @RequestBody TransactionMonitoringFilterAndCursorFilter transactionMonitoringFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"operationalPortfolioTransactions\" : [ {    \"operationalPortfolioMovement\" : {      \"authorizationNeeded\" : true,      \"associatedContractExternalReference\" : \"associatedContractExternalReference\",      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"associatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"operationalPortfolioId\" : 1,      \"operationalPortfolioMovementDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"productId\" : 1,      \"requestedShares\" : 6.8468526983526398765889098285697400569915771484375,      \"associatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"distributorId\" : 4,      \"contract\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"movementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"contractExternalReference\" : \"contractExternalReference\",      \"associatedContract\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"externalReference\" : \"externalReference\",      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"movementType\" : \"DIRECT\",      \"operationalPortfolioMovementTypeCode\" : \"operationalPortfolioMovementTypeCode\",      \"scope\" : \"MODEL_PORTFOLIO\",      \"requestedAmount\" : 1.489415909854170383397331534069962799549102783203125,      \"id\" : 7,      \"subdistributorId\" : 7,      \"currencyCode\" : \"currencyCode\"    },    \"operationalPorfolioOrders\" : [ {      \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,      \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",      \"operationalPortfolioDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,      \"spanishTransferId\" : \"spanishTransferId\",      \"priceValue\" : \"priceValue\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioAssociatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"transactionTypeCode\" : \"transactionTypeCode\",      \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",      \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,      \"externalReference\" : 1,      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",      \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",      \"operationalPortfolioDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"operationalPortfolioOrderSettingsData\" : {        \"statusOrderCode\" : \"statusOrderCode\",        \"errorCode\" : \"errorCode\"      },      \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"id\" : 5,      \"currencyCode\" : \"currencyCode\",      \"operationalPortfolioAssociatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,      \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",      \"operationalPortfolioDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,      \"spanishTransferId\" : \"spanishTransferId\",      \"priceValue\" : \"priceValue\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioAssociatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"transactionTypeCode\" : \"transactionTypeCode\",      \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",      \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,      \"externalReference\" : 1,      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",      \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",      \"operationalPortfolioDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"operationalPortfolioOrderSettingsData\" : {        \"statusOrderCode\" : \"statusOrderCode\",        \"errorCode\" : \"errorCode\"      },      \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"id\" : 5,      \"currencyCode\" : \"currencyCode\",      \"operationalPortfolioAssociatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ]  }, {    \"operationalPortfolioMovement\" : {      \"authorizationNeeded\" : true,      \"associatedContractExternalReference\" : \"associatedContractExternalReference\",      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"associatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"operationalPortfolioId\" : 1,      \"operationalPortfolioMovementDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"productId\" : 1,      \"requestedShares\" : 6.8468526983526398765889098285697400569915771484375,      \"associatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"distributorId\" : 4,      \"contract\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"movementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"contractExternalReference\" : \"contractExternalReference\",      \"associatedContract\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"externalReference\" : \"externalReference\",      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"movementType\" : \"DIRECT\",      \"operationalPortfolioMovementTypeCode\" : \"operationalPortfolioMovementTypeCode\",      \"scope\" : \"MODEL_PORTFOLIO\",      \"requestedAmount\" : 1.489415909854170383397331534069962799549102783203125,      \"id\" : 7,      \"subdistributorId\" : 7,      \"currencyCode\" : \"currencyCode\"    },    \"operationalPorfolioOrders\" : [ {      \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,      \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",      \"operationalPortfolioDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,      \"spanishTransferId\" : \"spanishTransferId\",      \"priceValue\" : \"priceValue\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioAssociatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"transactionTypeCode\" : \"transactionTypeCode\",      \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",      \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,      \"externalReference\" : 1,      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",      \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",      \"operationalPortfolioDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"operationalPortfolioOrderSettingsData\" : {        \"statusOrderCode\" : \"statusOrderCode\",        \"errorCode\" : \"errorCode\"      },      \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"id\" : 5,      \"currencyCode\" : \"currencyCode\",      \"operationalPortfolioAssociatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,      \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",      \"operationalPortfolioDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,      \"spanishTransferId\" : \"spanishTransferId\",      \"priceValue\" : \"priceValue\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioAssociatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"transactionTypeCode\" : \"transactionTypeCode\",      \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",      \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,      \"externalReference\" : 1,      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",      \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",      \"operationalPortfolioDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"operationalPortfolioOrderSettingsData\" : {        \"statusOrderCode\" : \"statusOrderCode\",        \"errorCode\" : \"errorCode\"      },      \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"id\" : 5,      \"currencyCode\" : \"currencyCode\",      \"operationalPortfolioAssociatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ]  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateOperationalPortfolioCompositions", nickname = "navigateOperationalPortfolioCompositionsUsingPOST", notes = "", response = OperationalPortfolioCompositionAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioCompositionAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/compositions/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioCompositionAndCursor> navigateOperationalPortfolioCompositionsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The PageFilter object to use") @Valid @RequestBody CursorFilter cursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"operationalPortfolioCompositions\" : [ {    \"operationalPortfolioId\" : 5,    \"compositionDealingInstruments\" : [ {      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,      \"dealingInstrumentType\" : \"FUND\",      \"errorCode\" : \"errorCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,      \"dealingInstrumentType\" : \"FUND\",      \"errorCode\" : \"errorCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ],    \"distributorId\" : 1,    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"totalWeight\" : 2.3021358869347654518833223846741020679473876953125,    \"historical\" : true,    \"id\" : 5,    \"statusCode\" : \"statusCode\"  }, {    \"operationalPortfolioId\" : 5,    \"compositionDealingInstruments\" : [ {      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,      \"dealingInstrumentType\" : \"FUND\",      \"errorCode\" : \"errorCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,      \"dealingInstrumentType\" : \"FUND\",      \"errorCode\" : \"errorCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ],    \"distributorId\" : 1,    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"totalWeight\" : 2.3021358869347654518833223846741020679473876953125,    \"historical\" : true,    \"id\" : 5,    \"statusCode\" : \"statusCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateOperationalPortfolioHistoricalCompositions", nickname = "navigateOperationalPortfolioHistoricalCompositionsUsingPOST", notes = "", response = OperationalPortfolioCompositionAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioCompositionAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/compositions/historical/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioCompositionAndCursor> navigateOperationalPortfolioHistoricalCompositionsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "The PageFilter object to use") @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"operationalPortfolioCompositions\" : [ {    \"operationalPortfolioId\" : 5,    \"compositionDealingInstruments\" : [ {      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,      \"dealingInstrumentType\" : \"FUND\",      \"errorCode\" : \"errorCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,      \"dealingInstrumentType\" : \"FUND\",      \"errorCode\" : \"errorCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ],    \"distributorId\" : 1,    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"totalWeight\" : 2.3021358869347654518833223846741020679473876953125,    \"historical\" : true,    \"id\" : 5,    \"statusCode\" : \"statusCode\"  }, {    \"operationalPortfolioId\" : 5,    \"compositionDealingInstruments\" : [ {      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,      \"dealingInstrumentType\" : \"FUND\",      \"errorCode\" : \"errorCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,      \"dealingInstrumentType\" : \"FUND\",      \"errorCode\" : \"errorCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ],    \"distributorId\" : 1,    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"totalWeight\" : 2.3021358869347654518833223846741020679473876953125,    \"historical\" : true,    \"id\" : 5,    \"statusCode\" : \"statusCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateOperationalPortfolioOrderAuthorizations", nickname = "navigateOperationalPortfolioOrderAuthorizationsUsingPOST", notes = "List of operational portfolio order authorization filtering by different parameters", response = OperationalPortfolioTransactionAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioTransactionAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/transactions/orders/authorize/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioTransactionAndCursor> navigateOperationalPortfolioOrderAuthorizationsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body") @Valid @RequestBody OperationalPortfolioMovementFilterAndCursorFilter operationalPortfolioMovementFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"operationalPortfolioTransactions\" : [ {    \"operationalPortfolioMovement\" : {      \"authorizationNeeded\" : true,      \"associatedContractExternalReference\" : \"associatedContractExternalReference\",      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"associatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"operationalPortfolioId\" : 1,      \"operationalPortfolioMovementDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"productId\" : 1,      \"requestedShares\" : 6.8468526983526398765889098285697400569915771484375,      \"associatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"distributorId\" : 4,      \"contract\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"movementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"contractExternalReference\" : \"contractExternalReference\",      \"associatedContract\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"externalReference\" : \"externalReference\",      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"movementType\" : \"DIRECT\",      \"operationalPortfolioMovementTypeCode\" : \"operationalPortfolioMovementTypeCode\",      \"scope\" : \"MODEL_PORTFOLIO\",      \"requestedAmount\" : 1.489415909854170383397331534069962799549102783203125,      \"id\" : 7,      \"subdistributorId\" : 7,      \"currencyCode\" : \"currencyCode\"    },    \"operationalPorfolioOrders\" : [ {      \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,      \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",      \"operationalPortfolioDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,      \"spanishTransferId\" : \"spanishTransferId\",      \"priceValue\" : \"priceValue\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioAssociatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"transactionTypeCode\" : \"transactionTypeCode\",      \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",      \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,      \"externalReference\" : 1,      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",      \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",      \"operationalPortfolioDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"operationalPortfolioOrderSettingsData\" : {        \"statusOrderCode\" : \"statusOrderCode\",        \"errorCode\" : \"errorCode\"      },      \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"id\" : 5,      \"currencyCode\" : \"currencyCode\",      \"operationalPortfolioAssociatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,      \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",      \"operationalPortfolioDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,      \"spanishTransferId\" : \"spanishTransferId\",      \"priceValue\" : \"priceValue\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioAssociatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"transactionTypeCode\" : \"transactionTypeCode\",      \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",      \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,      \"externalReference\" : 1,      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",      \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",      \"operationalPortfolioDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"operationalPortfolioOrderSettingsData\" : {        \"statusOrderCode\" : \"statusOrderCode\",        \"errorCode\" : \"errorCode\"      },      \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"id\" : 5,      \"currencyCode\" : \"currencyCode\",      \"operationalPortfolioAssociatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ]  }, {    \"operationalPortfolioMovement\" : {      \"authorizationNeeded\" : true,      \"associatedContractExternalReference\" : \"associatedContractExternalReference\",      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"associatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"operationalPortfolioId\" : 1,      \"operationalPortfolioMovementDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"productId\" : 1,      \"requestedShares\" : 6.8468526983526398765889098285697400569915771484375,      \"associatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"distributorId\" : 4,      \"contract\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"movementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"contractExternalReference\" : \"contractExternalReference\",      \"associatedContract\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"externalReference\" : \"externalReference\",      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"movementType\" : \"DIRECT\",      \"operationalPortfolioMovementTypeCode\" : \"operationalPortfolioMovementTypeCode\",      \"scope\" : \"MODEL_PORTFOLIO\",      \"requestedAmount\" : 1.489415909854170383397331534069962799549102783203125,      \"id\" : 7,      \"subdistributorId\" : 7,      \"currencyCode\" : \"currencyCode\"    },    \"operationalPorfolioOrders\" : [ {      \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,      \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",      \"operationalPortfolioDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,      \"spanishTransferId\" : \"spanishTransferId\",      \"priceValue\" : \"priceValue\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioAssociatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"transactionTypeCode\" : \"transactionTypeCode\",      \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",      \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,      \"externalReference\" : 1,      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",      \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",      \"operationalPortfolioDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"operationalPortfolioOrderSettingsData\" : {        \"statusOrderCode\" : \"statusOrderCode\",        \"errorCode\" : \"errorCode\"      },      \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"id\" : 5,      \"currencyCode\" : \"currencyCode\",      \"operationalPortfolioAssociatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,      \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",      \"operationalPortfolioDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,      \"spanishTransferId\" : \"spanishTransferId\",      \"priceValue\" : \"priceValue\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioAssociatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"transactionTypeCode\" : \"transactionTypeCode\",      \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",      \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,      \"externalReference\" : 1,      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",      \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",      \"operationalPortfolioDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"operationalPortfolioOrderSettingsData\" : {        \"statusOrderCode\" : \"statusOrderCode\",        \"errorCode\" : \"errorCode\"      },      \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"id\" : 5,      \"currencyCode\" : \"currencyCode\",      \"operationalPortfolioAssociatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ]  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateOperationalPortfolioSummaries", nickname = "navigateOperationalPortfolioSummariesUsingPOST", notes = "", response = OperationalPortfolioSummaryAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioSummaryAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/summaries/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioSummaryAndCursor> navigateOperationalPortfolioSummariesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody OperationalPortfolioFilterAndCursorFilter operationalPortfolioFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"operationalPortfolioSummaries\" : [ {    \"operationalPortfolioBasicData\" : {      \"productId\" : 5,      \"numberContracts\" : 1,      \"distributorId\" : 6,      \"name\" : \"name\",      \"statusCode\" : \"statusCode\"    },    \"id\" : 0  }, {    \"operationalPortfolioBasicData\" : {      \"productId\" : 5,      \"numberContracts\" : 1,      \"distributorId\" : 6,      \"name\" : \"name\",      \"statusCode\" : \"statusCode\"    },    \"id\" : 0  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateRealTimeHoldings", nickname = "navigateRealTimeHoldingsUsingPOST", notes = "List of Holdings in real time filtering by contract", response = HoldingAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = HoldingAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/holdings/realTime/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<HoldingAndCursor> navigateRealTimeHoldingsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody RealTimeHoldingFilterAndCursorFilter realTimeHoldingFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"holdings\" : [ {    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"weightedAveragePrice\" : 1.231513536777255612975068288506008684635162353515625,    \"productId\" : 7,    \"weightedAverageCost\" : 7.3862819483858839220147274318151175975799560546875,    \"distributorId\" : 5,    \"sharesBeforeDistribution\" : 2.027123023002321833274663731572218239307403564453125,    \"capitalGained\" : 6.02745618307040320615897144307382404804229736328125,    \"dealingInstrumentType\" : \"FUND\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"shares\" : 9.301444243932575517419536481611430644989013671875,    \"sharesAfterDistribution\" : 3.61607674925191080461672754609026014804840087890625,    \"fiscalShares\" : 2.3021358869347654518833223846741020679473876953125,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"contractId\" : 1,    \"subdistributorId\" : 4,    \"dealingFundHouseId\" : 5,    \"currencyCode\" : \"currencyCode\"  }, {    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"weightedAveragePrice\" : 1.231513536777255612975068288506008684635162353515625,    \"productId\" : 7,    \"weightedAverageCost\" : 7.3862819483858839220147274318151175975799560546875,    \"distributorId\" : 5,    \"sharesBeforeDistribution\" : 2.027123023002321833274663731572218239307403564453125,    \"capitalGained\" : 6.02745618307040320615897144307382404804229736328125,    \"dealingInstrumentType\" : \"FUND\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"shares\" : 9.301444243932575517419536481611430644989013671875,    \"sharesAfterDistribution\" : 3.61607674925191080461672754609026014804840087890625,    \"fiscalShares\" : 2.3021358869347654518833223846741020679473876953125,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"contractId\" : 1,    \"subdistributorId\" : 4,    \"dealingFundHouseId\" : 5,    \"currencyCode\" : \"currencyCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateRebatesAsExcel", nickname = "navigateRebatesAsExcelUsingPOST", notes = "List all daily rebates for the {Distributor} returned into an Excel file.", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/rebates/navigate/xls",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateRebatesAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody RebateFilterAndCursorFilter rebateFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateRebates", nickname = "navigateRebatesUsingPOST", notes = "List all daily rebates for the {Distributor}.", response = RebateAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = RebateAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/rebates/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<RebateAndCursor> navigateRebatesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody RebateFilterAndCursorFilter rebateFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"rebates\" : [ {    \"exchangeRateApplied\" : 5.962133916683182377482808078639209270477294921875,    \"shares\" : 2.3021358869347654518833223846741020679473876953125,    \"basisPoints\" : 1.46581298050294517310021547018550336360931396484375,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"rebatePercentage\" : 5.63737665663332876420099637471139430999755859375,    \"aum\" : 6.02745618307040320615897144307382404804229736328125,    \"appliedDealingFundHouseFee\" : 0.80082819046101150206595775671303272247314453125,    \"basicRebate\" : {      \"productId\" : 6,      \"rebateValue\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"amount\" : 1.46581298050294517310021547018550336360931396484375,        \"currencyCode\" : \"currencyCode\"      },      \"distributorId\" : 0,      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }  }, {    \"exchangeRateApplied\" : 5.962133916683182377482808078639209270477294921875,    \"shares\" : 2.3021358869347654518833223846741020679473876953125,    \"basisPoints\" : 1.46581298050294517310021547018550336360931396484375,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"rebatePercentage\" : 5.63737665663332876420099637471139430999755859375,    \"aum\" : 6.02745618307040320615897144307382404804229736328125,    \"appliedDealingFundHouseFee\" : 0.80082819046101150206595775671303272247314453125,    \"basicRebate\" : {      \"productId\" : 6,      \"rebateValue\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"amount\" : 1.46581298050294517310021547018550336360931396484375,        \"currencyCode\" : \"currencyCode\"      },      \"distributorId\" : 0,      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateSavingPlansAsExcel", nickname = "navigateSavingPlansAsExcelUsingPOST", notes = "Returns an excel file with a list of {SavingPlan}s", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/savingPlans/summaries/navigate/xls",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateSavingPlansAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "body") @Valid @RequestBody CursorFilter cursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateSavingPlans", nickname = "navigateSavingPlansUsingPOST", notes = "Returns list of {SavingPlan}s", response = SavingPlanSummaryAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SavingPlanSummaryAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/savingPlans/summaries/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<SavingPlanSummaryAndCursor> navigateSavingPlansUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "body") @Valid @RequestBody CursorFilter cursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"savingPlanSummaries\" : [ {    \"contractBalance\" : 6.02745618307040320615897144307382404804229736328125,    \"balance\" : 0.80082819046101150206595775671303272247314453125,    \"basicData\" : {      \"externalReference\" : \"externalReference\",      \"distributorId\" : 6,      \"subdistributorId\" : 1,      \"transactionTypeCode\" : \"transactionTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"statusCode\" : \"statusCode\"    },    \"id\" : 1  }, {    \"contractBalance\" : 6.02745618307040320615897144307382404804229736328125,    \"balance\" : 0.80082819046101150206595775671303272247314453125,    \"basicData\" : {      \"externalReference\" : \"externalReference\",      \"distributorId\" : 6,      \"subdistributorId\" : 1,      \"transactionTypeCode\" : \"transactionTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"statusCode\" : \"statusCode\"    },    \"id\" : 1  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateSettlementSummariesAsExcel", nickname = "navigateSettlementSummariesAsExcelUsingPOST", notes = "Returns an Excel file, that contains a list of settlements filtering by different parameters", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/settlements/summaries/navigate/xls",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateSettlementSummariesAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody SettlementFilterAndCursorFilter settlementFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateSettlementSummaries", nickname = "navigateSettlementSummariesUsingPOST", notes = "List of settlements filtering by different parameters", response = SettlementSummaryAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SettlementSummaryAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/settlements/summaries/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<SettlementSummaryAndCursor> navigateSettlementSummariesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody SettlementFilterAndCursorFilter settlementFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"summaries\" : [ {    \"nav\" : 0.80082819046101150206595775671303272247314453125,    \"navDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"settlementCapitalGainedData\" : {      \"capitalGained\" : 6.8468526983526398765889098285697400569915771484375,      \"capitalGainedInLocalCurrency\" : 7.4577447736837658709418974467553198337554931640625    },    \"settlementBasicData\" : {      \"productId\" : 1,      \"depositaryId\" : 4,      \"distributorId\" : 7,      \"paymentCurrencyCode\" : \"paymentCurrencyCode\",      \"settlementTransactionTypeCode\" : \"settlementTransactionTypeCode\",      \"paymentSequence\" : 1,      \"dealingInstrumentType\" : \"FUND\",      \"settlementStatusCode\" : \"settlementStatusCode\",      \"contractExternalReference\" : \"contractExternalReference\",      \"localCurrencyCode\" : \"localCurrencyCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"statusChangePermitted\" : true,      \"exchangeRateApplied\" : 1.231513536777255612975068288506008684635162353515625,      \"externalReference\" : \"externalReference\",      \"transactionExternalReference\" : \"transactionExternalReference\",      \"contractId\" : 3,      \"dealingFundHouseId\" : 2,      \"currencyCode\" : \"currencyCode\"    },    \"settlementAmountData\" : {      \"awardedGrossAmount\" : 5.962133916683182377482808078639209270477294921875,      \"requestedNetAmount\" : 7.061401241503109105224211816675961017608642578125,      \"requestedGrossAmount\" : 2.3021358869347654518833223846741020679473876953125,      \"awardedNetAmount\" : 5.63737665663332876420099637471139430999755859375,      \"settledAmount\" : 9.301444243932575517419536481611430644989013671875    },    \"settlementSettingsData\" : {      \"grouped\" : true,      \"groupedTransaction\" : true,      \"numberGroupedTransactions\" : 9,      \"groupedTransactionsConfirmed\" : true    },    \"settlementFeeData\" : {      \"feePerDealingInstrument\" : 9.965781217890562260208753286860883235931396484375,      \"amount\" : 4.9652184929849543237878606305457651615142822265625,      \"appliedDealingFundHouseFee\" : 5.02500479152029466689555192715488374233245849609375    },    \"settledAmount\" : 1.46581298050294517310021547018550336360931396484375,    \"settlementDateData\" : {      \"settledDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"paymentDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transactionOrderedDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"settlementEtfData\" : {      \"brokerId\" : 1,      \"stockExchangeId\" : \"stockExchangeId\"    },    \"settlementSharesData\" : {      \"awardedShares\" : 6.683562403749608193948006373830139636993408203125,      \"requestedShares\" : 8.7620420127490010742121739895083010196685791015625    },    \"id\" : \"id\",    \"settlementsWithholdingData\" : {      \"withheldAmount\" : 9.0183481860707832566959041287191212177276611328125    },    \"pendingAmount\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"nav\" : 0.80082819046101150206595775671303272247314453125,    \"navDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"settlementCapitalGainedData\" : {      \"capitalGained\" : 6.8468526983526398765889098285697400569915771484375,      \"capitalGainedInLocalCurrency\" : 7.4577447736837658709418974467553198337554931640625    },    \"settlementBasicData\" : {      \"productId\" : 1,      \"depositaryId\" : 4,      \"distributorId\" : 7,      \"paymentCurrencyCode\" : \"paymentCurrencyCode\",      \"settlementTransactionTypeCode\" : \"settlementTransactionTypeCode\",      \"paymentSequence\" : 1,      \"dealingInstrumentType\" : \"FUND\",      \"settlementStatusCode\" : \"settlementStatusCode\",      \"contractExternalReference\" : \"contractExternalReference\",      \"localCurrencyCode\" : \"localCurrencyCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"statusChangePermitted\" : true,      \"exchangeRateApplied\" : 1.231513536777255612975068288506008684635162353515625,      \"externalReference\" : \"externalReference\",      \"transactionExternalReference\" : \"transactionExternalReference\",      \"contractId\" : 3,      \"dealingFundHouseId\" : 2,      \"currencyCode\" : \"currencyCode\"    },    \"settlementAmountData\" : {      \"awardedGrossAmount\" : 5.962133916683182377482808078639209270477294921875,      \"requestedNetAmount\" : 7.061401241503109105224211816675961017608642578125,      \"requestedGrossAmount\" : 2.3021358869347654518833223846741020679473876953125,      \"awardedNetAmount\" : 5.63737665663332876420099637471139430999755859375,      \"settledAmount\" : 9.301444243932575517419536481611430644989013671875    },    \"settlementSettingsData\" : {      \"grouped\" : true,      \"groupedTransaction\" : true,      \"numberGroupedTransactions\" : 9,      \"groupedTransactionsConfirmed\" : true    },    \"settlementFeeData\" : {      \"feePerDealingInstrument\" : 9.965781217890562260208753286860883235931396484375,      \"amount\" : 4.9652184929849543237878606305457651615142822265625,      \"appliedDealingFundHouseFee\" : 5.02500479152029466689555192715488374233245849609375    },    \"settledAmount\" : 1.46581298050294517310021547018550336360931396484375,    \"settlementDateData\" : {      \"settledDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"paymentDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transactionOrderedDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"settlementEtfData\" : {      \"brokerId\" : 1,      \"stockExchangeId\" : \"stockExchangeId\"    },    \"settlementSharesData\" : {      \"awardedShares\" : 6.683562403749608193948006373830139636993408203125,      \"requestedShares\" : 8.7620420127490010742121739895083010196685791015625    },    \"id\" : \"id\",    \"settlementsWithholdingData\" : {      \"withheldAmount\" : 9.0183481860707832566959041287191212177276611328125    },    \"pendingAmount\" : 6.02745618307040320615897144307382404804229736328125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateSpanishTransfersAsExcel", nickname = "navigateSpanishTransfersAsExcelUsingPOST", notes = "Returns an Excel file, that contains a list of {SpanishTransfer}", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/summaries/navigate/xls",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateSpanishTransfersAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "filter", required = true) @Valid @RequestBody SpanishTransferFilterAndCursorFilter spanishTransferFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateSpanishTransfers", nickname = "navigateSpanishTransfersUsingPOST", notes = "Returns a list of {SpanishTransfer}", response = SpanishTransferSummaryAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SpanishTransferSummaryAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/summaries/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<SpanishTransferSummaryAndCursor> navigateSpanishTransfersUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "filter", required = true) @Valid @RequestBody SpanishTransferFilterAndCursorFilter spanishTransferFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"summaries\" : [ {    \"requestStatusCode\" : \"requestStatusCode\",    \"sourceItem\" : {      \"marketer\" : {        \"entityCnmvCode\" : \"entityCnmvCode\",        \"entityCnmvNif\" : \"entityCnmvNif\",        \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",        \"dealingInstrumentName\" : \"dealingInstrumentName\",        \"currentAccountCode\" : \"currentAccountCode\",        \"entityName\" : \"entityName\",        \"dealingInstrumentNif\" : \"dealingInstrumentNif\"      },      \"etfData\" : {        \"brokerId\" : 2,        \"stockExchangeId\" : \"stockExchangeId\"      },      \"feeData\" : {        \"secondSpanishTransferFeeAmount\" : 3.61607674925191080461672754609026014804840087890625,        \"firstSpanishTransferFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"firstSpanishTransferFeePercentage\" : 9.301444243932575517419536481611430644989013671875,        \"secondSpanishTransferFeePercentage\" : 2.027123023002321833274663731572218239307403564453125      },      \"omnibus\" : true,      \"distributorId\" : 5,      \"dealingInstrumentExternalCodeKeyValues\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ],      \"dealingInstrumentType\" : \"FUND\",      \"contractExternalReference\" : \"contractExternalReference\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"spanishTransferId\" : \"spanishTransferId\",    \"rejectionCauseCode\" : \"rejectionCauseCode\",    \"basicData\" : {      \"externalReference\" : \"externalReference\",      \"shares\" : 1.46581298050294517310021547018550336360931396484375,      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"requestType\" : \"OUTSIDE\",      \"distributorId\" : 6,      \"transferType\" : \"TOTAL\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transferClass\" : \"ENTRY\",      \"subdistributorId\" : 5,      \"statusCode\" : \"statusCode\"    },    \"destinationItem\" : {      \"marketer\" : {        \"entityCnmvCode\" : \"entityCnmvCode\",        \"entityCnmvNif\" : \"entityCnmvNif\",        \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",        \"dealingInstrumentName\" : \"dealingInstrumentName\",        \"currentAccountCode\" : \"currentAccountCode\",        \"entityName\" : \"entityName\",        \"dealingInstrumentNif\" : \"dealingInstrumentNif\"      },      \"etfData\" : {        \"brokerId\" : 2,        \"stockExchangeId\" : \"stockExchangeId\"      },      \"feeData\" : {        \"secondSpanishTransferFeeAmount\" : 3.61607674925191080461672754609026014804840087890625,        \"firstSpanishTransferFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"firstSpanishTransferFeePercentage\" : 9.301444243932575517419536481611430644989013671875,        \"secondSpanishTransferFeePercentage\" : 2.027123023002321833274663731572218239307403564453125      },      \"omnibus\" : true,      \"distributorId\" : 5,      \"dealingInstrumentExternalCodeKeyValues\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ],      \"dealingInstrumentType\" : \"FUND\",      \"contractExternalReference\" : \"contractExternalReference\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    }  }, {    \"requestStatusCode\" : \"requestStatusCode\",    \"sourceItem\" : {      \"marketer\" : {        \"entityCnmvCode\" : \"entityCnmvCode\",        \"entityCnmvNif\" : \"entityCnmvNif\",        \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",        \"dealingInstrumentName\" : \"dealingInstrumentName\",        \"currentAccountCode\" : \"currentAccountCode\",        \"entityName\" : \"entityName\",        \"dealingInstrumentNif\" : \"dealingInstrumentNif\"      },      \"etfData\" : {        \"brokerId\" : 2,        \"stockExchangeId\" : \"stockExchangeId\"      },      \"feeData\" : {        \"secondSpanishTransferFeeAmount\" : 3.61607674925191080461672754609026014804840087890625,        \"firstSpanishTransferFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"firstSpanishTransferFeePercentage\" : 9.301444243932575517419536481611430644989013671875,        \"secondSpanishTransferFeePercentage\" : 2.027123023002321833274663731572218239307403564453125      },      \"omnibus\" : true,      \"distributorId\" : 5,      \"dealingInstrumentExternalCodeKeyValues\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ],      \"dealingInstrumentType\" : \"FUND\",      \"contractExternalReference\" : \"contractExternalReference\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"spanishTransferId\" : \"spanishTransferId\",    \"rejectionCauseCode\" : \"rejectionCauseCode\",    \"basicData\" : {      \"externalReference\" : \"externalReference\",      \"shares\" : 1.46581298050294517310021547018550336360931396484375,      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"requestType\" : \"OUTSIDE\",      \"distributorId\" : 6,      \"transferType\" : \"TOTAL\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transferClass\" : \"ENTRY\",      \"subdistributorId\" : 5,      \"statusCode\" : \"statusCode\"    },    \"destinationItem\" : {      \"marketer\" : {        \"entityCnmvCode\" : \"entityCnmvCode\",        \"entityCnmvNif\" : \"entityCnmvNif\",        \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",        \"dealingInstrumentName\" : \"dealingInstrumentName\",        \"currentAccountCode\" : \"currentAccountCode\",        \"entityName\" : \"entityName\",        \"dealingInstrumentNif\" : \"dealingInstrumentNif\"      },      \"etfData\" : {        \"brokerId\" : 2,        \"stockExchangeId\" : \"stockExchangeId\"      },      \"feeData\" : {        \"secondSpanishTransferFeeAmount\" : 3.61607674925191080461672754609026014804840087890625,        \"firstSpanishTransferFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"firstSpanishTransferFeePercentage\" : 9.301444243932575517419536481611430644989013671875,        \"secondSpanishTransferFeePercentage\" : 2.027123023002321833274663731572218239307403564453125      },      \"omnibus\" : true,      \"distributorId\" : 5,      \"dealingInstrumentExternalCodeKeyValues\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ],      \"dealingInstrumentType\" : \"FUND\",      \"contractExternalReference\" : \"contractExternalReference\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateStockTransferSummariesAsExcel", nickname = "navigateStockTransferSummariesAsExcelUsingPOST", notes = "List of stock transfers summaries filtering by different parameters returned into an Excel file", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/stockTransfers/summaries/navigate/xls",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateStockTransferSummariesAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "filter") @Valid @RequestBody StockTransferFilterAndCursorFilter stockTransferFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateStockTransferSummaries", nickname = "navigateStockTransferSummariesUsingPOST", notes = "List of stock transfers summaries filtering by different parameters", response = StockTransferSummaryAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = StockTransferSummaryAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/stockTransfers/summaries/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<StockTransferSummaryAndCursor> navigateStockTransferSummariesUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "filter") @Valid @RequestBody StockTransferFilterAndCursorFilter stockTransferFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"summaries\" : [ {    \"stockTransferBasicData\" : {      \"productId\" : 5,      \"stockTransferStatusCode\" : \"stockTransferStatusCode\",      \"distributorId\" : 1,      \"stockTransferTypeCode\" : \"stockTransferTypeCode\",      \"dealingInstrumentType\" : \"FUND\",      \"categoryCode\" : \"categoryCode\",      \"contractExternalReference\" : \"contractExternalReference\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"externalReference\" : \"externalReference\",      \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"additionalReferenceSwift\" : \"additionalReferenceSwift\",      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"additionalReference\" : \"additionalReference\",      \"subdistributorId\" : 5,      \"dealingFundHouseId\" : 6,      \"followupDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"stockTransferSettingsData\" : {      \"applicationFormAccessible\" : true,      \"errorCode\" : \"errorCode\",      \"platformAccount\" : \"platformAccount\",      \"signedApplicationFormAccessible\" : true,      \"platformCode\" : \"platformCode\",      \"taxTransactionHistory\" : true    },    \"stockTransferSharesData\" : {      \"sharesAfterDistribution\" : 2.027123023002321833274663731572218239307403564453125,      \"requestedSharesAsWords\" : \"requestedSharesAsWords\",      \"requestedShares\" : 3.61607674925191080461672754609026014804840087890625,      \"sharesBeforeDistribution\" : 4.1456080298839363962315474054776132106781005859375    },    \"id\" : \"id\",    \"stockTransferTransactionData\" : {      \"externalReference\" : \"externalReference\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }  }, {    \"stockTransferBasicData\" : {      \"productId\" : 5,      \"stockTransferStatusCode\" : \"stockTransferStatusCode\",      \"distributorId\" : 1,      \"stockTransferTypeCode\" : \"stockTransferTypeCode\",      \"dealingInstrumentType\" : \"FUND\",      \"categoryCode\" : \"categoryCode\",      \"contractExternalReference\" : \"contractExternalReference\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"externalReference\" : \"externalReference\",      \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"additionalReferenceSwift\" : \"additionalReferenceSwift\",      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"additionalReference\" : \"additionalReference\",      \"subdistributorId\" : 5,      \"dealingFundHouseId\" : 6,      \"followupDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"stockTransferSettingsData\" : {      \"applicationFormAccessible\" : true,      \"errorCode\" : \"errorCode\",      \"platformAccount\" : \"platformAccount\",      \"signedApplicationFormAccessible\" : true,      \"platformCode\" : \"platformCode\",      \"taxTransactionHistory\" : true    },    \"stockTransferSharesData\" : {      \"sharesAfterDistribution\" : 2.027123023002321833274663731572218239307403564453125,      \"requestedSharesAsWords\" : \"requestedSharesAsWords\",      \"requestedShares\" : 3.61607674925191080461672754609026014804840087890625,      \"sharesBeforeDistribution\" : 4.1456080298839363962315474054776132106781005859375    },    \"id\" : \"id\",    \"stockTransferTransactionData\" : {      \"externalReference\" : \"externalReference\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateTaxTransactionsByContractAsExcel", nickname = "navigateTaxTransactionsByContractAsExcelUsingPOST", notes = "List of TaxTransactions filtering by different parameters", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/breakdowns/taxTransactions/navigate/xls",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateTaxTransactionsByContractAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "filter", required = true) @Valid @RequestBody TaxTransactionFilterAndCursorFilter taxTransactionFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateTaxTransactionsByContract", nickname = "navigateTaxTransactionsByContractUsingPOST", notes = "List of TaxTransactions filtering by different parameters", response = TaxTransactionAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = TaxTransactionAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/breakdowns/taxTransactions/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<TaxTransactionAndCursor> navigateTaxTransactionsByContractUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "filter", required = true) @Valid @RequestBody TaxTransactionFilterAndCursorFilter taxTransactionFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"taxTransactions\" : [ {    \"exchangeRateApplied\" : 3.61607674925191080461672754609026014804840087890625,    \"shares\" : 7.3862819483858839220147274318151175975799560546875,    \"amount\" : 9.301444243932575517419536481611430644989013671875,    \"associatedTransaction\" : {      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"orderNumber\" : 4.1456080298839363962315474054776132106781005859375,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"fee\" : 2.027123023002321833274663731572218239307403564453125,    \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"spanishMarketData\" : {      \"valuationUntil2006\" : 1.024645700144157789424070870154537260532379150390625,      \"valuationUntil2005\" : 1.231513536777255612975068288506008684635162353515625    }  }, {    \"exchangeRateApplied\" : 3.61607674925191080461672754609026014804840087890625,    \"shares\" : 7.3862819483858839220147274318151175975799560546875,    \"amount\" : 9.301444243932575517419536481611430644989013671875,    \"associatedTransaction\" : {      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"orderNumber\" : 4.1456080298839363962315474054776132106781005859375,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"fee\" : 2.027123023002321833274663731572218239307403564453125,    \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"spanishMarketData\" : {      \"valuationUntil2006\" : 1.024645700144157789424070870154537260532379150390625,      \"valuationUntil2005\" : 1.231513536777255612975068288506008684635162353515625    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateTaxTransactionsBySpanishTransferAsExcel", nickname = "navigateTaxTransactionsBySpanishTransferAsExcelUsingPOST", notes = "List of {TaxTransaction}s associated to a {SpanishTransfer}", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/{spanishTransferId}/breakdowns/taxTransactions/navigate/xls",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateTaxTransactionsBySpanishTransferAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {SpanishTransfer}", required = true) @PathVariable("spanishTransferId") String spanishTransferId, @ApiParam(value = "filter") @Valid @RequestBody CursorFilter cursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateTaxTransactionsBySpanishTransfer", nickname = "navigateTaxTransactionsBySpanishTransferUsingPOST", notes = "List of {TaxTransaction}s associated to a {SpanishTransfer}", response = TaxTransactionAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = TaxTransactionAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/{spanishTransferId}/breakdowns/taxTransactions/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<TaxTransactionAndCursor> navigateTaxTransactionsBySpanishTransferUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {SpanishTransfer}", required = true) @PathVariable("spanishTransferId") String spanishTransferId, @ApiParam(value = "filter") @Valid @RequestBody CursorFilter cursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"taxTransactions\" : [ {    \"exchangeRateApplied\" : 3.61607674925191080461672754609026014804840087890625,    \"shares\" : 7.3862819483858839220147274318151175975799560546875,    \"amount\" : 9.301444243932575517419536481611430644989013671875,    \"associatedTransaction\" : {      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"orderNumber\" : 4.1456080298839363962315474054776132106781005859375,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"fee\" : 2.027123023002321833274663731572218239307403564453125,    \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"spanishMarketData\" : {      \"valuationUntil2006\" : 1.024645700144157789424070870154537260532379150390625,      \"valuationUntil2005\" : 1.231513536777255612975068288506008684635162353515625    }  }, {    \"exchangeRateApplied\" : 3.61607674925191080461672754609026014804840087890625,    \"shares\" : 7.3862819483858839220147274318151175975799560546875,    \"amount\" : 9.301444243932575517419536481611430644989013671875,    \"associatedTransaction\" : {      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"orderNumber\" : 4.1456080298839363962315474054776132106781005859375,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"fee\" : 2.027123023002321833274663731572218239307403564453125,    \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"spanishMarketData\" : {      \"valuationUntil2006\" : 1.024645700144157789424070870154537260532379150390625,      \"valuationUntil2005\" : 1.231513536777255612975068288506008684635162353515625    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateTaxTransactionsByTransaction", nickname = "navigateTaxTransactionsByTransactionUsingPOST", notes = "List of {TaxTransaction}s associated to a {Transaction}", response = TaxTransactionAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = TaxTransactionAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/transactions/{transactionId}/breakdowns/taxTransactions/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<TaxTransactionAndCursor> navigateTaxTransactionsByTransactionUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Transaction}", required = true) @PathVariable("transactionId") Long transactionId, @ApiParam(value = "filter") @Valid @RequestBody CursorFilter cursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"taxTransactions\" : [ {    \"exchangeRateApplied\" : 3.61607674925191080461672754609026014804840087890625,    \"shares\" : 7.3862819483858839220147274318151175975799560546875,    \"amount\" : 9.301444243932575517419536481611430644989013671875,    \"associatedTransaction\" : {      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"orderNumber\" : 4.1456080298839363962315474054776132106781005859375,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"fee\" : 2.027123023002321833274663731572218239307403564453125,    \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"spanishMarketData\" : {      \"valuationUntil2006\" : 1.024645700144157789424070870154537260532379150390625,      \"valuationUntil2005\" : 1.231513536777255612975068288506008684635162353515625    }  }, {    \"exchangeRateApplied\" : 3.61607674925191080461672754609026014804840087890625,    \"shares\" : 7.3862819483858839220147274318151175975799560546875,    \"amount\" : 9.301444243932575517419536481611430644989013671875,    \"associatedTransaction\" : {      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"orderNumber\" : 4.1456080298839363962315474054776132106781005859375,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"fee\" : 2.027123023002321833274663731572218239307403564453125,    \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"spanishMarketData\" : {      \"valuationUntil2006\" : 1.024645700144157789424070870154537260532379150390625,      \"valuationUntil2005\" : 1.231513536777255612975068288506008684635162353515625    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateTransactionsAsExcel", nickname = "navigateTransactionsAsExcelUsingPOST", notes = "List of transactions filtering by different parameters", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/transactions/navigate/xls",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateTransactionsAsExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody TransactionFilterAndCursorFilter transactionFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateTransactionsAsFormattedExcel", nickname = "navigateTransactionsAsFormattedExcelUsingPOST", notes = "List of transactions filtering by different parameters", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/transactions/navigate/formattedExcel",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateTransactionsAsFormattedExcelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody TransactionFilterAndCursoredExcelFilter transactionFilterAndCursoredExcelFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateTransactions", nickname = "navigateTransactionsUsingPOST", notes = "List of transactions filtering by different parameters", response = TransactionAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = TransactionAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/transactions/navigate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<TransactionAndCursor> navigateTransactionsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body") @Valid @RequestBody TransactionFilterAndCursorFilter transactionFilterAndCursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"transactions\" : [ {    \"transactionDateData\" : {      \"confirmationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"cutoffDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"cancellationDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"depositaryId\" : 5,    \"transactionComments\" : \"transactionComments\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"transactionTypeCode\" : \"transactionTypeCode\",    \"transactionSwitchData\" : {      \"associatedTransaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"associatedDealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"associatedDealingInstrumentType\" : \"FUND\",      \"switchExchangeRate\" : 8.863729185622826634016746538691222667694091796875,      \"associatedTransactionExternalReference\" : \"associatedTransactionExternalReference\",      \"associatedCurrencyCode\" : \"associatedCurrencyCode\"    },    \"transactionAmountData\" : {      \"awardedGrossAmount\" : 4.1456080298839363962315474054776132106781005859375,      \"requestedNetAmount\" : 1.024645700144157789424070870154537260532379150390625,      \"requestedGrossAmount\" : 1.231513536777255612975068288506008684635162353515625,      \"awardedNetAmount\" : 7.3862819483858839220147274318151175975799560546875,      \"settledAmount\" : 1.489415909854170383397331534069962799549102783203125    },    \"transactionEtfData\" : {      \"brokerId\" : 3,      \"estimatedExchangeRate\" : 7.14353804701230643559028976596891880035400390625,      \"exchangeRateDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"etfDealingData\" : {        \"launchPrice\" : 2.027123023002321833274663731572218239307403564453125,        \"pendingShares\" : 4.1456080298839363962315474054776132106781005859375,        \"dealingTypeCode\" : \"dealingTypeCode\",        \"validityPeriodCode\" : \"validityPeriodCode\",        \"executeShares\" : 3.61607674925191080461672754609026014804840087890625,        \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"stockExchangeId\" : \"stockExchangeId\",      \"estimatededExchangeRateToLocalCurrency\" : 0.885137473901165261480628032586537301540374755859375    },    \"orderedBy\" : \"orderedBy\",    \"transactionSpanishMarketData\" : {      \"spanishTransferId\" : \"spanishTransferId\",      \"spanishTransferExternalReference\" : \"spanishTransferExternalReference\",      \"basqueSpanishRegion\" : \"YES\",      \"capitalGainedUntil2005\" : 8.289659398142969592981899040751159191131591796875,      \"valuationUntil2006\" : 4.57393626423225096999658489949069917201995849609375,      \"valuationUntil2005\" : 6.623518433804886029747649445198476314544677734375    },    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"transactionSettingsData\" : {      \"kiidAccessible\" : true,      \"cancelable\" : true,      \"grouped\" : true,      \"numberGroupedTransactions\" : 8,      \"originatedFromSpanishTransfer\" : true,      \"dealingCurrencyPolicy\" : \"INSTRUMENT_CURRENCY\",      \"reportAccessible\" : true,      \"originatedFromOperation\" : true,      \"taxTransactionHistory\" : true,      \"pac\" : true,      \"omnibus\" : \"YES\",      \"historyAccessible\" : true,      \"operationId\" : \"operationId\",      \"groupedTransactionsConfirmed\" : true,      \"exDividend\" : true    },    \"transactionContractData\" : {      \"contractExternalReference\" : \"contractExternalReference\",      \"contractAccount\" : {        \"assetAccountCode\" : \"assetAccountCode\",        \"currentAccountCode\" : \"currentAccountCode\"      }    },    \"transactionStatusCode\" : \"transactionStatusCode\",    \"id\" : 9,    \"subdistributorId\" : 2,    \"dealingFundHouseId\" : 1,    \"averagePriceApplied\" : 0.80082819046101150206595775671303272247314453125,    \"transactionFeeData\" : {      \"exitCharge\" : 3.02057969929162428712743349024094641208648681640625,      \"expensesAppliedByAfb\" : 3.05761002410493443193217899533919990062713623046875,      \"exchangeFee\" : 7.7403518187411730622216055053286254405975341796875,      \"discount\" : 8.9695787981969115065794539987109601497650146484375,      \"appliedDealingFundHouseFee\" : 7.05877035158235610623478351044468581676483154296875,      \"depositFee\" : 0.10263654006109401706225980888120830059051513671875,      \"firstTransactionFeePercentage\" : 3.258856561904760695824734284542500972747802734375,      \"secondTransactionFeePercentage\" : 4.258773108174356281097061582840979099273681640625,      \"appliedDistributorFee\" : 6.51918095101838179772357761976309120655059814453125,      \"firstTransactionFeeAmount\" : 5.5332583970349862312332334113307297229766845703125,      \"performanceFee\" : 0.202532411323639305322785730822943150997161865234375,      \"feePerDealingInstrument\" : 7.04836565559697003635619694250635802745819091796875,      \"totalFee\" : 1.0414449161182959269211778519093059003353118896484375,      \"secondTransactionFeeAmount\" : 6.6284642750877420525057459599338471889495849609375,      \"dilutionLevy\" : 4.6523964329332461176136348512955009937286376953125,      \"initialCharge\" : 4.078845849666752343409825698472559452056884765625    },    \"productId\" : 3,    \"transactionSharesData\" : {      \"awardedShares\" : 4.4596050349586793259959449642337858676910400390625,      \"confirmedSharesBeforeDistribution\" : 0.434313988241488146968549699522554874420166015625,      \"requestedShares\" : 2.940964297482789646664969041012227535247802734375,      \"sharesAtCutoffDate\" : 1.7325933120207193116613098027301020920276641845703125,      \"confirmedSharedAfterDistribution\" : 3.901545264248647004734493748401291668415069580078125    },    \"distributorId\" : 5,    \"paymentCurrencyCode\" : \"paymentCurrencyCode\",    \"transactionDividendData\" : {      \"distributionCategory\" : \"INTEREST\",      \"dividendPayoutFrequencyCode\" : \"dividendPayoutFrequencyCode\",      \"perDealingInstrumentCorporationTax\" : 3.557195227068097320710649000830017030239105224609375,      \"netIncomeAmount\" : 6.438423552598546706349225132726132869720458984375,      \"distributionNumber\" : 1,      \"distributionPolicy\" : \"INCOME\",      \"dividendRate\" : 4.9652184929849543237878606305457651615142822265625,      \"transactionReinvestmentData\" : {        \"reinvestmentPrice\" : {          \"date\" : \"2000-01-23T04:56:07.000+00:00\",          \"priceTypeCode\" : \"priceTypeCode\",          \"currencyCode\" : \"currencyCode\",          \"value\" : 6.02745618307040320615897144307382404804229736328125        },        \"reinvestedAmount\" : 2.884162126668780246063761296682059764862060546875,        \"reinvestmentWithheldPercentage\" : 6.70401929795003592715829654480330646038055419921875,        \"reinvestmentTransactionExternalReference\" : \"reinvestmentTransactionExternalReference\",        \"reinvestmentWithheldAmount\" : 6.87805222012787620400331434211693704128265380859375,        \"reinvestedShares\" : 6.77832496304801335185175048536621034145355224609375,        \"reinvestmentWithheldAmountInLocalCurrency\" : 5.94489560761401580890606055618263781070709228515625      },      \"withholdingPolicy\" : \"DEALING_FUND_HOUSE\",      \"netEqualizationAmount\" : 9.0183481860707832566959041287191212177276611328125,      \"sharesRate\" : 1.2846590061165319429647979632136411964893341064453125,      \"perShareCorporationTax\" : 6.96511769763884558415156789124011993408203125,      \"dividendType\" : \"FINAL\",      \"grossDividendAmount\" : 6.683562403749608193948006373830139636993408203125,      \"frankedIncomePercentage\" : 9.965781217890562260208753286860883235931396484375,      \"incomeTax\" : 8.7620420127490010742121739895083010196685791015625,      \"localAccount\" : true,      \"equalizationRate\" : 5.02500479152029466689555192715488374233245849609375,      \"grossAmountRate\" : 9.3693102714106686335071572102606296539306640625,      \"unfrankedIncomePercentage\" : 3.35319334701124294184637619764544069766998291015625,      \"paymentDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"dealingInstrumentType\" : \"FUND\",    \"localCurrencyCode\" : \"localCurrencyCode\",    \"exchangeRateApplied\" : 2.3021358869347654518833223846741020679473876953125,    \"externalReference\" : \"externalReference\",    \"exchangeRateToLocalCurrency\" : 7.061401241503109105224211816675961017608642578125,    \"transactionPrepaidData\" : {      \"estimatedPriceApplied\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"prepaidAmount\" : 6.07389808578115175663469926803372800350189208984375    },    \"contractId\" : 6,    \"transactionCapitalGainedData\" : {      \"capitalGained\" : 6.8468526983526398765889098285697400569915771484375,      \"capitalGainedInLocalCurrency\" : 7.4577447736837658709418974467553198337554931640625    },    \"currencyCode\" : \"currencyCode\",    \"transactionForeignExchangeData\" : {      \"fxServiceFeeCurrencyCode\" : \"fxServiceFeeCurrencyCode\",      \"fxRate\" : 4.67894798900584873990737833082675933837890625,      \"fxServiceFeeAmount\" : 9.132027271330688478201409452594816684722900390625,      \"fxRateAppliedByAfb\" : 7.26052126480210358039357743109576404094696044921875,      \"fxServiceFeePercentage\" : 0.8774076871421565559927557842456735670566558837890625    },    \"transactionItalianRetailMarketData\" : {      \"fiscalAccruedIncome\" : 9.7029638000235660655334868351928889751434326171875,      \"weightedAveragePrice\" : 4.863159081028840091676102019846439361572265625,      \"fiscalShares\" : 0.519900201872498524124921459588222205638885498046875,      \"weightedAverageCost\" : 5.5073869641798811613853104063309729099273681640625,      \"reductionFeePercentage\" : 7.93350688173715123951978966942988336086273193359375,      \"confirmationLetter\" : true,      \"feeChargeOption\" : \"FRONTLOAD\"    },    \"transactionWithholdingData\" : {      \"withheldAmount\" : 9.2541839462678385785920909256674349308013916015625,      \"withheldAmountInLocalCurrency\" : 1.826870217705811594299802891327999532222747802734375,      \"withholdingPercentage\" : 3.502657762086400783374529055436141788959503173828125    }  }, {    \"transactionDateData\" : {      \"confirmationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"cutoffDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"cancellationDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"depositaryId\" : 5,    \"transactionComments\" : \"transactionComments\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"transactionTypeCode\" : \"transactionTypeCode\",    \"transactionSwitchData\" : {      \"associatedTransaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"associatedDealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"associatedDealingInstrumentType\" : \"FUND\",      \"switchExchangeRate\" : 8.863729185622826634016746538691222667694091796875,      \"associatedTransactionExternalReference\" : \"associatedTransactionExternalReference\",      \"associatedCurrencyCode\" : \"associatedCurrencyCode\"    },    \"transactionAmountData\" : {      \"awardedGrossAmount\" : 4.1456080298839363962315474054776132106781005859375,      \"requestedNetAmount\" : 1.024645700144157789424070870154537260532379150390625,      \"requestedGrossAmount\" : 1.231513536777255612975068288506008684635162353515625,      \"awardedNetAmount\" : 7.3862819483858839220147274318151175975799560546875,      \"settledAmount\" : 1.489415909854170383397331534069962799549102783203125    },    \"transactionEtfData\" : {      \"brokerId\" : 3,      \"estimatedExchangeRate\" : 7.14353804701230643559028976596891880035400390625,      \"exchangeRateDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"etfDealingData\" : {        \"launchPrice\" : 2.027123023002321833274663731572218239307403564453125,        \"pendingShares\" : 4.1456080298839363962315474054776132106781005859375,        \"dealingTypeCode\" : \"dealingTypeCode\",        \"validityPeriodCode\" : \"validityPeriodCode\",        \"executeShares\" : 3.61607674925191080461672754609026014804840087890625,        \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"stockExchangeId\" : \"stockExchangeId\",      \"estimatededExchangeRateToLocalCurrency\" : 0.885137473901165261480628032586537301540374755859375    },    \"orderedBy\" : \"orderedBy\",    \"transactionSpanishMarketData\" : {      \"spanishTransferId\" : \"spanishTransferId\",      \"spanishTransferExternalReference\" : \"spanishTransferExternalReference\",      \"basqueSpanishRegion\" : \"YES\",      \"capitalGainedUntil2005\" : 8.289659398142969592981899040751159191131591796875,      \"valuationUntil2006\" : 4.57393626423225096999658489949069917201995849609375,      \"valuationUntil2005\" : 6.623518433804886029747649445198476314544677734375    },    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"transactionSettingsData\" : {      \"kiidAccessible\" : true,      \"cancelable\" : true,      \"grouped\" : true,      \"numberGroupedTransactions\" : 8,      \"originatedFromSpanishTransfer\" : true,      \"dealingCurrencyPolicy\" : \"INSTRUMENT_CURRENCY\",      \"reportAccessible\" : true,      \"originatedFromOperation\" : true,      \"taxTransactionHistory\" : true,      \"pac\" : true,      \"omnibus\" : \"YES\",      \"historyAccessible\" : true,      \"operationId\" : \"operationId\",      \"groupedTransactionsConfirmed\" : true,      \"exDividend\" : true    },    \"transactionContractData\" : {      \"contractExternalReference\" : \"contractExternalReference\",      \"contractAccount\" : {        \"assetAccountCode\" : \"assetAccountCode\",        \"currentAccountCode\" : \"currentAccountCode\"      }    },    \"transactionStatusCode\" : \"transactionStatusCode\",    \"id\" : 9,    \"subdistributorId\" : 2,    \"dealingFundHouseId\" : 1,    \"averagePriceApplied\" : 0.80082819046101150206595775671303272247314453125,    \"transactionFeeData\" : {      \"exitCharge\" : 3.02057969929162428712743349024094641208648681640625,      \"expensesAppliedByAfb\" : 3.05761002410493443193217899533919990062713623046875,      \"exchangeFee\" : 7.7403518187411730622216055053286254405975341796875,      \"discount\" : 8.9695787981969115065794539987109601497650146484375,      \"appliedDealingFundHouseFee\" : 7.05877035158235610623478351044468581676483154296875,      \"depositFee\" : 0.10263654006109401706225980888120830059051513671875,      \"firstTransactionFeePercentage\" : 3.258856561904760695824734284542500972747802734375,      \"secondTransactionFeePercentage\" : 4.258773108174356281097061582840979099273681640625,      \"appliedDistributorFee\" : 6.51918095101838179772357761976309120655059814453125,      \"firstTransactionFeeAmount\" : 5.5332583970349862312332334113307297229766845703125,      \"performanceFee\" : 0.202532411323639305322785730822943150997161865234375,      \"feePerDealingInstrument\" : 7.04836565559697003635619694250635802745819091796875,      \"totalFee\" : 1.0414449161182959269211778519093059003353118896484375,      \"secondTransactionFeeAmount\" : 6.6284642750877420525057459599338471889495849609375,      \"dilutionLevy\" : 4.6523964329332461176136348512955009937286376953125,      \"initialCharge\" : 4.078845849666752343409825698472559452056884765625    },    \"productId\" : 3,    \"transactionSharesData\" : {      \"awardedShares\" : 4.4596050349586793259959449642337858676910400390625,      \"confirmedSharesBeforeDistribution\" : 0.434313988241488146968549699522554874420166015625,      \"requestedShares\" : 2.940964297482789646664969041012227535247802734375,      \"sharesAtCutoffDate\" : 1.7325933120207193116613098027301020920276641845703125,      \"confirmedSharedAfterDistribution\" : 3.901545264248647004734493748401291668415069580078125    },    \"distributorId\" : 5,    \"paymentCurrencyCode\" : \"paymentCurrencyCode\",    \"transactionDividendData\" : {      \"distributionCategory\" : \"INTEREST\",      \"dividendPayoutFrequencyCode\" : \"dividendPayoutFrequencyCode\",      \"perDealingInstrumentCorporationTax\" : 3.557195227068097320710649000830017030239105224609375,      \"netIncomeAmount\" : 6.438423552598546706349225132726132869720458984375,      \"distributionNumber\" : 1,      \"distributionPolicy\" : \"INCOME\",      \"dividendRate\" : 4.9652184929849543237878606305457651615142822265625,      \"transactionReinvestmentData\" : {        \"reinvestmentPrice\" : {          \"date\" : \"2000-01-23T04:56:07.000+00:00\",          \"priceTypeCode\" : \"priceTypeCode\",          \"currencyCode\" : \"currencyCode\",          \"value\" : 6.02745618307040320615897144307382404804229736328125        },        \"reinvestedAmount\" : 2.884162126668780246063761296682059764862060546875,        \"reinvestmentWithheldPercentage\" : 6.70401929795003592715829654480330646038055419921875,        \"reinvestmentTransactionExternalReference\" : \"reinvestmentTransactionExternalReference\",        \"reinvestmentWithheldAmount\" : 6.87805222012787620400331434211693704128265380859375,        \"reinvestedShares\" : 6.77832496304801335185175048536621034145355224609375,        \"reinvestmentWithheldAmountInLocalCurrency\" : 5.94489560761401580890606055618263781070709228515625      },      \"withholdingPolicy\" : \"DEALING_FUND_HOUSE\",      \"netEqualizationAmount\" : 9.0183481860707832566959041287191212177276611328125,      \"sharesRate\" : 1.2846590061165319429647979632136411964893341064453125,      \"perShareCorporationTax\" : 6.96511769763884558415156789124011993408203125,      \"dividendType\" : \"FINAL\",      \"grossDividendAmount\" : 6.683562403749608193948006373830139636993408203125,      \"frankedIncomePercentage\" : 9.965781217890562260208753286860883235931396484375,      \"incomeTax\" : 8.7620420127490010742121739895083010196685791015625,      \"localAccount\" : true,      \"equalizationRate\" : 5.02500479152029466689555192715488374233245849609375,      \"grossAmountRate\" : 9.3693102714106686335071572102606296539306640625,      \"unfrankedIncomePercentage\" : 3.35319334701124294184637619764544069766998291015625,      \"paymentDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"dealingInstrumentType\" : \"FUND\",    \"localCurrencyCode\" : \"localCurrencyCode\",    \"exchangeRateApplied\" : 2.3021358869347654518833223846741020679473876953125,    \"externalReference\" : \"externalReference\",    \"exchangeRateToLocalCurrency\" : 7.061401241503109105224211816675961017608642578125,    \"transactionPrepaidData\" : {      \"estimatedPriceApplied\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"prepaidAmount\" : 6.07389808578115175663469926803372800350189208984375    },    \"contractId\" : 6,    \"transactionCapitalGainedData\" : {      \"capitalGained\" : 6.8468526983526398765889098285697400569915771484375,      \"capitalGainedInLocalCurrency\" : 7.4577447736837658709418974467553198337554931640625    },    \"currencyCode\" : \"currencyCode\",    \"transactionForeignExchangeData\" : {      \"fxServiceFeeCurrencyCode\" : \"fxServiceFeeCurrencyCode\",      \"fxRate\" : 4.67894798900584873990737833082675933837890625,      \"fxServiceFeeAmount\" : 9.132027271330688478201409452594816684722900390625,      \"fxRateAppliedByAfb\" : 7.26052126480210358039357743109576404094696044921875,      \"fxServiceFeePercentage\" : 0.8774076871421565559927557842456735670566558837890625    },    \"transactionItalianRetailMarketData\" : {      \"fiscalAccruedIncome\" : 9.7029638000235660655334868351928889751434326171875,      \"weightedAveragePrice\" : 4.863159081028840091676102019846439361572265625,      \"fiscalShares\" : 0.519900201872498524124921459588222205638885498046875,      \"weightedAverageCost\" : 5.5073869641798811613853104063309729099273681640625,      \"reductionFeePercentage\" : 7.93350688173715123951978966942988336086273193359375,      \"confirmationLetter\" : true,      \"feeChargeOption\" : \"FRONTLOAD\"    },    \"transactionWithholdingData\" : {      \"withheldAmount\" : 9.2541839462678385785920909256674349308013916015625,      \"withheldAmountInLocalCurrency\" : 1.826870217705811594299802891327999532222747802734375,      \"withholdingPercentage\" : 3.502657762086400783374529055436141788959503173828125    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "operationalPortfolioBacktesting", nickname = "operationalPortfolioBacktestingUsingPOST", notes = "Get Operational portfolio backtesting Id Simulated", response = OperationalPortfolioBacktesting.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = OperationalPortfolioBacktesting.class),
        @ApiResponse(code = 201, message = "successful operation", response = OperationalPortfolioBacktesting.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/backtesting",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioBacktesting> operationalPortfolioBacktestingUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody OperationalPortfolioBacktesting operationalPortfolioBacktesting) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"fees\" : {    \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,    \"total\" : 2.027123023002321833274663731572218239307403564453125,    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performance\" : 3.61607674925191080461672754609026014804840087890625,    \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,    \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,    \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,    \"distribution\" : 5.962133916683182377482808078639209270477294921875,    \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,    \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,    \"others\" : 9.301444243932575517419536481611430644989013671875  },  \"typeShare\" : \"ACUMULATION\",  \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",  \"investmentObjective\" : \"investmentObjective\",  \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"lastCompositionId\" : 7,  \"lastBenchmarkCompositionId\" : 4,  \"emails\" : [ \"emails\", \"emails\" ],  \"portfolioType\" : \"SIMULATED\",  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"rebalancingTypeCode\" : \"rebalancingTypeCode\",  \"name\" : \"name\",  \"id\" : \"id\",  \"currencyCode\" : \"currencyCode\",  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "postSpanishTransferByIdAsPdf", nickname = "postSpanishTransferByIdAsPdfUsingPOST", notes = "Gets a {SpanishTransfer} by Id as PDF", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/{spanishTransferId}/pdf",
        produces = {"application/pdf"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> postSpanishTransferByIdAsPdfUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {SpanishTransfer}", required = true) @PathVariable("spanishTransferId") String spanishTransferId, @ApiParam(value = "filter") @Valid @RequestBody SpanishTransferPdfFilter spanishTransferPdfFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "processNotificationById", nickname = "processNotificationByIdUsingPUT", notes = "Change Notification process", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/notifications/{notificationId}/process",
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<Void> processNotificationByIdUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Notification}", required = true) @PathVariable("notificationId") Long notificationId, @ApiParam(value = "body", required = true) @Valid @RequestBody ProcessNotification processNotification) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "processSettlementById", nickname = "processSettlementByIdUsingPUT", notes = "Change settlement process", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/settlements/{settlementId}/process",
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<Void> processSettlementByIdUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Settlement}", required = true) @PathVariable("settlementId") String settlementId, @ApiParam(value = "List of Settlement object", required = true) @Valid @RequestBody ProcessSettlement processSettlement) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "putClientFatcaControlling", nickname = "putClientFatcaControllingUsingPUT", notes = "Updates FATCA controlling data around a client", response = FatcaControlling.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = FatcaControlling.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/clients/{clientId}/breakdowns/fatca/controlling",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<FatcaControlling> putClientFatcaControllingUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Client}", required = true) @PathVariable("clientId") String clientId, @ApiParam(value = "body", required = true) @Valid @RequestBody FatcaControllingAndSignature fatcaControllingAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"clientId\" : \"clientId\",  \"clientsBreakdown\" : [ {    \"birthday\" : \"2000-01-23T04:56:07.000+00:00\",    \"firstname\" : \"firstname\",    \"usFiscalTypeCode\" : \"usFiscalTypeCode\",    \"clientType\" : \"LEGAL\",    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"taxAddress\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"usTaxReference\" : \"usTaxReference\",    \"message\" : {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }  }, {    \"birthday\" : \"2000-01-23T04:56:07.000+00:00\",    \"firstname\" : \"firstname\",    \"usFiscalTypeCode\" : \"usFiscalTypeCode\",    \"clientType\" : \"LEGAL\",    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"taxAddress\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"usTaxReference\" : \"usTaxReference\",    \"message\" : {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }  } ],  \"distributorId\" : \"distributorId\",  \"subdistributorId\" : \"subdistributorId\",  \"clientDocument\" : \"clientDocument\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "putOperationalPortfolioInvestmentLimits", nickname = "putOperationalPortfolioInvestmentLimitsUsingPUT", notes = "Update a list of {InvestmentLimit}s", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/breakdowns/investmentLimits",
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<Void> putOperationalPortfolioInvestmentLimitsUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody InvestmentLimitIds investmentLimitIds) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "requestFundCatalog", nickname = "requestFundCatalogUsingPOST", notes = "Request a Fund Catalog.", response = FundCatalogResponse.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = FundCatalogResponse.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/fundCatalog",
        produces = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<FundCatalogResponse> requestFundCatalogUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"statusDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"file\" : {    \"filename\" : \"filename\",    \"size\" : 0,    \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"title\" : \"title\",    \"url\" : \"url\"  },  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateClient", nickname = "updateClientUsingPUT", notes = "Updates a client with form data", response = Client.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Client.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/clients/{clientId}",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<Client> updateClientUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Client}", required = true) @PathVariable("clientId") String clientId, @ApiParam(value = "body", required = true) @Valid @RequestBody ClientAndSignature clientAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"italianRetailMarketFatcaData\" : {    \"usTinTypeCode\" : \"usTinTypeCode\",    \"ateco\" : \"ateco\",    \"clientFatcaStatusCode\" : \"clientFatcaStatusCode\",    \"distributorFatcaStatusCode\" : \"distributorFatcaStatusCode\",    \"usGiin\" : \"usGiin\",    \"fatcaCertificateTypeCode\" : \"fatcaCertificateTypeCode\",    \"newAccount\" : true,    \"secondNationalityCountryCode\" : \"secondNationalityCountryCode\",    \"thirdNationalityCountryCode\" : \"thirdNationalityCountryCode\",    \"usTin\" : \"usTin\",    \"documentIssuingCountryCode\" : \"documentIssuingCountryCode\"  },  \"addresses\" : [ {    \"externalReference\" : \"externalReference\",    \"address\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"fiscalAddress\" : true,    \"residentAddress\" : true  }, {    \"externalReference\" : \"externalReference\",    \"address\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"fiscalAddress\" : true,    \"residentAddress\" : true  } ],  \"clientTypeCode\" : \"LEGAL\",  \"countryOfBirthCode\" : \"countryOfBirthCode\",  \"document\" : \"document\",  \"fatcaData\" : {    \"postalZipCode\" : \"postalZipCode\",    \"fatcaTypeCode\" : \"fatcaTypeCode\",    \"usFiscalTypeCode\" : \"usFiscalTypeCode\",    \"fiscalZipCode\" : \"fiscalZipCode\",    \"usTaxReference\" : \"usTaxReference\"  },  \"professionalAccording200439CE\" : true,  \"cityOfBirth\" : \"cityOfBirth\",  \"foreignClientData\" : {    \"certficationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"nativeOfficialDocument\" : \"nativeOfficialDocument\",    \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",    \"nonResidentDocumentTypeCode\" : \"nonResidentDocumentTypeCode\",    \"nativeFiscalIdentification\" : \"nativeFiscalIdentification\"  },  \"surname\" : \"surname\",  \"italianRetailMarketClientData\" : {    \"cipher\" : \"cipher\",    \"expeditionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"regionOfExpedition\" : \"regionOfExpedition\",    \"nationalityCountryCode\" : \"nationalityCountryCode\",    \"nativeOfficialDocument\" : \"nativeOfficialDocument\",    \"residentCountryFiscalIdentification\" : \"residentCountryFiscalIdentification\",    \"fiscalCountryCode\" : \"fiscalCountryCode\",    \"nativeOfficialDocumentTypeCode\" : \"nativeOfficialDocumentTypeCode\",    \"corporateName\" : \"corporateName\",    \"genderCode\" : \"MALE\",    \"residenceValidityExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"authority\" : \"authority\",    \"businessCountryFiscalIdentification\" : \"businessCountryFiscalIdentification\",    \"regionOfBirth\" : \"regionOfBirth\",    \"placeOfExpedition\" : \"placeOfExpedition\"  },  \"secondSurname\" : \"secondSurname\",  \"id\" : \"id\",  \"subdistributorId\" : 6,  \"cnae\" : \"cnae\",  \"residentInSpain\" : true,  \"distributorId\" : 0,  \"birthDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"externalReference\" : \"externalReference\",  \"firstName\" : \"firstName\",  \"documentTypeCode\" : \"documentTypeCode\",  \"entityTypeCode\" : \"entityTypeCode\",  \"sectorization\" : \"sectorization\",  \"spanishTransfersPermitted\" : true,  \"productTypeCode\" : \"productTypeCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateContract", nickname = "updateContractUsingPUT", notes = "Updates a contract with form data", response = Contract.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Contract.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<Contract> updateContractUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "body", required = true) @Valid @RequestBody ContractAndSignature contractAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"withholding\" : true,  \"italianRetailMarketContractInformation\" : {    \"scudato\" : true,    \"fiscalGroupingCode\" : \"fiscalGroupingCode\",    \"fiscalAddress\" : {      \"clientExternalReference\" : \"clientExternalReference\",      \"clientId\" : \"clientId\",      \"addressExternalReference\" : \"addressExternalReference\"    },    \"newExternalReference\" : \"newExternalReference\",    \"postalAdress\" : {      \"clientExternalReference\" : \"clientExternalReference\",      \"clientId\" : \"clientId\",      \"addressExternalReference\" : \"addressExternalReference\"    },    \"newSubdistributorId\" : 5,    \"fiscalGroupingExternalReference\" : \"fiscalGroupingExternalReference\"  },  \"productId\" : 5,  \"shareholders\" : [ {    \"clientExternalReference\" : \"clientExternalReference\",    \"clientId\" : \"clientId\",    \"shareholdingTypeOrder\" : 7,    \"shareholdingTypeCode\" : \"shareholdingTypeCode\",    \"ownershipPercentage\" : 2.3021358869347654518833223846741020679473876953125  }, {    \"clientExternalReference\" : \"clientExternalReference\",    \"clientId\" : \"clientId\",    \"shareholdingTypeOrder\" : 7,    \"shareholdingTypeCode\" : \"shareholdingTypeCode\",    \"ownershipPercentage\" : 2.3021358869347654518833223846741020679473876953125  } ],  \"depositaryId\" : 0,  \"distributorId\" : 6,  \"testamentary\" : true,  \"externalReference\" : \"externalReference\",  \"advisor\" : \"advisor\",  \"testamentaryContractExternalReference\" : \"testamentaryContractExternalReference\",  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"defaultLanguageCode\" : \"defaultLanguageCode\",  \"accounts\" : [ {    \"assetAccountCode\" : \"assetAccountCode\",    \"currentAccountCode\" : \"currentAccountCode\"  }, {    \"assetAccountCode\" : \"assetAccountCode\",    \"currentAccountCode\" : \"currentAccountCode\"  } ],  \"id\" : 1,  \"subdistributorId\" : 9,  \"externalReferenceSpanishDealingFundHouse\" : \"externalReferenceSpanishDealingFundHouse\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateInvestmentLimitById", nickname = "updateInvestmentLimitByIdUsingPUT", notes = "Updates a InvestmentLimit", response = InvestmentLimit.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = InvestmentLimit.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/investmentLimits/{investmentLimitId}",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<InvestmentLimit> updateInvestmentLimitByIdUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {InvestmentLimit}", required = true) @PathVariable("investmentLimitId") Long investmentLimitId, @ApiParam(value = "The Operational Portfolio object to update InvestLimit", required = true) @Valid @RequestBody InvestmentLimit investmentLimit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",  \"operationalStatus\" : \"ACTIVED\",  \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,  \"features\" : [ {    \"featureTypeCode\" : \"featureTypeCode\",    \"maximum\" : 1.46581298050294517310021547018550336360931396484375,    \"valueCode\" : \"valueCode\",    \"id\" : \"id\",    \"minimum\" : 5.962133916683182377482808078639209270477294921875  }, {    \"featureTypeCode\" : \"featureTypeCode\",    \"maximum\" : 1.46581298050294517310021547018550336360931396484375,    \"valueCode\" : \"valueCode\",    \"id\" : \"id\",    \"minimum\" : 5.962133916683182377482808078639209270477294921875  } ],  \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,  \"notificationCause\" : \"LIMIT\",  \"distributorId\" : 6,  \"name\" : \"name\",  \"assigned\" : true,  \"id\" : 5,  \"descriptionData\" : \"descriptionData\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateOperationalPortfolioById", nickname = "updateOperationalPortfolioByIdUsingPUT", notes = "Updates a operational portfolio", response = OperationalPortfolio.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolio.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<OperationalPortfolio> updateOperationalPortfolioByIdUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "The Operational Portfolio object to update Operational portfolio", required = true) @Valid @RequestBody OperationalPortfolio operationalPortfolio) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"futureOperationalSuccessFee\" : {    \"endDate\" : \"endDate\",    \"amountFees\" : [ {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    }, {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    } ],    \"startDate\" : \"startDate\"  },  \"operationalRebalancingData\" : {    \"minimumAmountAdditionalContribution\" : \"minimumAmountAdditionalContribution\",    \"automatedProcess\" : true,    \"minimumAmountContribution\" : \"minimumAmountContribution\",    \"minimumAmountPermanence\" : \"minimumAmountPermanence\",    \"supervision\" : true  },  \"futureOperationalManagementFee\" : {    \"endDate\" : \"endDate\",    \"amountFees\" : [ {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    }, {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    } ],    \"startDate\" : \"startDate\"  },  \"operationalPortfolioBasicData\" : {    \"productId\" : 5,    \"numberContracts\" : 1,    \"distributorId\" : 6,    \"name\" : \"name\",    \"statusCode\" : \"statusCode\"  },  \"navValuationStrategy\" : \"CONFIRMATION\",  \"currentOperationalManagementFee\" : {    \"endDate\" : \"endDate\",    \"amountFees\" : [ {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    }, {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    } ],    \"startDate\" : \"startDate\"  },  \"operationalPortfolioDescriptionData\" : {    \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"descriptionBasic\" : [ {      \"monthlyAnalysis\" : \"monthlyAnalysis\",      \"generalDescription\" : \"generalDescription\",      \"languageCode\" : \"languageCode\"    }, {      \"monthlyAnalysis\" : \"monthlyAnalysis\",      \"generalDescription\" : \"generalDescription\",      \"languageCode\" : \"languageCode\"    } ]  },  \"benchmarkId\" : \"benchmarkId\",  \"currentOperationalSuccessFee\" : {    \"endDate\" : \"endDate\",    \"amountFees\" : [ {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    }, {      \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,      \"percentage\" : \"percentage\",      \"amountFrom\" : 0.80082819046101150206595775671303272247314453125    } ],    \"startDate\" : \"startDate\"  },  \"operationalGroup\" : {    \"name\" : \"name\",    \"id\" : 0  },  \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : 1,  \"currencyCode\" : \"currencyCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateRiskControlAlarmById", nickname = "updateRiskControlAlarmByIdUsingPUT", notes = "Updates a RiskControlAlarm", response = RiskControlAlarm.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = RiskControlAlarm.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/riskControlAlarms/{riskControlAlarmId}",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<RiskControlAlarm> updateRiskControlAlarmByIdUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {RiskControlAlarm}", required = true) @PathVariable("riskControlAlarmId") Long riskControlAlarmId, @ApiParam(value = "The Operational Portfolio object to update Alarm", required = true) @Valid @RequestBody RiskControlAlarm riskControlAlarm) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalStatus\" : \"ACTIVED\",  \"investmentLimits\" : [ {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  }, {    \"investmentLimitRiskLevelCode\" : \"investmentLimitRiskLevelCode\",    \"operationalStatus\" : \"ACTIVED\",    \"thresholdWarning\" : 2.3021358869347654518833223846741020679473876953125,    \"features\" : [ {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    }, {      \"featureTypeCode\" : \"featureTypeCode\",      \"maximum\" : 1.46581298050294517310021547018550336360931396484375,      \"valueCode\" : \"valueCode\",      \"id\" : \"id\",      \"minimum\" : 5.962133916683182377482808078639209270477294921875    } ],    \"currencyPercentage\" : 0.80082819046101150206595775671303272247314453125,    \"notificationCause\" : \"LIMIT\",    \"distributorId\" : 6,    \"name\" : \"name\",    \"assigned\" : true,    \"id\" : 5,    \"descriptionData\" : \"descriptionData\"  } ],  \"mailNotification\" : true,  \"operationalPortfolioId\" : 5,  \"distributorId\" : 0,  \"scope\" : \"MODEL_PORTFOLIO\",  \"name\" : \"name\",  \"language\" : \"SPANISH\",  \"id\" : 6,  \"mailNotifications\" : [ {    \"investmentLimitRiskLevelCodes\" : [ \"investmentLimitRiskLevelCodes\", \"investmentLimitRiskLevelCodes\" ],    \"id\" : 1,    \"email\" : \"email\"  }, {    \"investmentLimitRiskLevelCodes\" : [ \"investmentLimitRiskLevelCodes\", \"investmentLimitRiskLevelCodes\" ],    \"id\" : 1,    \"email\" : \"email\"  } ],  \"typeCode\" : \"typeCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateSavingPlanById", nickname = "updateSavingPlanByIdUsingPUT", notes = "Update the current {SavingPlan}", response = SavingPlan.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SavingPlan.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/savingPlans/{savingPlanId}",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<SavingPlan> updateSavingPlanByIdUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "The Id of the {SavingPlan}", required = true) @PathVariable("savingPlanId") Long savingPlanId, @ApiParam(value = "body", required = true) @Valid @RequestBody SavingPlanAndSignature savingPlanAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"assetAccountCode\" : \"assetAccountCode\",  \"amount\" : 0.80082819046101150206595775671303272247314453125,  \"currentAccountCode\" : \"currentAccountCode\",  \"fee\" : 4.1456080298839363962315474054776132106781005859375,  \"firstTransactionAmount\" : 7.3862819483858839220147274318151175975799560546875,  \"basicData\" : {    \"externalReference\" : \"externalReference\",    \"distributorId\" : 6,    \"subdistributorId\" : 1,    \"transactionTypeCode\" : \"transactionTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"statusCode\" : \"statusCode\"  },  \"firstTransactionFeePercentage\" : 1.231513536777255612975068288506008684635162353515625,  \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"associatedContract\" : {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  },  \"periodCode\" : \"periodCode\",  \"shares\" : 1.173074250955943309548956676735542714595794677734375,  \"dealingInstrumentsBreakdown\" : [ {    \"shares\" : 7.061401241503109105224211816675961017608642578125,    \"amount\" : 5.63737665663332876420099637471139430999755859375,    \"dealingInstrumentType\" : \"FUND\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"dealingInstrumentId\" : 2  }, {    \"shares\" : 7.061401241503109105224211816675961017608642578125,    \"amount\" : 5.63737665663332876420099637471139430999755859375,    \"dealingInstrumentType\" : \"FUND\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"dealingInstrumentId\" : 2  } ],  \"collectiveInvestmentSchemeId\" : 5,  \"reductionPercentage\" : 7.4577447736837658709418974467553198337554931640625,  \"secondTransactionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : 1,  \"numberOfQuotas\" : 1,  \"enlargenmentData\" : {    \"amount\" : 9.301444243932575517419536481611430644989013671875,    \"quotas\" : 3  },  \"numberOfQuotasFirstTransaction\" : 6,  \"expenses\" : 2.027123023002321833274663731572218239307403564453125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateScorecardById", nickname = "updateScorecardByIdUsingPUT", notes = "Updates a Scorecard", response = Scorecard.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Scorecard.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/scorecards/{scorecardId}",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<Scorecard> updateScorecardByIdUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Scorecard}", required = true) @PathVariable("scorecardId") Long scorecardId, @ApiParam(value = "The Scorecard object to update Scorecard", required = true) @Valid @RequestBody Scorecard scorecard) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"distributorId\" : 0,  \"name\" : \"name\",  \"assigned\" : true,  \"id\" : \"id\",  \"featureDetails\" : [ {    \"featureTypeCode\" : \"featureTypeCode\",    \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"  }, {    \"featureTypeCode\" : \"featureTypeCode\",    \"mathematicalFunctionsCode\" : \"mathematicalFunctionsCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateScorecardByOperationalPortfolio", nickname = "updateScorecardByOperationalPortfolioUsingPUT", notes = "Update a scorecard operational portfolio", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/breakdowns/scorecards",
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateScorecardByOperationalPortfolioUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "The Scorecard object to update Operational portfolio", required = true) @Valid @RequestBody ScorecardId scorecardId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateSpanishTransferStatus", nickname = "updateSpanishTransferStatusUsingPUT", notes = "", response = SpanishTransfer.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SpanishTransfer.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/{spanishTransferId}/status/change",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<SpanishTransfer> updateSpanishTransferStatusUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {SpanishTransfer}", required = true) @PathVariable("spanishTransferId") String spanishTransferId, @ApiParam(value = "filter", required = true) @Valid @RequestBody SpanishTransferChangeStatusFilterAndSignature spanishTransferChangeStatusFilterAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"exchangeRateApplied\" : 4.1456080298839363962315474054776132106781005859375,  \"transactionExternalReference\" : \"transactionExternalReference\",  \"processedAsSwitch\" : true,  \"sourceItem\" : {    \"marketer\" : {      \"entityCnmvCode\" : \"entityCnmvCode\",      \"entityCnmvNif\" : \"entityCnmvNif\",      \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",      \"dealingInstrumentName\" : \"dealingInstrumentName\",      \"currentAccountCode\" : \"currentAccountCode\",      \"entityName\" : \"entityName\",      \"dealingInstrumentNif\" : \"dealingInstrumentNif\"    },    \"etfData\" : {      \"brokerId\" : 2,      \"stockExchangeId\" : \"stockExchangeId\"    },    \"feeData\" : {      \"secondSpanishTransferFeeAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"firstSpanishTransferFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"firstSpanishTransferFeePercentage\" : 9.301444243932575517419536481611430644989013671875,      \"secondSpanishTransferFeePercentage\" : 2.027123023002321833274663731572218239307403564453125    },    \"omnibus\" : true,    \"distributorId\" : 5,    \"dealingInstrumentExternalCodeKeyValues\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"dealingInstrumentType\" : \"FUND\",    \"contractExternalReference\" : \"contractExternalReference\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"currencyCode\" : \"currencyCode\"  },  \"substatusCode\" : \"substatusCode\",  \"basicData\" : {    \"externalReference\" : \"externalReference\",    \"shares\" : 1.46581298050294517310021547018550336360931396484375,    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"requestType\" : \"OUTSIDE\",    \"distributorId\" : 6,    \"transferType\" : \"TOTAL\",    \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"transferClass\" : \"ENTRY\",    \"subdistributorId\" : 5,    \"statusCode\" : \"statusCode\"  },  \"principals\" : [ {    \"firstName\" : \"firstName\",    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"taxpayerId\" : \"taxpayerId\"  }, {    \"firstName\" : \"firstName\",    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"taxpayerId\" : \"taxpayerId\"  } ],  \"dateData\" : {    \"sourceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"destinationDate\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"id\" : \"id\",  \"destinationItem\" : {    \"marketer\" : {      \"entityCnmvCode\" : \"entityCnmvCode\",      \"entityCnmvNif\" : \"entityCnmvNif\",      \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",      \"dealingInstrumentName\" : \"dealingInstrumentName\",      \"currentAccountCode\" : \"currentAccountCode\",      \"entityName\" : \"entityName\",      \"dealingInstrumentNif\" : \"dealingInstrumentNif\"    },    \"etfData\" : {      \"brokerId\" : 2,      \"stockExchangeId\" : \"stockExchangeId\"    },    \"feeData\" : {      \"secondSpanishTransferFeeAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"firstSpanishTransferFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"firstSpanishTransferFeePercentage\" : 9.301444243932575517419536481611430644989013671875,      \"secondSpanishTransferFeePercentage\" : 2.027123023002321833274663731572218239307403564453125    },    \"omnibus\" : true,    \"distributorId\" : 5,    \"dealingInstrumentExternalCodeKeyValues\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"dealingInstrumentType\" : \"FUND\",    \"contractExternalReference\" : \"contractExternalReference\",    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"currencyCode\" : \"currencyCode\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateStockTransferTaxTransactions", nickname = "updateStockTransferTaxTransactionsUsingPUT", notes = "Update the list of {TaxTransaction}s associated to a {StockTransfer}, deleting, adding or updating previous values.", response = TaxTransactionAndMessages.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = TaxTransactionAndMessages.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/stockTransfers/{stockTransferId}/breakdowns/taxTransactions",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<List<TaxTransactionAndMessages>> updateStockTransferTaxTransactionsUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {StockTransfer}", required = true) @PathVariable("stockTransferId") String stockTransferId, @ApiParam(value = "body", required = true) @Valid @RequestBody StockTransferTaxTransactionsAndSignature stockTransferTaxTransactionsAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"taxTransaction\" : {    \"exchangeRateApplied\" : 3.61607674925191080461672754609026014804840087890625,    \"shares\" : 7.3862819483858839220147274318151175975799560546875,    \"amount\" : 9.301444243932575517419536481611430644989013671875,    \"associatedTransaction\" : {      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"orderNumber\" : 4.1456080298839363962315474054776132106781005859375,    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"fee\" : 2.027123023002321833274663731572218239307403564453125,    \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"spanishMarketData\" : {      \"valuationUntil2006\" : 1.024645700144157789424070870154537260532379150390625,      \"valuationUntil2005\" : 1.231513536777255612975068288506008684635162353515625    }  },  \"message\" : {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateTheoreticalPortfolioById", nickname = "updateTheoreticalPortfolioByIdUsingPUT", notes = "Updates a portfolio", response = Portfolio.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Portfolio.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<Portfolio> updateTheoreticalPortfolioByIdUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "The Portfolio object to update portfolio", required = true) @Valid @RequestBody Portfolio portfolio) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : [ {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"fees\" : {    \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,    \"total\" : 2.027123023002321833274663731572218239307403564453125,    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performance\" : 3.61607674925191080461672754609026014804840087890625,    \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,    \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,    \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,    \"distribution\" : 5.962133916683182377482808078639209270477294921875,    \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,    \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,    \"others\" : 9.301444243932575517419536481611430644989013671875  },  \"typeShare\" : \"ACUMULATION\",  \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",  \"investmentObjective\" : \"investmentObjective\",  \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"lastCompositionId\" : 6,  \"lastBenchmarkCompositionId\" : 0,  \"emails\" : [ \"emails\", \"emails\" ],  \"portfolioType\" : \"SIMULATED\",  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"rebalancingTypeCode\" : \"rebalancingTypeCode\",  \"name\" : \"name\",  \"id\" : \"id\",  \"currencyCode\" : \"currencyCode\",  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateTheoreticalPortfolioCompositionById", nickname = "updateTheoreticalPortfolioCompositionByIdUsingPUT", notes = "Updates a Theoretical Portfolio Composition", response = Composition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Composition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/compositions/{compositionId}",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.PUT)
    default ResponseEntity<Composition> updateTheoreticalPortfolioCompositionByIdUsingPUT(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId, @ApiParam(value = "Composition Id", required = true) @PathVariable("compositionId") Long compositionId, @ApiParam(value = "Composition object", required = true) @Valid @RequestBody Composition composition) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\",  \"resources\" : [ {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateClientFatcaControlling", nickname = "validateClientFatcaControllingUsingPOST", notes = "Updates FATCA controlling data around a client", response = FatcaControlling.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = FatcaControlling.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/clients/{clientId}/breakdowns/fatca/controlling/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<FatcaControlling> validateClientFatcaControllingUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Client}", required = true) @PathVariable("clientId") String clientId, @ApiParam(value = "body", required = true) @Valid @RequestBody FatcaControlling fatcaControlling) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"clientId\" : \"clientId\",  \"clientsBreakdown\" : [ {    \"birthday\" : \"2000-01-23T04:56:07.000+00:00\",    \"firstname\" : \"firstname\",    \"usFiscalTypeCode\" : \"usFiscalTypeCode\",    \"clientType\" : \"LEGAL\",    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"taxAddress\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"usTaxReference\" : \"usTaxReference\",    \"message\" : {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }  }, {    \"birthday\" : \"2000-01-23T04:56:07.000+00:00\",    \"firstname\" : \"firstname\",    \"usFiscalTypeCode\" : \"usFiscalTypeCode\",    \"clientType\" : \"LEGAL\",    \"surname\" : \"surname\",    \"secondSurname\" : \"secondSurname\",    \"taxAddress\" : {      \"roadTypeCode\" : \"roadTypeCode\",      \"zipCode\" : \"zipCode\",      \"regionCode\" : \"regionCode\",      \"address\" : \"address\",      \"complementaryAddress\" : \"complementaryAddress\",      \"city\" : \"city\",      \"countryCode\" : \"countryCode\",      \"region\" : \"region\"    },    \"usTaxReference\" : \"usTaxReference\",    \"message\" : {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }  } ],  \"distributorId\" : \"distributorId\",  \"subdistributorId\" : \"subdistributorId\",  \"clientDocument\" : \"clientDocument\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateClient", nickname = "validateClientUsingPOST", notes = "This method is defined in order to check whether a new client data, or the modification of an existing one, are correct or not. This method must always be called before adding a new client or modificating an existing one.", response = Message.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Message.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/clients/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<Message>> validateClientUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody Client client) {
        Message message = new Message();
        message.setStatus(Message.StatusEnum.OK);
        return ResponseEntity.ok(Collections.singletonList(message));
    }


    @ApiOperation(value = "validateOperation", nickname = "validateOperationUsingPOST", notes = "Validates the {Operation}", response = OperationAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/operations/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationAndMessages> validateOperationUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody Operation operation) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ],  \"operation\" : {    \"contributions\" : [ {      \"associatedTransaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"clientId\" : \"clientId\",      \"comments\" : \"comments\",      \"operationWithholdingData\" : {        \"witholding\" : true,        \"withheldAmount\" : 2.027123023002321833274663731572218239307403564453125      },      \"operationContractData\" : {        \"contractExternalReference\" : \"contractExternalReference\",        \"contractAccount\" : {          \"assetAccountCode\" : \"assetAccountCode\",          \"currentAccountCode\" : \"currentAccountCode\"        }      },      \"operationItalianRetailMarketData\" : {        \"fiscalAccruedIncome\" : 1.46581298050294517310021547018550336360931396484375,        \"weightedAveragePrice\" : 2.3021358869347654518833223846741020679473876953125,        \"fiscalShares\" : 5.962133916683182377482808078639209270477294921875,        \"weightedAverageCost\" : 5.63737665663332876420099637471139430999755859375      },      \"externalReference\" : \"externalReference\",      \"operationDateData\" : {        \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"operationSpanishMarketData\" : {        \"valuationUntil2006\" : 3.61607674925191080461672754609026014804840087890625,        \"valuationUntil2005\" : 9.301444243932575517419536481611430644989013671875      },      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"operationSharesData\" : {        \"requestedShares\" : 7.061401241503109105224211816675961017608642578125      },      \"operationAmountData\" : {        \"requestedNetAmount\" : 6.02745618307040320615897144307382404804229736328125,        \"requestedGrossAmount\" : 0.80082819046101150206595775671303272247314453125      },      \"currencyCode\" : \"currencyCode\"    }, {      \"associatedTransaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"clientId\" : \"clientId\",      \"comments\" : \"comments\",      \"operationWithholdingData\" : {        \"witholding\" : true,        \"withheldAmount\" : 2.027123023002321833274663731572218239307403564453125      },      \"operationContractData\" : {        \"contractExternalReference\" : \"contractExternalReference\",        \"contractAccount\" : {          \"assetAccountCode\" : \"assetAccountCode\",          \"currentAccountCode\" : \"currentAccountCode\"        }      },      \"operationItalianRetailMarketData\" : {        \"fiscalAccruedIncome\" : 1.46581298050294517310021547018550336360931396484375,        \"weightedAveragePrice\" : 2.3021358869347654518833223846741020679473876953125,        \"fiscalShares\" : 5.962133916683182377482808078639209270477294921875,        \"weightedAverageCost\" : 5.63737665663332876420099637471139430999755859375      },      \"externalReference\" : \"externalReference\",      \"operationDateData\" : {        \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"operationSpanishMarketData\" : {        \"valuationUntil2006\" : 3.61607674925191080461672754609026014804840087890625,        \"valuationUntil2005\" : 9.301444243932575517419536481611430644989013671875      },      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"operationSharesData\" : {        \"requestedShares\" : 7.061401241503109105224211816675961017608642578125      },      \"operationAmountData\" : {        \"requestedNetAmount\" : 6.02745618307040320615897144307382404804229736328125,        \"requestedGrossAmount\" : 0.80082819046101150206595775671303272247314453125      },      \"currencyCode\" : \"currencyCode\"    } ],    \"distributorId\" : 7,    \"operationEtfData\" : {      \"brokerId\" : 1,      \"stockExchangeId\" : \"stockExchangeId\"    },    \"dealingInstrumentType\" : \"FUND\",    \"id\" : \"id\",    \"subdistributorId\" : 1,    \"withdrawal\" : {      \"associatedTransaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"clientId\" : \"clientId\",      \"comments\" : \"comments\",      \"operationWithholdingData\" : {        \"witholding\" : true,        \"withheldAmount\" : 2.027123023002321833274663731572218239307403564453125      },      \"operationContractData\" : {        \"contractExternalReference\" : \"contractExternalReference\",        \"contractAccount\" : {          \"assetAccountCode\" : \"assetAccountCode\",          \"currentAccountCode\" : \"currentAccountCode\"        }      },      \"operationItalianRetailMarketData\" : {        \"fiscalAccruedIncome\" : 1.46581298050294517310021547018550336360931396484375,        \"weightedAveragePrice\" : 2.3021358869347654518833223846741020679473876953125,        \"fiscalShares\" : 5.962133916683182377482808078639209270477294921875,        \"weightedAverageCost\" : 5.63737665663332876420099637471139430999755859375      },      \"externalReference\" : \"externalReference\",      \"operationDateData\" : {        \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"operationSpanishMarketData\" : {        \"valuationUntil2006\" : 3.61607674925191080461672754609026014804840087890625,        \"valuationUntil2005\" : 9.301444243932575517419536481611430644989013671875      },      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"operationSharesData\" : {        \"requestedShares\" : 7.061401241503109105224211816675961017608642578125      },      \"operationAmountData\" : {        \"requestedNetAmount\" : 6.02745618307040320615897144307382404804229736328125,        \"requestedGrossAmount\" : 0.80082819046101150206595775671303272247314453125      },      \"currencyCode\" : \"currencyCode\"    },    \"dealingFundHouseId\" : 4,    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"operationSettingsData\" : {      \"errorCode\" : \"errorCode\",      \"showDetails\" : true,      \"statusCode\" : \"statusCode\"    },    \"operationTypeCode\" : \"operationTypeCode\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateOperationalPortfolioAuthorization", nickname = "validateOperationalPortfolioAuthorizationUsingPOST", notes = "Validate operational portfolio Authorization", response = OperationalPortfolioTransactionAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioTransactionAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/transactions/orders/authorize/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioTransactionAndMessages> validateOperationalPortfolioAuthorizationUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody OperationalPortfolioTransaction operationalPortfolioTransaction) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalPortfolioTransaction\" : {    \"operationalPortfolioMovement\" : {      \"authorizationNeeded\" : true,      \"associatedContractExternalReference\" : \"associatedContractExternalReference\",      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"associatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"operationalPortfolioId\" : 1,      \"operationalPortfolioMovementDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"productId\" : 1,      \"requestedShares\" : 6.8468526983526398765889098285697400569915771484375,      \"associatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"distributorId\" : 4,      \"contract\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"movementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"contractExternalReference\" : \"contractExternalReference\",      \"associatedContract\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"externalReference\" : \"externalReference\",      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"movementType\" : \"DIRECT\",      \"operationalPortfolioMovementTypeCode\" : \"operationalPortfolioMovementTypeCode\",      \"scope\" : \"MODEL_PORTFOLIO\",      \"requestedAmount\" : 1.489415909854170383397331534069962799549102783203125,      \"id\" : 7,      \"subdistributorId\" : 7,      \"currencyCode\" : \"currencyCode\"    },    \"operationalPorfolioOrders\" : [ {      \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,      \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",      \"operationalPortfolioDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,      \"spanishTransferId\" : \"spanishTransferId\",      \"priceValue\" : \"priceValue\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioAssociatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"transactionTypeCode\" : \"transactionTypeCode\",      \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",      \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,      \"externalReference\" : 1,      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",      \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",      \"operationalPortfolioDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"operationalPortfolioOrderSettingsData\" : {        \"statusOrderCode\" : \"statusOrderCode\",        \"errorCode\" : \"errorCode\"      },      \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"id\" : 5,      \"currencyCode\" : \"currencyCode\",      \"operationalPortfolioAssociatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,      \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",      \"operationalPortfolioDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,      \"spanishTransferId\" : \"spanishTransferId\",      \"priceValue\" : \"priceValue\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioAssociatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"transactionTypeCode\" : \"transactionTypeCode\",      \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",      \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,      \"externalReference\" : 1,      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",      \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",      \"operationalPortfolioDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"operationalPortfolioOrderSettingsData\" : {        \"statusOrderCode\" : \"statusOrderCode\",        \"errorCode\" : \"errorCode\"      },      \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"id\" : 5,      \"currencyCode\" : \"currencyCode\",      \"operationalPortfolioAssociatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ]  },  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateOperationalPortfolioCancel", nickname = "validateOperationalPortfolioCancelUsingPOST", notes = "Validate Operational Portfolio Cancel", response = OperationalPortfolioAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/cancel/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioAndMessages> validateOperationalPortfolioCancelUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody OperationalPortfolio operationalPortfolio) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ],  \"operationalPortfolio\" : {    \"futureOperationalSuccessFee\" : {      \"endDate\" : \"endDate\",      \"amountFees\" : [ {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      }, {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      } ],      \"startDate\" : \"startDate\"    },    \"operationalRebalancingData\" : {      \"minimumAmountAdditionalContribution\" : \"minimumAmountAdditionalContribution\",      \"automatedProcess\" : true,      \"minimumAmountContribution\" : \"minimumAmountContribution\",      \"minimumAmountPermanence\" : \"minimumAmountPermanence\",      \"supervision\" : true    },    \"futureOperationalManagementFee\" : {      \"endDate\" : \"endDate\",      \"amountFees\" : [ {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      }, {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      } ],      \"startDate\" : \"startDate\"    },    \"operationalPortfolioBasicData\" : {      \"productId\" : 5,      \"numberContracts\" : 1,      \"distributorId\" : 6,      \"name\" : \"name\",      \"statusCode\" : \"statusCode\"    },    \"navValuationStrategy\" : \"CONFIRMATION\",    \"currentOperationalManagementFee\" : {      \"endDate\" : \"endDate\",      \"amountFees\" : [ {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      }, {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      } ],      \"startDate\" : \"startDate\"    },    \"operationalPortfolioDescriptionData\" : {      \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"descriptionBasic\" : [ {        \"monthlyAnalysis\" : \"monthlyAnalysis\",        \"generalDescription\" : \"generalDescription\",        \"languageCode\" : \"languageCode\"      }, {        \"monthlyAnalysis\" : \"monthlyAnalysis\",        \"generalDescription\" : \"generalDescription\",        \"languageCode\" : \"languageCode\"      } ]    },    \"benchmarkId\" : \"benchmarkId\",    \"currentOperationalSuccessFee\" : {      \"endDate\" : \"endDate\",      \"amountFees\" : [ {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      }, {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      } ],      \"startDate\" : \"startDate\"    },    \"operationalGroup\" : {      \"name\" : \"name\",      \"id\" : 0    },    \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"id\" : 1,    \"currencyCode\" : \"currencyCode\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateOperationalPortfolioComposition", nickname = "validateOperationalPortfolioCompositionUsingPOST", notes = "Validate operational portfolio composition", response = OperationalPortfolioCompositionAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioCompositionAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/compositions/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioCompositionAndMessages> validateOperationalPortfolioCompositionUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody OperationalPortfolioComposition operationalPortfolioComposition) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalPortfolioComposition\" : {    \"operationalPortfolioId\" : 5,    \"compositionDealingInstruments\" : [ {      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,      \"dealingInstrumentType\" : \"FUND\",      \"errorCode\" : \"errorCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"weightPercentage\" : 6.02745618307040320615897144307382404804229736328125,      \"dealingInstrumentType\" : \"FUND\",      \"errorCode\" : \"errorCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ],    \"distributorId\" : 1,    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"totalWeight\" : 2.3021358869347654518833223846741020679473876953125,    \"historical\" : true,    \"id\" : 5,    \"statusCode\" : \"statusCode\"  },  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateOperationalPortfolioOrder", nickname = "validateOperationalPortfolioOrderUsingPOST", notes = "Validate operational portfolio Order", response = OperationalPortfolioTransactionAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioTransactionAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/transactions/orders/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioTransactionAndMessages> validateOperationalPortfolioOrderUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody OperationalPortfolioTransaction operationalPortfolioTransaction) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalPortfolioTransaction\" : {    \"operationalPortfolioMovement\" : {      \"authorizationNeeded\" : true,      \"associatedContractExternalReference\" : \"associatedContractExternalReference\",      \"dealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"associatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"operationalPortfolioId\" : 1,      \"operationalPortfolioMovementDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"productId\" : 1,      \"requestedShares\" : 6.8468526983526398765889098285697400569915771484375,      \"associatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"distributorId\" : 4,      \"contract\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"movementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"contractExternalReference\" : \"contractExternalReference\",      \"associatedContract\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"externalReference\" : \"externalReference\",      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"movementType\" : \"DIRECT\",      \"operationalPortfolioMovementTypeCode\" : \"operationalPortfolioMovementTypeCode\",      \"scope\" : \"MODEL_PORTFOLIO\",      \"requestedAmount\" : 1.489415909854170383397331534069962799549102783203125,      \"id\" : 7,      \"subdistributorId\" : 7,      \"currencyCode\" : \"currencyCode\"    },    \"operationalPorfolioOrders\" : [ {      \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,      \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",      \"operationalPortfolioDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,      \"spanishTransferId\" : \"spanishTransferId\",      \"priceValue\" : \"priceValue\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioAssociatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"transactionTypeCode\" : \"transactionTypeCode\",      \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",      \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,      \"externalReference\" : 1,      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",      \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",      \"operationalPortfolioDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"operationalPortfolioOrderSettingsData\" : {        \"statusOrderCode\" : \"statusOrderCode\",        \"errorCode\" : \"errorCode\"      },      \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"id\" : 5,      \"currencyCode\" : \"currencyCode\",      \"operationalPortfolioAssociatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"awardedAmount\" : 0.80082819046101150206595775671303272247314453125,      \"orderMonitoringStatusCode\" : \"orderMonitoringStatusCode\",      \"operationalPortfolioDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"requestedShares\" : 2.027123023002321833274663731572218239307403564453125,      \"spanishTransferId\" : \"spanishTransferId\",      \"priceValue\" : \"priceValue\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioAssociatedDealingInstrument\" : {        \"dealingInstrumentType\" : \"FUND\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"currencyCode\" : \"currencyCode\"      },      \"transactionTypeCode\" : \"transactionTypeCode\",      \"associatedPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"authorizationOrderTypeCode\" : \"authorizationOrderTypeCode\",      \"awardedShares\" : 6.02745618307040320615897144307382404804229736328125,      \"externalReference\" : 1,      \"operationalPortfolioMovementFeeData\" : {        \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,        \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,        \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875      },      \"priceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"operationalPortfolioOrderOriginCode\" : \"operationalPortfolioOrderOriginCode\",      \"operationalPortfolioPhaseCode\" : \"operationalPortfolioPhaseCode\",      \"operationalPortfolioDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"operationalPortfolioOrderSettingsData\" : {        \"statusOrderCode\" : \"statusOrderCode\",        \"errorCode\" : \"errorCode\"      },      \"requestedAmount\" : 3.61607674925191080461672754609026014804840087890625,      \"id\" : 5,      \"currencyCode\" : \"currencyCode\",      \"operationalPortfolioAssociatedDealingFundHouse\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ]  },  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateOperationalPortfolioTransaction", nickname = "validateOperationalPortfolioTransactionUsingPOST", notes = "Validate operational portfolio Transaction", response = OperationalPortfolioMovementAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioMovementAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/{operationalPortfolioId}/transactions/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioMovementAndMessages> validateOperationalPortfolioTransactionUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody OperationalPortfolioMovement operationalPortfolioMovement) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"operationalPortfolioMovement\" : {    \"authorizationNeeded\" : true,    \"associatedContractExternalReference\" : \"associatedContractExternalReference\",    \"dealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"associatedDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"operationalPortfolioId\" : 1,    \"operationalPortfolioMovementDealingInstrument\" : {      \"dealingInstrumentType\" : \"FUND\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"productId\" : 1,    \"requestedShares\" : 6.8468526983526398765889098285697400569915771484375,    \"associatedDealingFundHouse\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"distributorId\" : 4,    \"contract\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"movementDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"contractExternalReference\" : \"contractExternalReference\",    \"associatedContract\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"externalReference\" : \"externalReference\",    \"operationalPortfolioMovementFeeData\" : {      \"firstMovementFeePercentage\" : 2.3021358869347654518833223846741020679473876953125,      \"firstMovementFeeAmount\" : 5.63737665663332876420099637471139430999755859375,      \"secondMovementFeeAmount\" : 7.061401241503109105224211816675961017608642578125,      \"secondMovementFeePercentage\" : 9.301444243932575517419536481611430644989013671875    },    \"movementType\" : \"DIRECT\",    \"operationalPortfolioMovementTypeCode\" : \"operationalPortfolioMovementTypeCode\",    \"scope\" : \"MODEL_PORTFOLIO\",    \"requestedAmount\" : 1.489415909854170383397331534069962799549102783203125,    \"id\" : 7,    \"subdistributorId\" : 7,    \"currencyCode\" : \"currencyCode\"  },  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateOperationalPortfolio", nickname = "validateOperationalPortfolioUsingPOST", notes = "Validate Operational Portfolio", response = OperationalPortfolioAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OperationalPortfolioAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/operational/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OperationalPortfolioAndMessages> validateOperationalPortfolioUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {OperationalPortfolio}", required = true) @PathVariable("operationalPortfolioId") Long operationalPortfolioId, @ApiParam(value = "body", required = true) @Valid @RequestBody OperationalPortfolio operationalPortfolio) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ],  \"operationalPortfolio\" : {    \"futureOperationalSuccessFee\" : {      \"endDate\" : \"endDate\",      \"amountFees\" : [ {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      }, {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      } ],      \"startDate\" : \"startDate\"    },    \"operationalRebalancingData\" : {      \"minimumAmountAdditionalContribution\" : \"minimumAmountAdditionalContribution\",      \"automatedProcess\" : true,      \"minimumAmountContribution\" : \"minimumAmountContribution\",      \"minimumAmountPermanence\" : \"minimumAmountPermanence\",      \"supervision\" : true    },    \"futureOperationalManagementFee\" : {      \"endDate\" : \"endDate\",      \"amountFees\" : [ {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      }, {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      } ],      \"startDate\" : \"startDate\"    },    \"operationalPortfolioBasicData\" : {      \"productId\" : 5,      \"numberContracts\" : 1,      \"distributorId\" : 6,      \"name\" : \"name\",      \"statusCode\" : \"statusCode\"    },    \"navValuationStrategy\" : \"CONFIRMATION\",    \"currentOperationalManagementFee\" : {      \"endDate\" : \"endDate\",      \"amountFees\" : [ {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      }, {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      } ],      \"startDate\" : \"startDate\"    },    \"operationalPortfolioDescriptionData\" : {      \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"descriptionBasic\" : [ {        \"monthlyAnalysis\" : \"monthlyAnalysis\",        \"generalDescription\" : \"generalDescription\",        \"languageCode\" : \"languageCode\"      }, {        \"monthlyAnalysis\" : \"monthlyAnalysis\",        \"generalDescription\" : \"generalDescription\",        \"languageCode\" : \"languageCode\"      } ]    },    \"benchmarkId\" : \"benchmarkId\",    \"currentOperationalSuccessFee\" : {      \"endDate\" : \"endDate\",      \"amountFees\" : [ {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      }, {        \"amountTo\" : 6.02745618307040320615897144307382404804229736328125,        \"percentage\" : \"percentage\",        \"amountFrom\" : 0.80082819046101150206595775671303272247314453125      } ],      \"startDate\" : \"startDate\"    },    \"operationalGroup\" : {      \"name\" : \"name\",      \"id\" : 0    },    \"registrationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"id\" : 1,    \"currencyCode\" : \"currencyCode\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateOrder", nickname = "validateOrderUsingPOST", notes = "This method is an indepotent method facilitated to the {User} in order to check whether a call to {addOrder} would be succesfully or not.", response = OrderAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = OrderAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/subdistributors/{subdistributorId}/contracts/{contractId}/orders/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<OrderAndMessages> validateOrderUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Subdistributor}", required = true) @PathVariable("subdistributorId") Long subdistributorId, @ApiParam(value = "The Id of the {Contract}", required = true) @PathVariable("contractId") Long contractId, @ApiParam(value = "body", required = true) @Valid @RequestBody Order order) {

        Random random = new SecureRandom(distributorId.toString().getBytes());

        OrderAndMessages orderAndMessages = new OrderAndMessages();
        orderAndMessages.setOrder(order);

        order.setId(Math.abs(random.nextLong()));
        order.getDealingInstrument().setLabel(RandomStringUtils.randomAlphabetic(10));
        order.getDealingInstrument().setUrl(RandomStringUtils.randomAlphabetic(10));
        order.getOrderAmountData().setAwardedGrossAmount(order.getOrderAmountData().getRequestedGrossAmount());
        order.getOrderAmountData().setAwardedGrossAmountInLocalCurrency(order.getOrderAmountData().getRequestedGrossAmount());

        OffsetDateTime now = OffsetDateTime.now();
        order.getOrderDateData().setOrderedDate(now);
        order.getOrderDateData().setSettlementDate(now);

        Message message = new Message();
        message.setStatus(Message.StatusEnum.OK);
        orderAndMessages.setMessages(Collections.singletonList(message));
        return ResponseEntity.ok(orderAndMessages);

    }


    @ApiOperation(value = "validateSpanishTransferAuthorization", nickname = "validateSpanishTransferAuthorizationUsingPOST", notes = "Validates the authorization of a {SpanishTransfer}", response = SpanishTransferIdAndMessage.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SpanishTransferIdAndMessage.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/authorize/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<SpanishTransferIdAndMessage>> validateSpanishTransferAuthorizationUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "ids", required = true) @Valid @RequestBody List<Long> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"spanishTransferId\" : 0,  \"message\" : {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateSpanishTransfer", nickname = "validateSpanishTransferUsingPOST", notes = "", response = SpanishTransferAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = SpanishTransferAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/spanishTransfers/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<SpanishTransferAndMessages> validateSpanishTransferUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody SpanishTransfer spanishTransfer) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"spanishTransfer\" : {    \"exchangeRateApplied\" : 4.1456080298839363962315474054776132106781005859375,    \"transactionExternalReference\" : \"transactionExternalReference\",    \"processedAsSwitch\" : true,    \"sourceItem\" : {      \"marketer\" : {        \"entityCnmvCode\" : \"entityCnmvCode\",        \"entityCnmvNif\" : \"entityCnmvNif\",        \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",        \"dealingInstrumentName\" : \"dealingInstrumentName\",        \"currentAccountCode\" : \"currentAccountCode\",        \"entityName\" : \"entityName\",        \"dealingInstrumentNif\" : \"dealingInstrumentNif\"      },      \"etfData\" : {        \"brokerId\" : 2,        \"stockExchangeId\" : \"stockExchangeId\"      },      \"feeData\" : {        \"secondSpanishTransferFeeAmount\" : 3.61607674925191080461672754609026014804840087890625,        \"firstSpanishTransferFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"firstSpanishTransferFeePercentage\" : 9.301444243932575517419536481611430644989013671875,        \"secondSpanishTransferFeePercentage\" : 2.027123023002321833274663731572218239307403564453125      },      \"omnibus\" : true,      \"distributorId\" : 5,      \"dealingInstrumentExternalCodeKeyValues\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ],      \"dealingInstrumentType\" : \"FUND\",      \"contractExternalReference\" : \"contractExternalReference\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    },    \"substatusCode\" : \"substatusCode\",    \"basicData\" : {      \"externalReference\" : \"externalReference\",      \"shares\" : 1.46581298050294517310021547018550336360931396484375,      \"amount\" : 0.80082819046101150206595775671303272247314453125,      \"requestType\" : \"OUTSIDE\",      \"distributorId\" : 6,      \"transferType\" : \"TOTAL\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transferClass\" : \"ENTRY\",      \"subdistributorId\" : 5,      \"statusCode\" : \"statusCode\"    },    \"principals\" : [ {      \"firstName\" : \"firstName\",      \"surname\" : \"surname\",      \"secondSurname\" : \"secondSurname\",      \"taxpayerId\" : \"taxpayerId\"    }, {      \"firstName\" : \"firstName\",      \"surname\" : \"surname\",      \"secondSurname\" : \"secondSurname\",      \"taxpayerId\" : \"taxpayerId\"    } ],    \"dateData\" : {      \"sourceDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"destinationDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"id\" : \"id\",    \"destinationItem\" : {      \"marketer\" : {        \"entityCnmvCode\" : \"entityCnmvCode\",        \"entityCnmvNif\" : \"entityCnmvNif\",        \"dealingInstrumentCnmvCode\" : \"dealingInstrumentCnmvCode\",        \"dealingInstrumentName\" : \"dealingInstrumentName\",        \"currentAccountCode\" : \"currentAccountCode\",        \"entityName\" : \"entityName\",        \"dealingInstrumentNif\" : \"dealingInstrumentNif\"      },      \"etfData\" : {        \"brokerId\" : 2,        \"stockExchangeId\" : \"stockExchangeId\"      },      \"feeData\" : {        \"secondSpanishTransferFeeAmount\" : 3.61607674925191080461672754609026014804840087890625,        \"firstSpanishTransferFeeAmount\" : 7.061401241503109105224211816675961017608642578125,        \"firstSpanishTransferFeePercentage\" : 9.301444243932575517419536481611430644989013671875,        \"secondSpanishTransferFeePercentage\" : 2.027123023002321833274663731572218239307403564453125      },      \"omnibus\" : true,      \"distributorId\" : 5,      \"dealingInstrumentExternalCodeKeyValues\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ],      \"dealingInstrumentType\" : \"FUND\",      \"contractExternalReference\" : \"contractExternalReference\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"currencyCode\" : \"currencyCode\"    }  },  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateStockTransferAuthorizations", nickname = "validateStockTransferAuthorizationsUsingPOST", notes = "Validate a list of {StockTransfer} Authorizations", response = StockTransferIdAndMessage.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = StockTransferIdAndMessage.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/stockTransfers/authorize/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<StockTransferIdAndMessage>> validateStockTransferAuthorizationsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"stockTransferId\" : \"stockTransferId\",  \"message\" : {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateStockTransfer", nickname = "validateStockTransferUsingPOST", notes = "Validate Stock transfer", response = StockTransferAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = StockTransferAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/stockTransfers/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<StockTransferAndMessages> validateStockTransferUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody StockTransfer stockTransfer) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ],  \"stockTransfer\" : {    \"intermediaryBic\" : \"intermediaryBic\",    \"stockTransferSharesData\" : {      \"sharesAfterDistribution\" : 2.027123023002321833274663731572218239307403564453125,      \"requestedSharesAsWords\" : \"requestedSharesAsWords\",      \"requestedShares\" : 3.61607674925191080461672754609026014804840087890625,      \"sharesBeforeDistribution\" : 4.1456080298839363962315474054776132106781005859375    },    \"stockTransferItalianRetailMarketData\" : {      \"weightedAveragePrice\" : 7.061401241503109105224211816675961017608642578125,      \"withheldAmount\" : 9.301444243932575517419536481611430644989013671875,      \"weightedAverageCost\" : 2.3021358869347654518833223846741020679473876953125    },    \"senderBic\" : \"senderBic\",    \"swiftText\" : \"swiftText\",    \"stockTransferBasicData\" : {      \"productId\" : 5,      \"stockTransferStatusCode\" : \"stockTransferStatusCode\",      \"distributorId\" : 1,      \"stockTransferTypeCode\" : \"stockTransferTypeCode\",      \"dealingInstrumentType\" : \"FUND\",      \"categoryCode\" : \"categoryCode\",      \"contractExternalReference\" : \"contractExternalReference\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"externalReference\" : \"externalReference\",      \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"additionalReferenceSwift\" : \"additionalReferenceSwift\",      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"additionalReference\" : \"additionalReference\",      \"subdistributorId\" : 5,      \"dealingFundHouseId\" : 6,      \"followupDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"stockTransferSettingsData\" : {      \"applicationFormAccessible\" : true,      \"errorCode\" : \"errorCode\",      \"platformAccount\" : \"platformAccount\",      \"signedApplicationFormAccessible\" : true,      \"platformCode\" : \"platformCode\",      \"taxTransactionHistory\" : true    },    \"historyAccessible\" : true,    \"id\" : \"id\",    \"currencyCode\" : \"currencyCode\",    \"stockTransferTransactionData\" : {      \"externalReference\" : \"externalReference\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"internalStockTransferData\" : {      \"associatedProductId\" : 0,      \"associatedContractExternalReference\" : \"associatedContractExternalReference\",      \"associatedTransactionExternalReference\" : \"associatedTransactionExternalReference\"    },    \"externalStockTransferData\" : {      \"address\" : \"address\",      \"externalAccountCode\" : \"externalAccountCode\",      \"document\" : \"document\",      \"externalCurrentAccountCode\" : \"externalCurrentAccountCode\",      \"name\" : \"name\",      \"externalAccountName\" : \"externalAccountName\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateTransactionAuthorizations", nickname = "validateTransactionAuthorizationsUsingPOST", notes = "Validates {Transaction}s Authorizations", response = TransactionIdAndMessage.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = TransactionIdAndMessage.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/transactions/authorize/validate",
        produces = {"application/json"},
        consumes = {"application/json"},
        method = RequestMethod.POST)
    default ResponseEntity<List<TransactionIdAndMessage>> validateTransactionAuthorizationsUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "body", required = true) @Valid @RequestBody List<Long> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  },  \"transactionId\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "viewed", nickname = "viewedUsingPOST", notes = "update portfolio to status viewed", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags = {"distributors",})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.")})
    @RequestMapping(value = "/distributors/{distributorId}/portfolios/theoretical/{portfolioId}/viewed",
        method = RequestMethod.POST)
    default ResponseEntity<Void> viewedUsingPOST(@ApiParam(value = "The Id of the {Distributor}", required = true) @PathVariable("distributorId") Long distributorId, @ApiParam(value = "The Id of the {Portfolio}", required = true) @PathVariable("portfolioId") String portfolioId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
