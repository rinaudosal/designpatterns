/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AnnualBenchmarkAndInstrumentPerformance;
import org.openapitools.model.BreakdownFilterAndPageFilter;
import org.openapitools.model.ChangeCredentialsByTokenFilter;
import org.openapitools.model.ChangeCredentialsFilter;
import org.openapitools.model.Composition;
import org.openapitools.model.CompositionAndPage;
import org.openapitools.model.CumulativeBenchmarkAndInstrumentPerformance;
import org.openapitools.model.ExcelAndPage;
import org.openapitools.model.FavoriteInstrumentFilter;
import org.openapitools.model.FavoriteInstrumentFilterAndPageFilter;
import org.openapitools.model.FavoriteInstrumentRawFilterAndPageFilter;
import org.openapitools.model.FavoriteInstrumentRawXlsFilterAndPageFilter;
import org.openapitools.model.Fees;
import org.openapitools.model.FeesFilter;
import org.openapitools.model.GenericBreakdownAndPage;
import org.openapitools.model.HistoricalPerformanceFilterAndPageFilter;
import org.openapitools.model.HistoricalPerformancesAndPage;
import org.openapitools.model.HoldingBreakdownAndPage;
import org.openapitools.model.ImpersonationAndPage;
import org.openapitools.model.ImpersonationFilterAndPageFilter;
import org.openapitools.model.KeyValueAndPage;
import java.util.List;
import org.openapitools.model.MarketPerformanceFilter;
import org.openapitools.model.MigratedObject;
import org.openapitools.model.PageFilter;
import org.openapitools.model.PerformanceFilter;
import org.openapitools.model.PerformanceFilterAndPageFilter;
import org.openapitools.model.Portfolio;
import org.openapitools.model.PortfolioAndPage;
import org.openapitools.model.Preferences;
import org.openapitools.model.PriceAndPage;
import org.openapitools.model.PriceFilterAndPageFilter;
import org.openapitools.model.QuarterlyPerformancesAndPage;
import org.openapitools.model.RawSearchInstrumentResultAndPage;
import org.springframework.core.io.Resource;
import org.openapitools.model.ResourceReferenceAndPage;
import org.openapitools.model.RiskClassification;
import org.openapitools.model.SavedComparison;
import org.openapitools.model.SavedComparisonAndPage;
import org.openapitools.model.SavedSearch;
import org.openapitools.model.SavedSearchAndPage;
import org.openapitools.model.SavedSearchFilterAndPageFilter;
import org.openapitools.model.Settings;
import org.openapitools.model.SolvencyFundAndPage;
import org.openapitools.model.SolvencyFundIds;
import org.openapitools.model.SolvencyIntermediariesAndPage;
import org.openapitools.model.SolvencyIntermediary;
import org.openapitools.model.Statistic;
import org.openapitools.model.StatisticFilter;
import org.openapitools.model.UploadedFileResult;
import org.openapitools.model.UploadedFileStockTransferResult;
import org.openapitools.model.UploadedOrder;
import org.openapitools.model.UploadedOrderAndPage;
import org.openapitools.model.UploadedOrderAndSignature;
import org.openapitools.model.UploadedOrderIds;
import org.openapitools.model.UploadedStockTransfer;
import org.openapitools.model.UploadedStockTransferAndPage;
import org.openapitools.model.UploadedStockTransferAndSignature;
import org.openapitools.model.UploadedStockTransferIds;
import org.openapitools.model.User;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "users", description = "the users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "addFavoriteInstrument", nickname = "addFavoriteInstrumentUsingPOST", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/favorites/{instrumentId}/add",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addFavoriteInstrumentUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Fund} or {ETF}",required=true) @PathVariable("instrumentId") Long instrumentId,@ApiParam(value = "body"  )  @Valid @RequestBody FavoriteInstrumentFilter favoriteInstrumentFilter) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addSavedComparison", nickname = "addSavedComparisonUsingPOST", notes = "", response = SavedComparison.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SavedComparison.class),
        @ApiResponse(code = 201, message = "successful operation", response = SavedComparison.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/comparisons",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SavedComparison> addSavedComparisonUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The SavedComparison object to SavedComparison from form data" ,required=true )  @Valid @RequestBody SavedComparison savedComparison) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instruments\" : [ {    \"instrumentType\" : \"FUND\",    \"instrumentId\" : \"instrumentId\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"instrumentType\" : \"FUND\",    \"instrumentId\" : \"instrumentId\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"name\" : \"name\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addSearch", nickname = "addSearchUsingPOST", notes = "Save a search with specific save search", response = SavedSearch.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SavedSearch.class),
        @ApiResponse(code = 201, message = "successful operation", response = SavedSearch.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/searches",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SavedSearch> addSearchUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The SavedSearch object to save search criteria from form data" ,required=true )  @Valid @RequestBody SavedSearch savedSearch) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"searchType\" : \"FUND\",  \"name\" : \"name\",  \"instrumentSearch\" : {    \"feesSearch\" : {      \"afbAppliedRedemption\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"operatingCashFlowDate\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"performance\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"totalFeeApplied\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"annual\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"initialMax\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"operatingCashFlow\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"afbAppliedSubscription\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"distribution\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"exitMax\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"instrumentSearchByCode\" : {      \"values\" : [ \"values\", \"values\" ],      \"instrumentExternalCode\" : \"instrumentExternalCode\"    },    \"instrumentType\" : \"FUND\",    \"breakdownSearch\" : {      \"geographicArea\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"creditQuality\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"breakdownDate\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"currency\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"holdings\" : {        \"holding\" : \"holding\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"assetAllocation\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"sector\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      }    },    \"performanceSearch\" : {      \"annual\" : {        \"history1\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history2\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history3\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"ytd\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history4\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history5\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"cumulative\" : {        \"oneMonth\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"threeMonths\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"oneYear\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"week\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"fromInception\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"threeYears\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"fiveYears\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"twoMonth\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"day\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"sixMonths\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      }    },    \"pricesTypesSearch\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"offer\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"nav\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"bid\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"ratingsSearch\" : {      \"blueRating\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"citywire\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"morningStar\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"regulatoryDataCode\" : \"regulatoryDataCode\",    \"fundDetailsSearch\" : {      \"fundCharacteristics\" : {        \"riskLevel\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"cnmvInstrument\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"domicilieCountryCode\" : \"domicilieCountryCode\",        \"transferable\" : true,        \"benchmarkName\" : \"benchmarkName\",        \"rebalanceFrequencyCode\" : \"rebalanceFrequencyCode\",        \"inceptionDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"countryOfRegitrationCode\" : \"countryOfRegitrationCode\",        \"parentClass\" : true,        \"datePortfolio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"distributionFrequencyCode\" : \"distributionFrequencyCode\",        \"currencyAumCode\" : \"currencyAumCode\",        \"shareTypeCode\" : \"shareTypeCode\",        \"collectiveInvestmentTransferableSecurities\" : true,        \"fundAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"dateAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"minimunInvestment\" : {          \"initial\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"subsequent\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"typeValue\" : \"UNITS\"        },        \"shareAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"lastPriceDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"baseCurrencyCode\" : \"baseCurrencyCode\",        \"fundTypeCode\" : \"fundTypeCode\",        \"name\" : [ \"name\", \"name\" ],        \"shariaCompliant\" : true,        \"currencyCode\" : \"currencyCode\",        \"initialAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"lastPrice\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"fundRange\" : {        \"etfAdministrator\" : \"etfAdministrator\",        \"fundHouseGroupId\" : 5,        \"custodian\" : \"custodian\",        \"collectiveInvestmentSchemeId\" : 1,        \"fundHouseId\" : 2,        \"universeCode\" : \"universeCode\",        \"dealingFundHouseId\" : 5,        \"marketIdentifierCode\" : \"marketIdentifierCode\"      },      \"fundClassification\" : {        \"classificationKeyValues\" : [ {          \"value\" : \"value\",          \"key\" : \"key\"        }, {          \"value\" : \"value\",          \"key\" : \"key\"        } ],        \"whiteassimilated\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"marketRegistrationKeyValues\" : [ {          \"value\" : \"value\",          \"key\" : \"key\"        }, {          \"value\" : \"value\",          \"key\" : \"key\"        } ],        \"whiteassimilatedAnt\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"euSavingDirectiveCode\" : \"euSavingDirectiveCode\"      }    },    \"statisticSearch\" : {      \"absolute\" : {        \"performance\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"maxDrawdown\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"sharpeRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"volatility\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"relative\" : {        \"r2\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"trackingError\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"correlation\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"infoRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"alpha\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"treynorRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"jesenAlpha\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"beta\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      }    },    \"marketId\" : 6  },  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addSolvencyFunds", nickname = "addSolvencyFundsUsingPOST", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/solvency/intermediaries/{intermediaryId}/funds/add",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addSolvencyFundsUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody SolvencyFundIds solvencyFundIds) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addUserPortfolioComposition", nickname = "addUserPortfolioCompositionUsingPOST", notes = "Add a {Portfolio}'s {Composition}", response = Composition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Composition.class),
        @ApiResponse(code = 201, message = "successful operation", response = Composition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/compositions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Composition> addUserPortfolioCompositionUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody Composition composition) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\",  \"resources\" : [ {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "addUserPortfolio", nickname = "addUserPortfolioUsingPOST", notes = "", response = Portfolio.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Portfolio.class),
        @ApiResponse(code = 201, message = "successful operation", response = Portfolio.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Portfolio> addUserPortfolioUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody Portfolio portfolio) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : [ {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"fees\" : {    \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,    \"total\" : 2.027123023002321833274663731572218239307403564453125,    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performance\" : 3.61607674925191080461672754609026014804840087890625,    \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,    \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,    \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,    \"distribution\" : 5.962133916683182377482808078639209270477294921875,    \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,    \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,    \"others\" : 9.301444243932575517419536481611430644989013671875  },  \"typeShare\" : \"ACUMULATION\",  \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",  \"investmentObjective\" : \"investmentObjective\",  \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"lastCompositionId\" : 6,  \"lastBenchmarkCompositionId\" : 0,  \"emails\" : [ \"emails\", \"emails\" ],  \"portfolioType\" : \"SIMULATED\",  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"rebalancingTypeCode\" : \"rebalancingTypeCode\",  \"name\" : \"name\",  \"id\" : \"id\",  \"currencyCode\" : \"currencyCode\",  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "authorizedSolvencyFund", nickname = "authorizedSolvencyFundUsingPOST", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/solvency/funds/authorized",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> authorizedSolvencyFundUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody SolvencyFundIds solvencyFundIds) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "cancelUploadedOrders", nickname = "cancelUploadedOrdersUsingPUT", notes = "Cancel a list of {UploadeOrder}s", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedOrders/cancel",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> cancelUploadedOrdersUsingPUT(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody UploadedOrderIds uploadedOrderIds) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "cancelUploadedStockTransfers", nickname = "cancelUploadedStockTransfersUsingPUT", notes = "Cancel a list of {UploadeStockTransfer}s", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedStockTransfers/cancel",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> cancelUploadedStockTransfersUsingPUT(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody UploadedStockTransferIds uploadedStockTransferIds) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "changePassword", nickname = "changePasswordUsingPUT", notes = "Changes the password of the {User}", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/credentials/password/change",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> changePasswordUsingPUT(@ApiParam(value = "filter" ,required=true )  @Valid @RequestBody ChangeCredentialsFilter changeCredentialsFilter) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "changeSignature", nickname = "changeSignatureUsingPUT", notes = "Changes the signature of the {User}", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/credentials/signature/change",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> changeSignatureUsingPUT(@ApiParam(value = "filter" ,required=true )  @Valid @RequestBody ChangeCredentialsFilter changeCredentialsFilter) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deleteFavoriteInstrument", nickname = "deleteFavoriteInstrumentUsingPOST", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/favorites/{instrumentId}/delete",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> deleteFavoriteInstrumentUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Fund} or {ETF}",required=true) @PathVariable("instrumentId") Long instrumentId,@ApiParam(value = "body"  )  @Valid @RequestBody FavoriteInstrumentFilter favoriteInstrumentFilter) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deleteSavedComparisonById", nickname = "deleteSavedComparisonByIdUsingDELETE", notes = "Delete a comparison form data", response = SavedComparison.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SavedComparison.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/comparisons/{savedComparisonId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<SavedComparison> deleteSavedComparisonByIdUsingDELETE(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the  {SavedComparison}",required=true) @PathVariable("savedComparisonId") String savedComparisonId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instruments\" : [ {    \"instrumentType\" : \"FUND\",    \"instrumentId\" : \"instrumentId\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"instrumentType\" : \"FUND\",    \"instrumentId\" : \"instrumentId\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"name\" : \"name\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deleteSavedSearch", nickname = "deleteSavedSearchUsingDELETE", notes = "Delete a search criteria  with form data", response = SavedSearch.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SavedSearch.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/searches/{savedSearchId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<SavedSearch> deleteSavedSearchUsingDELETE(@ApiParam(value = "The Id of the {SavedSearch}",required=true) @PathVariable("savedSearchId") String savedSearchId,@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"searchType\" : \"FUND\",  \"name\" : \"name\",  \"instrumentSearch\" : {    \"feesSearch\" : {      \"afbAppliedRedemption\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"operatingCashFlowDate\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"performance\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"totalFeeApplied\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"annual\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"initialMax\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"operatingCashFlow\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"afbAppliedSubscription\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"distribution\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"exitMax\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"instrumentSearchByCode\" : {      \"values\" : [ \"values\", \"values\" ],      \"instrumentExternalCode\" : \"instrumentExternalCode\"    },    \"instrumentType\" : \"FUND\",    \"breakdownSearch\" : {      \"geographicArea\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"creditQuality\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"breakdownDate\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"currency\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"holdings\" : {        \"holding\" : \"holding\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"assetAllocation\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"sector\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      }    },    \"performanceSearch\" : {      \"annual\" : {        \"history1\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history2\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history3\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"ytd\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history4\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history5\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"cumulative\" : {        \"oneMonth\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"threeMonths\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"oneYear\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"week\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"fromInception\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"threeYears\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"fiveYears\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"twoMonth\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"day\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"sixMonths\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      }    },    \"pricesTypesSearch\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"offer\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"nav\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"bid\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"ratingsSearch\" : {      \"blueRating\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"citywire\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"morningStar\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"regulatoryDataCode\" : \"regulatoryDataCode\",    \"fundDetailsSearch\" : {      \"fundCharacteristics\" : {        \"riskLevel\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"cnmvInstrument\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"domicilieCountryCode\" : \"domicilieCountryCode\",        \"transferable\" : true,        \"benchmarkName\" : \"benchmarkName\",        \"rebalanceFrequencyCode\" : \"rebalanceFrequencyCode\",        \"inceptionDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"countryOfRegitrationCode\" : \"countryOfRegitrationCode\",        \"parentClass\" : true,        \"datePortfolio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"distributionFrequencyCode\" : \"distributionFrequencyCode\",        \"currencyAumCode\" : \"currencyAumCode\",        \"shareTypeCode\" : \"shareTypeCode\",        \"collectiveInvestmentTransferableSecurities\" : true,        \"fundAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"dateAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"minimunInvestment\" : {          \"initial\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"subsequent\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"typeValue\" : \"UNITS\"        },        \"shareAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"lastPriceDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"baseCurrencyCode\" : \"baseCurrencyCode\",        \"fundTypeCode\" : \"fundTypeCode\",        \"name\" : [ \"name\", \"name\" ],        \"shariaCompliant\" : true,        \"currencyCode\" : \"currencyCode\",        \"initialAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"lastPrice\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"fundRange\" : {        \"etfAdministrator\" : \"etfAdministrator\",        \"fundHouseGroupId\" : 5,        \"custodian\" : \"custodian\",        \"collectiveInvestmentSchemeId\" : 1,        \"fundHouseId\" : 2,        \"universeCode\" : \"universeCode\",        \"dealingFundHouseId\" : 5,        \"marketIdentifierCode\" : \"marketIdentifierCode\"      },      \"fundClassification\" : {        \"classificationKeyValues\" : [ {          \"value\" : \"value\",          \"key\" : \"key\"        }, {          \"value\" : \"value\",          \"key\" : \"key\"        } ],        \"whiteassimilated\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"marketRegistrationKeyValues\" : [ {          \"value\" : \"value\",          \"key\" : \"key\"        }, {          \"value\" : \"value\",          \"key\" : \"key\"        } ],        \"whiteassimilatedAnt\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"euSavingDirectiveCode\" : \"euSavingDirectiveCode\"      }    },    \"statisticSearch\" : {      \"absolute\" : {        \"performance\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"maxDrawdown\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"sharpeRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"volatility\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"relative\" : {        \"r2\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"trackingError\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"correlation\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"infoRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"alpha\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"treynorRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"jesenAlpha\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"beta\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      }    },    \"marketId\" : 6  },  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deleteSolvencyFunds", nickname = "deleteSolvencyFundsUsingPOST", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/solvency/intermediaries/{intermediaryId}/funds/delete",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> deleteSolvencyFundsUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody SolvencyFundIds solvencyFundIds) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deleteUserPortfolioById", nickname = "deleteUserPortfolioByIdUsingDELETE", notes = "Delete a portfolio", response = Portfolio.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Portfolio.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Portfolio> deleteUserPortfolioByIdUsingDELETE(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : [ {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"fees\" : {    \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,    \"total\" : 2.027123023002321833274663731572218239307403564453125,    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performance\" : 3.61607674925191080461672754609026014804840087890625,    \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,    \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,    \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,    \"distribution\" : 5.962133916683182377482808078639209270477294921875,    \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,    \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,    \"others\" : 9.301444243932575517419536481611430644989013671875  },  \"typeShare\" : \"ACUMULATION\",  \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",  \"investmentObjective\" : \"investmentObjective\",  \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"lastCompositionId\" : 6,  \"lastBenchmarkCompositionId\" : 0,  \"emails\" : [ \"emails\", \"emails\" ],  \"portfolioType\" : \"SIMULATED\",  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"rebalancingTypeCode\" : \"rebalancingTypeCode\",  \"name\" : \"name\",  \"id\" : \"id\",  \"currencyCode\" : \"currencyCode\",  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateUserPortfolioSimulatorReportAsPdf", nickname = "generateUserPortfolioSimulatorReportAsPdfUsingPOST", notes = "Generate user portfolio simulator report as a PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/report/simulator/pdf",
        produces = { "application/pdf" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateUserPortfolioSimulatorReportAsPdfUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody MarketPerformanceFilter marketPerformanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateUserPortfolioSimulatorReportAsXls", nickname = "generateUserPortfolioSimulatorReportAsXlsUsingPOST", notes = "Generate user portfolio simulator report as a XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/report/simulator/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateUserPortfolioSimulatorReportAsXlsUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody MarketPerformanceFilter marketPerformanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSavedComparisonById", nickname = "getSavedComparisonByIdUsingGET", notes = "", response = SavedComparison.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SavedComparison.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/comparisons/{savedComparisonId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<SavedComparison> getSavedComparisonByIdUsingGET(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the  {SavedComparison}",required=true) @PathVariable("savedComparisonId") String savedComparisonId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instruments\" : [ {    \"instrumentType\" : \"FUND\",    \"instrumentId\" : \"instrumentId\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"instrumentType\" : \"FUND\",    \"instrumentId\" : \"instrumentId\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"name\" : \"name\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSavedSearchById", nickname = "getSavedSearchByIdUsingGET", notes = "Updates a search criteria with form data", response = SavedSearch.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SavedSearch.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/searches/{savedSearchId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<SavedSearch> getSavedSearchByIdUsingGET(@ApiParam(value = "The Id of the {SavedSearch}",required=true) @PathVariable("savedSearchId") String savedSearchId,@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"searchType\" : \"FUND\",  \"name\" : \"name\",  \"instrumentSearch\" : {    \"feesSearch\" : {      \"afbAppliedRedemption\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"operatingCashFlowDate\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"performance\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"totalFeeApplied\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"annual\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"initialMax\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"operatingCashFlow\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"afbAppliedSubscription\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"distribution\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"exitMax\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"instrumentSearchByCode\" : {      \"values\" : [ \"values\", \"values\" ],      \"instrumentExternalCode\" : \"instrumentExternalCode\"    },    \"instrumentType\" : \"FUND\",    \"breakdownSearch\" : {      \"geographicArea\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"creditQuality\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"breakdownDate\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"currency\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"holdings\" : {        \"holding\" : \"holding\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"assetAllocation\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"sector\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      }    },    \"performanceSearch\" : {      \"annual\" : {        \"history1\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history2\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history3\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"ytd\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history4\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history5\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"cumulative\" : {        \"oneMonth\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"threeMonths\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"oneYear\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"week\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"fromInception\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"threeYears\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"fiveYears\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"twoMonth\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"day\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"sixMonths\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      }    },    \"pricesTypesSearch\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"offer\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"nav\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"bid\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"ratingsSearch\" : {      \"blueRating\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"citywire\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"morningStar\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"regulatoryDataCode\" : \"regulatoryDataCode\",    \"fundDetailsSearch\" : {      \"fundCharacteristics\" : {        \"riskLevel\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"cnmvInstrument\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"domicilieCountryCode\" : \"domicilieCountryCode\",        \"transferable\" : true,        \"benchmarkName\" : \"benchmarkName\",        \"rebalanceFrequencyCode\" : \"rebalanceFrequencyCode\",        \"inceptionDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"countryOfRegitrationCode\" : \"countryOfRegitrationCode\",        \"parentClass\" : true,        \"datePortfolio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"distributionFrequencyCode\" : \"distributionFrequencyCode\",        \"currencyAumCode\" : \"currencyAumCode\",        \"shareTypeCode\" : \"shareTypeCode\",        \"collectiveInvestmentTransferableSecurities\" : true,        \"fundAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"dateAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"minimunInvestment\" : {          \"initial\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"subsequent\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"typeValue\" : \"UNITS\"        },        \"shareAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"lastPriceDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"baseCurrencyCode\" : \"baseCurrencyCode\",        \"fundTypeCode\" : \"fundTypeCode\",        \"name\" : [ \"name\", \"name\" ],        \"shariaCompliant\" : true,        \"currencyCode\" : \"currencyCode\",        \"initialAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"lastPrice\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"fundRange\" : {        \"etfAdministrator\" : \"etfAdministrator\",        \"fundHouseGroupId\" : 5,        \"custodian\" : \"custodian\",        \"collectiveInvestmentSchemeId\" : 1,        \"fundHouseId\" : 2,        \"universeCode\" : \"universeCode\",        \"dealingFundHouseId\" : 5,        \"marketIdentifierCode\" : \"marketIdentifierCode\"      },      \"fundClassification\" : {        \"classificationKeyValues\" : [ {          \"value\" : \"value\",          \"key\" : \"key\"        }, {          \"value\" : \"value\",          \"key\" : \"key\"        } ],        \"whiteassimilated\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"marketRegistrationKeyValues\" : [ {          \"value\" : \"value\",          \"key\" : \"key\"        }, {          \"value\" : \"value\",          \"key\" : \"key\"        } ],        \"whiteassimilatedAnt\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"euSavingDirectiveCode\" : \"euSavingDirectiveCode\"      }    },    \"statisticSearch\" : {      \"absolute\" : {        \"performance\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"maxDrawdown\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"sharpeRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"volatility\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"relative\" : {        \"r2\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"trackingError\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"correlation\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"infoRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"alpha\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"treynorRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"jesenAlpha\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"beta\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      }    },    \"marketId\" : 6  },  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getSolvencyIntermediaryById", nickname = "getSolvencyIntermediaryByIdUsingGET", notes = "", response = SolvencyIntermediary.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SolvencyIntermediary.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/solvency/intermediaries/{intermediaryId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<SolvencyIntermediary> getSolvencyIntermediaryByIdUsingGET(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {SolvencyIntermediary}",required=true) @PathVariable("intermediaryId") String intermediaryId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"solvencyFunds\" : [ {    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"name\" : \"name\",    \"description\" : \"description\",    \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"id\" : \"id\",    \"isin\" : \"isin\"  }, {    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"name\" : \"name\",    \"description\" : \"description\",    \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"id\" : \"id\",    \"isin\" : \"isin\"  } ],  \"name\" : \"name\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getUploadedOrderById", nickname = "getUploadedOrderByIdUsingGET", notes = "Return an {UploadedOrder}", response = UploadedOrder.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UploadedOrder.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedOrders/{uploadedOrderId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UploadedOrder> getUploadedOrderByIdUsingGET(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {UploadedOrder}",required=true) @PathVariable("uploadedOrderId") Long uploadedOrderId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ],  \"id\" : 0,  \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"order\" : {    \"orderTypeCode\" : \"orderTypeCode\",    \"orderDateData\" : {      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"depositaryId\" : 6,    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"orderAmountData\" : {      \"awardedGrossAmount\" : 5.63737665663332876420099637471139430999755859375,      \"awardedGrossAmountInLocalCurrency\" : 2.3021358869347654518833223846741020679473876953125,      \"requestedGrossAmount\" : 7.061401241503109105224211816675961017608642578125    },    \"orderContractData\" : {      \"contractExternalReference\" : \"contractExternalReference\",      \"contractAccount\" : {        \"assetAccountCode\" : \"assetAccountCode\",        \"currentAccountCode\" : \"currentAccountCode\"      }    },    \"orderSettingsData\" : {      \"omnibus\" : true,      \"dealingCurrencyPolicy\" : \"INSTRUMENT_CURRENCY\"    },    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"id\" : 5,    \"subdistributorId\" : 4,    \"dealingFundHouseId\" : 0,    \"orderEtfData\" : {      \"brokerId\" : 9,      \"etfDealingData\" : {        \"launchPrice\" : 2.027123023002321833274663731572218239307403564453125,        \"pendingShares\" : 4.1456080298839363962315474054776132106781005859375,        \"dealingTypeCode\" : \"dealingTypeCode\",        \"validityPeriodCode\" : \"validityPeriodCode\",        \"executeShares\" : 3.61607674925191080461672754609026014804840087890625,        \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"stockExchangeId\" : \"stockExchangeId\"    },    \"comments\" : \"comments\",    \"productId\" : 1,    \"distributorId\" : 1,    \"paymentCurrencyCode\" : \"paymentCurrencyCode\",    \"dealingInstrumentType\" : \"FUND\",    \"orderSharesData\" : {      \"requestedShares\" : 7.4577447736837658709418974467553198337554931640625    },    \"localCurrencyCode\" : \"localCurrencyCode\",    \"externalReference\" : \"externalReference\",    \"orderFeeData\" : {      \"feePerDealingInstrument\" : 7.3862819483858839220147274318151175975799560546875,      \"secondOrderFeePercentage\" : 6.8468526983526398765889098285697400569915771484375,      \"secondOrderFeeAmount\" : 1.489415909854170383397331534069962799549102783203125,      \"firstOrderFeePercentage\" : 1.024645700144157789424070870154537260532379150390625,      \"firstOrderFeeAmount\" : 1.231513536777255612975068288506008684635162353515625    },    \"orderItalianRetailMarketData\" : {      \"feeChargeOption\" : \"FRONTLOAD\"    },    \"orderSwitchData\" : {      \"associatedOrderExternalReference\" : \"associatedOrderExternalReference\",      \"associatedDealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"associatedDealingInstrumentType\" : \"FUND\",      \"associatedCurrencyCode\" : \"associatedCurrencyCode\"    },    \"orderStatusCode\" : \"orderStatusCode\",    \"currencyCode\" : \"currencyCode\"  },  \"status\" : \"OK\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getUploadedStockTransferById", nickname = "getUploadedStockTransferByIdUsingGET", notes = "Return an {UploadedStockTransfer}", response = UploadedStockTransfer.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UploadedStockTransfer.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedStockTransfers/{uploadedOrderId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UploadedStockTransfer> getUploadedStockTransferByIdUsingGET(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {UploadedStockTransfer}",required=true) @PathVariable("uploadedStockTransferId") Long uploadedStockTransferId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ],  \"stockTransfer\" : {    \"intermediaryBic\" : \"intermediaryBic\",    \"stockTransferSharesData\" : {      \"sharesAfterDistribution\" : 2.027123023002321833274663731572218239307403564453125,      \"requestedSharesAsWords\" : \"requestedSharesAsWords\",      \"requestedShares\" : 3.61607674925191080461672754609026014804840087890625,      \"sharesBeforeDistribution\" : 4.1456080298839363962315474054776132106781005859375    },    \"stockTransferItalianRetailMarketData\" : {      \"weightedAveragePrice\" : 7.061401241503109105224211816675961017608642578125,      \"withheldAmount\" : 9.301444243932575517419536481611430644989013671875,      \"weightedAverageCost\" : 2.3021358869347654518833223846741020679473876953125    },    \"senderBic\" : \"senderBic\",    \"swiftText\" : \"swiftText\",    \"stockTransferBasicData\" : {      \"productId\" : 5,      \"stockTransferStatusCode\" : \"stockTransferStatusCode\",      \"distributorId\" : 1,      \"stockTransferTypeCode\" : \"stockTransferTypeCode\",      \"dealingInstrumentType\" : \"FUND\",      \"categoryCode\" : \"categoryCode\",      \"contractExternalReference\" : \"contractExternalReference\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"externalReference\" : \"externalReference\",      \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"additionalReferenceSwift\" : \"additionalReferenceSwift\",      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"additionalReference\" : \"additionalReference\",      \"subdistributorId\" : 5,      \"dealingFundHouseId\" : 6,      \"followupDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"stockTransferSettingsData\" : {      \"applicationFormAccessible\" : true,      \"errorCode\" : \"errorCode\",      \"platformAccount\" : \"platformAccount\",      \"signedApplicationFormAccessible\" : true,      \"platformCode\" : \"platformCode\",      \"taxTransactionHistory\" : true    },    \"historyAccessible\" : true,    \"id\" : \"id\",    \"currencyCode\" : \"currencyCode\",    \"stockTransferTransactionData\" : {      \"externalReference\" : \"externalReference\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"internalStockTransferData\" : {      \"associatedProductId\" : 0,      \"associatedContractExternalReference\" : \"associatedContractExternalReference\",      \"associatedTransactionExternalReference\" : \"associatedTransactionExternalReference\"    },    \"externalStockTransferData\" : {      \"address\" : \"address\",      \"externalAccountCode\" : \"externalAccountCode\",      \"document\" : \"document\",      \"externalCurrentAccountCode\" : \"externalCurrentAccountCode\",      \"name\" : \"name\",      \"externalAccountName\" : \"externalAccountName\"    }  },  \"id\" : 0,  \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"status\" : \"OK\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getUserById", nickname = "getUserByIdUsingGET", notes = "", response = User.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<User> getUserByIdUsingGET(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"firstname\" : \"firstname\",  \"defaulLanguageCode\" : \"defaulLanguageCode\",  \"surname\" : \"surname\",  \"secondSurname\" : \"secondSurname\",  \"id\" : \"id\",  \"email\" : \"email\",  \"username\" : \"username\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getUserPortfolioAnnualPerformance", nickname = "getUserPortfolioAnnualPerformanceUsingPOST", notes = "Get a annual performance portfolio", response = AnnualBenchmarkAndInstrumentPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = AnnualBenchmarkAndInstrumentPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/performances/annual",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AnnualBenchmarkAndInstrumentPerformance> getUserPortfolioAnnualPerformanceUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentPerformance\" : {    \"history1\" : 0.80082819046101150206595775671303272247314453125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"history2\" : 6.02745618307040320615897144307382404804229736328125,    \"history3\" : 1.46581298050294517310021547018550336360931396484375,    \"ytd\" : 2.3021358869347654518833223846741020679473876953125,    \"history4\" : 5.962133916683182377482808078639209270477294921875,    \"history5\" : 5.63737665663332876420099637471139430999755859375  },  \"benchmarkPerformance\" : {    \"history1\" : 0.80082819046101150206595775671303272247314453125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"history2\" : 6.02745618307040320615897144307382404804229736328125,    \"history3\" : 1.46581298050294517310021547018550336360931396484375,    \"ytd\" : 2.3021358869347654518833223846741020679473876953125,    \"history4\" : 5.962133916683182377482808078639209270477294921875,    \"history5\" : 5.63737665663332876420099637471139430999755859375  },  \"benchmarkId\" : \"benchmarkId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getUserPortfolioById", nickname = "getUserPortfolioByIdUsingGET", notes = "", response = Portfolio.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Portfolio.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Portfolio> getUserPortfolioByIdUsingGET(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : [ {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"fees\" : {    \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,    \"total\" : 2.027123023002321833274663731572218239307403564453125,    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performance\" : 3.61607674925191080461672754609026014804840087890625,    \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,    \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,    \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,    \"distribution\" : 5.962133916683182377482808078639209270477294921875,    \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,    \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,    \"others\" : 9.301444243932575517419536481611430644989013671875  },  \"typeShare\" : \"ACUMULATION\",  \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",  \"investmentObjective\" : \"investmentObjective\",  \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"lastCompositionId\" : 6,  \"lastBenchmarkCompositionId\" : 0,  \"emails\" : [ \"emails\", \"emails\" ],  \"portfolioType\" : \"SIMULATED\",  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"rebalancingTypeCode\" : \"rebalancingTypeCode\",  \"name\" : \"name\",  \"id\" : \"id\",  \"currencyCode\" : \"currencyCode\",  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getUserPortfolioCompositionById", nickname = "getUserPortfolioCompositionByIdUsingGET", notes = "", response = Composition.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Composition.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code."),
        @ApiResponse(code = 409, message = "resource invalidated") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/compositions/{compositionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Composition> getUserPortfolioCompositionByIdUsingGET(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "Composition Id",required=true) @PathVariable("compositionId") Long compositionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\",  \"resources\" : [ {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"reference\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"instrumentType\" : \"FUND\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getUserPortfolioCumulativePerformance", nickname = "getUserPortfolioCumulativePerformanceUsingPOST", notes = "Get a cumulative performance portfolio", response = CumulativeBenchmarkAndInstrumentPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CumulativeBenchmarkAndInstrumentPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/performances/cumulative",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CumulativeBenchmarkAndInstrumentPerformance> getUserPortfolioCumulativePerformanceUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentPerformance\" : {    \"oneMonth\" : 5.63737665663332876420099637471139430999755859375,    \"threeMonths\" : 9.301444243932575517419536481611430644989013671875,    \"oneYear\" : 2.3021358869347654518833223846741020679473876953125,    \"week\" : 7.3862819483858839220147274318151175975799560546875,    \"threeYears\" : 3.61607674925191080461672754609026014804840087890625,    \"fiveYears\" : 6.02745618307040320615897144307382404804229736328125,    \"twelveYears\" : 2.027123023002321833274663731572218239307403564453125,    \"sixMonths\" : 7.061401241503109105224211816675961017608642578125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"fromInception\" : 1.46581298050294517310021547018550336360931396484375,    \"mtd\" : 5.962133916683182377482808078639209270477294921875,    \"twoMonth\" : 4.1456080298839363962315474054776132106781005859375,    \"day\" : 0.80082819046101150206595775671303272247314453125  },  \"benchmarkPerformance\" : {    \"oneMonth\" : 5.63737665663332876420099637471139430999755859375,    \"threeMonths\" : 9.301444243932575517419536481611430644989013671875,    \"oneYear\" : 2.3021358869347654518833223846741020679473876953125,    \"week\" : 7.3862819483858839220147274318151175975799560546875,    \"threeYears\" : 3.61607674925191080461672754609026014804840087890625,    \"fiveYears\" : 6.02745618307040320615897144307382404804229736328125,    \"twelveYears\" : 2.027123023002321833274663731572218239307403564453125,    \"sixMonths\" : 7.061401241503109105224211816675961017608642578125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"fromInception\" : 1.46581298050294517310021547018550336360931396484375,    \"mtd\" : 5.962133916683182377482808078639209270477294921875,    \"twoMonth\" : 4.1456080298839363962315474054776132106781005859375,    \"day\" : 0.80082819046101150206595775671303272247314453125  },  \"benchmarkId\" : \"benchmarkId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getUserPortfolioFees", nickname = "getUserPortfolioFeesUsingPOST", notes = "", response = Fees.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Fees.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/fees",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Fees> getUserPortfolioFeesUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "body"  )  @Valid @RequestBody FeesFilter feesFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,  \"total\" : 2.027123023002321833274663731572218239307403564453125,  \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"performance\" : 3.61607674925191080461672754609026014804840087890625,  \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,  \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,  \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,  \"distribution\" : 5.962133916683182377482808078639209270477294921875,  \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,  \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,  \"others\" : 9.301444243932575517419536481611430644989013671875}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getUserPortfolioRiskClassification", nickname = "getUserPortfolioRiskClassificationUsingPOST", notes = "Get risk classification information of a portfolio", response = RiskClassification.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = RiskClassification.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/statistic/riskClassification",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RiskClassification> getUserPortfolioRiskClassificationUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"benchmarkVolatility\" : 6.02745618307040320615897144307382404804229736328125,  \"instrumentPerformance\" : 1.46581298050294517310021547018550336360931396484375,  \"instrumentVolatility\" : 5.962133916683182377482808078639209270477294921875,  \"benchmarkPerformance\" : 0.80082819046101150206595775671303272247314453125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getUserPortfolioStatistic", nickname = "getUserPortfolioStatisticUsingPOST", notes = "Get portfolio statistic.", response = Statistic.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = Statistic.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/statistic",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Statistic> getUserPortfolioStatisticUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkId\" : \"benchmarkId\",  \"relative\" : {    \"r2\" : 1.489415909854170383397331534069962799549102783203125,    \"trackingError\" : 6.8468526983526398765889098285697400569915771484375,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"correlation\" : 7.3862819483858839220147274318151175975799560546875,    \"infoRatio\" : 1.231513536777255612975068288506008684635162353515625,    \"actPremium\" : 3.61607674925191080461672754609026014804840087890625,    \"alpha\" : 2.027123023002321833274663731572218239307403564453125,    \"treynorRatio\" : 7.4577447736837658709418974467553198337554931640625,    \"jesenAlpha\" : 1.024645700144157789424070870154537260532379150390625,    \"beta\" : 4.1456080298839363962315474054776132106781005859375  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getUserPreferences", nickname = "getUserPreferencesUsingGET", notes = "", response = Preferences.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Preferences.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/preferences",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Preferences> getUserPreferencesUsingGET(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"preferences\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getUserSettingsTemp", nickname = "getUserSettingsTempUsingGET", notes = "", response = Settings.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Settings.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/settings",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Settings> getUserSettingsTempUsingGET(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"settings\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"accessibleHomePages\" : [ \"accessibleHomePages\", \"accessibleHomePages\" ],  \"userAccessControlList\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getUserSettings", nickname = "getUserSettingsUsingGET", notes = "", response = Settings.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Settings.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/credentials/settings",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Settings> getUserSettingsUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"settings\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"accessibleHomePages\" : [ \"accessibleHomePages\", \"accessibleHomePages\" ],  \"userAccessControlList\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFavoritesEtfInstrumentsAsXls", nickname = "listFavoritesEtfInstrumentsAsXlsUsingPOST", notes = "Generate operational report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/favorites/etfs/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> listFavoritesEtfInstrumentsAsXlsUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody FavoriteInstrumentRawXlsFilterAndPageFilter favoriteInstrumentRawXlsFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFavoritesEtfInstrumentsRaw", nickname = "listFavoritesEtfInstrumentsRawUsingPOST", notes = "", response = RawSearchInstrumentResultAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = RawSearchInstrumentResultAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/favorites/etfs/raw",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RawSearchInstrumentResultAndPage> listFavoritesEtfInstrumentsRawUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody FavoriteInstrumentRawFilterAndPageFilter favoriteInstrumentRawFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"results\" : [ {    \"performanceCumulativeWeek\" : 6.683562403749608193948006373830139636993408203125,    \"transferable\" : true,    \"fundHouseId\" : 2,    \"statisticAbsoluteMaxDrawdown\" : 9.0183481860707832566959041287191212177276611328125,    \"feesInitialMax\" : 5.63737665663332876420099637471139430999755859375,    \"productStructure\" : \"productStructure\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"whiteassimilatedAnt\" : 3.35319334701124294184637619764544069766998291015625,    \"id\" : 4,    \"statisticAbsoluteSharpeRatio\" : 3.557195227068097320710649000830017030239105224609375,    \"statisticAbsoluteVolatility\" : 6.96511769763884558415156789124011993408203125,    \"replicationMethod\" : \"replicationMethod\",    \"rebalanceFrequency\" : \"rebalanceFrequency\",    \"shareTypeCode\" : \"shareTypeCode\",    \"statisticAbsolutePerformance\" : 6.438423552598546706349225132726132869720458984375,    \"indexName\" : \"indexName\",    \"fundAum\" : 9.301444243932575517419536481611430644989013671875,    \"dateAum\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeSixMonths\" : 9.965781217890562260208753286860883235931396484375,    \"statisticRelativeInfoRatio\" : 6.87805222012787620400331434211693704128265380859375,    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"performanceCumulativeOneYear\" : 5.02500479152029466689555192715488374233245849609375,    \"subscriptionType\" : \"subscriptionType\",    \"fundTypeCode\" : \"fundTypeCode\",    \"name\" : \"name\",    \"statisticRelativeTrackingError\" : 5.94489560761401580890606055618263781070709228515625,    \"fundCurrencyAumCode\" : \"fundCurrencyAumCode\",    \"performanceCumulativeThreeYears\" : 9.3693102714106686335071572102606296539306640625,    \"fundHouseGroupId\" : 3,    \"riskLevel\" : 8,    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"minimunInvestmentInitial\" : 1.231513536777255612975068288506008684635162353515625,    \"performanceAnnualYtd\" : 7.4577447736837658709418974467553198337554931640625,    \"dealingAvailable\" : true,    \"feesDistribution\" : 1.46581298050294517310021547018550336360931396484375,    \"performanceCumulativeDay\" : 1.173074250955943309548956676735542714595794677734375,    \"statisticRelativeBeta\" : 2.884162126668780246063761296682059764862060546875,    \"priipsReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"feesPerformance\" : 7.061401241503109105224211816675961017608642578125,    \"datePortfolio\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"feesAnnual\" : 6.02745618307040320615897144307382404804229736328125,    \"feesOperatingCashFlow\" : 2.3021358869347654518833223846741020679473876953125,    \"mifid2ReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceAnnualHistory1\" : 1.489415909854170383397331534069962799549102783203125,    \"performanceAnnualHistory2\" : 6.8468526983526398765889098285697400569915771484375,    \"statisticRelativeAlpha\" : 1.2846590061165319429647979632136411964893341064453125,    \"whiteassimilated\" : 6.70401929795003592715829654480330646038055419921875,    \"instrumentType\" : \"instrumentType\",    \"statisticRelativeCorrelation\" : 6.77832496304801335185175048536621034145355224609375,    \"feesExitMax\" : 5.962133916683182377482808078639209270477294921875,    \"collectiveInvestmentTransferableSecurities\" : true,    \"distributionFrequency\" : \"distributionFrequency\",    \"domicilie\" : \"domicilie\",    \"informationProvider\" : \"informationProvider\",    \"lastPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"baseCurrencyCode\" : \"baseCurrencyCode\",    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeFiveYears\" : 4.9652184929849543237878606305457651615142822265625,    \"currencyCode\" : \"currencyCode\",    \"lastPrice\" : 7.3862819483858839220147274318151175975799560546875,    \"minimunInvestmentSubsequent\" : 1.024645700144157789424070870154537260532379150390625  }, {    \"performanceCumulativeWeek\" : 6.683562403749608193948006373830139636993408203125,    \"transferable\" : true,    \"fundHouseId\" : 2,    \"statisticAbsoluteMaxDrawdown\" : 9.0183481860707832566959041287191212177276611328125,    \"feesInitialMax\" : 5.63737665663332876420099637471139430999755859375,    \"productStructure\" : \"productStructure\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"whiteassimilatedAnt\" : 3.35319334701124294184637619764544069766998291015625,    \"id\" : 4,    \"statisticAbsoluteSharpeRatio\" : 3.557195227068097320710649000830017030239105224609375,    \"statisticAbsoluteVolatility\" : 6.96511769763884558415156789124011993408203125,    \"replicationMethod\" : \"replicationMethod\",    \"rebalanceFrequency\" : \"rebalanceFrequency\",    \"shareTypeCode\" : \"shareTypeCode\",    \"statisticAbsolutePerformance\" : 6.438423552598546706349225132726132869720458984375,    \"indexName\" : \"indexName\",    \"fundAum\" : 9.301444243932575517419536481611430644989013671875,    \"dateAum\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeSixMonths\" : 9.965781217890562260208753286860883235931396484375,    \"statisticRelativeInfoRatio\" : 6.87805222012787620400331434211693704128265380859375,    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"performanceCumulativeOneYear\" : 5.02500479152029466689555192715488374233245849609375,    \"subscriptionType\" : \"subscriptionType\",    \"fundTypeCode\" : \"fundTypeCode\",    \"name\" : \"name\",    \"statisticRelativeTrackingError\" : 5.94489560761401580890606055618263781070709228515625,    \"fundCurrencyAumCode\" : \"fundCurrencyAumCode\",    \"performanceCumulativeThreeYears\" : 9.3693102714106686335071572102606296539306640625,    \"fundHouseGroupId\" : 3,    \"riskLevel\" : 8,    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"minimunInvestmentInitial\" : 1.231513536777255612975068288506008684635162353515625,    \"performanceAnnualYtd\" : 7.4577447736837658709418974467553198337554931640625,    \"dealingAvailable\" : true,    \"feesDistribution\" : 1.46581298050294517310021547018550336360931396484375,    \"performanceCumulativeDay\" : 1.173074250955943309548956676735542714595794677734375,    \"statisticRelativeBeta\" : 2.884162126668780246063761296682059764862060546875,    \"priipsReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"feesPerformance\" : 7.061401241503109105224211816675961017608642578125,    \"datePortfolio\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"feesAnnual\" : 6.02745618307040320615897144307382404804229736328125,    \"feesOperatingCashFlow\" : 2.3021358869347654518833223846741020679473876953125,    \"mifid2ReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceAnnualHistory1\" : 1.489415909854170383397331534069962799549102783203125,    \"performanceAnnualHistory2\" : 6.8468526983526398765889098285697400569915771484375,    \"statisticRelativeAlpha\" : 1.2846590061165319429647979632136411964893341064453125,    \"whiteassimilated\" : 6.70401929795003592715829654480330646038055419921875,    \"instrumentType\" : \"instrumentType\",    \"statisticRelativeCorrelation\" : 6.77832496304801335185175048536621034145355224609375,    \"feesExitMax\" : 5.962133916683182377482808078639209270477294921875,    \"collectiveInvestmentTransferableSecurities\" : true,    \"distributionFrequency\" : \"distributionFrequency\",    \"domicilie\" : \"domicilie\",    \"informationProvider\" : \"informationProvider\",    \"lastPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"baseCurrencyCode\" : \"baseCurrencyCode\",    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeFiveYears\" : 4.9652184929849543237878606305457651615142822265625,    \"currencyCode\" : \"currencyCode\",    \"lastPrice\" : 7.3862819483858839220147274318151175975799560546875,    \"minimunInvestmentSubsequent\" : 1.024645700144157789424070870154537260532379150390625  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFavoritesFundInstrumentsAsXls", nickname = "listFavoritesFundInstrumentsAsXlsUsingPOST", notes = "Generate operational report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/favorites/funds/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> listFavoritesFundInstrumentsAsXlsUsingPOST(@ApiParam(value = "The instrumentSearchFilter object to use for this search" ,required=true )  @Valid @RequestBody FavoriteInstrumentRawXlsFilterAndPageFilter favoriteInstrumentRawXlsFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFavoritesFundInstrumentsRaw", nickname = "listFavoritesFundInstrumentsRawUsingPOST", notes = "", response = RawSearchInstrumentResultAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = RawSearchInstrumentResultAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/favorites/funds/raw",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RawSearchInstrumentResultAndPage> listFavoritesFundInstrumentsRawUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody FavoriteInstrumentRawFilterAndPageFilter favoriteInstrumentRawFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"results\" : [ {    \"performanceCumulativeWeek\" : 6.683562403749608193948006373830139636993408203125,    \"transferable\" : true,    \"fundHouseId\" : 2,    \"statisticAbsoluteMaxDrawdown\" : 9.0183481860707832566959041287191212177276611328125,    \"feesInitialMax\" : 5.63737665663332876420099637471139430999755859375,    \"productStructure\" : \"productStructure\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"whiteassimilatedAnt\" : 3.35319334701124294184637619764544069766998291015625,    \"id\" : 4,    \"statisticAbsoluteSharpeRatio\" : 3.557195227068097320710649000830017030239105224609375,    \"statisticAbsoluteVolatility\" : 6.96511769763884558415156789124011993408203125,    \"replicationMethod\" : \"replicationMethod\",    \"rebalanceFrequency\" : \"rebalanceFrequency\",    \"shareTypeCode\" : \"shareTypeCode\",    \"statisticAbsolutePerformance\" : 6.438423552598546706349225132726132869720458984375,    \"indexName\" : \"indexName\",    \"fundAum\" : 9.301444243932575517419536481611430644989013671875,    \"dateAum\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeSixMonths\" : 9.965781217890562260208753286860883235931396484375,    \"statisticRelativeInfoRatio\" : 6.87805222012787620400331434211693704128265380859375,    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"performanceCumulativeOneYear\" : 5.02500479152029466689555192715488374233245849609375,    \"subscriptionType\" : \"subscriptionType\",    \"fundTypeCode\" : \"fundTypeCode\",    \"name\" : \"name\",    \"statisticRelativeTrackingError\" : 5.94489560761401580890606055618263781070709228515625,    \"fundCurrencyAumCode\" : \"fundCurrencyAumCode\",    \"performanceCumulativeThreeYears\" : 9.3693102714106686335071572102606296539306640625,    \"fundHouseGroupId\" : 3,    \"riskLevel\" : 8,    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"minimunInvestmentInitial\" : 1.231513536777255612975068288506008684635162353515625,    \"performanceAnnualYtd\" : 7.4577447736837658709418974467553198337554931640625,    \"dealingAvailable\" : true,    \"feesDistribution\" : 1.46581298050294517310021547018550336360931396484375,    \"performanceCumulativeDay\" : 1.173074250955943309548956676735542714595794677734375,    \"statisticRelativeBeta\" : 2.884162126668780246063761296682059764862060546875,    \"priipsReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"feesPerformance\" : 7.061401241503109105224211816675961017608642578125,    \"datePortfolio\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"feesAnnual\" : 6.02745618307040320615897144307382404804229736328125,    \"feesOperatingCashFlow\" : 2.3021358869347654518833223846741020679473876953125,    \"mifid2ReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceAnnualHistory1\" : 1.489415909854170383397331534069962799549102783203125,    \"performanceAnnualHistory2\" : 6.8468526983526398765889098285697400569915771484375,    \"statisticRelativeAlpha\" : 1.2846590061165319429647979632136411964893341064453125,    \"whiteassimilated\" : 6.70401929795003592715829654480330646038055419921875,    \"instrumentType\" : \"instrumentType\",    \"statisticRelativeCorrelation\" : 6.77832496304801335185175048536621034145355224609375,    \"feesExitMax\" : 5.962133916683182377482808078639209270477294921875,    \"collectiveInvestmentTransferableSecurities\" : true,    \"distributionFrequency\" : \"distributionFrequency\",    \"domicilie\" : \"domicilie\",    \"informationProvider\" : \"informationProvider\",    \"lastPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"baseCurrencyCode\" : \"baseCurrencyCode\",    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeFiveYears\" : 4.9652184929849543237878606305457651615142822265625,    \"currencyCode\" : \"currencyCode\",    \"lastPrice\" : 7.3862819483858839220147274318151175975799560546875,    \"minimunInvestmentSubsequent\" : 1.024645700144157789424070870154537260532379150390625  }, {    \"performanceCumulativeWeek\" : 6.683562403749608193948006373830139636993408203125,    \"transferable\" : true,    \"fundHouseId\" : 2,    \"statisticAbsoluteMaxDrawdown\" : 9.0183481860707832566959041287191212177276611328125,    \"feesInitialMax\" : 5.63737665663332876420099637471139430999755859375,    \"productStructure\" : \"productStructure\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"whiteassimilatedAnt\" : 3.35319334701124294184637619764544069766998291015625,    \"id\" : 4,    \"statisticAbsoluteSharpeRatio\" : 3.557195227068097320710649000830017030239105224609375,    \"statisticAbsoluteVolatility\" : 6.96511769763884558415156789124011993408203125,    \"replicationMethod\" : \"replicationMethod\",    \"rebalanceFrequency\" : \"rebalanceFrequency\",    \"shareTypeCode\" : \"shareTypeCode\",    \"statisticAbsolutePerformance\" : 6.438423552598546706349225132726132869720458984375,    \"indexName\" : \"indexName\",    \"fundAum\" : 9.301444243932575517419536481611430644989013671875,    \"dateAum\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeSixMonths\" : 9.965781217890562260208753286860883235931396484375,    \"statisticRelativeInfoRatio\" : 6.87805222012787620400331434211693704128265380859375,    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"performanceCumulativeOneYear\" : 5.02500479152029466689555192715488374233245849609375,    \"subscriptionType\" : \"subscriptionType\",    \"fundTypeCode\" : \"fundTypeCode\",    \"name\" : \"name\",    \"statisticRelativeTrackingError\" : 5.94489560761401580890606055618263781070709228515625,    \"fundCurrencyAumCode\" : \"fundCurrencyAumCode\",    \"performanceCumulativeThreeYears\" : 9.3693102714106686335071572102606296539306640625,    \"fundHouseGroupId\" : 3,    \"riskLevel\" : 8,    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"minimunInvestmentInitial\" : 1.231513536777255612975068288506008684635162353515625,    \"performanceAnnualYtd\" : 7.4577447736837658709418974467553198337554931640625,    \"dealingAvailable\" : true,    \"feesDistribution\" : 1.46581298050294517310021547018550336360931396484375,    \"performanceCumulativeDay\" : 1.173074250955943309548956676735542714595794677734375,    \"statisticRelativeBeta\" : 2.884162126668780246063761296682059764862060546875,    \"priipsReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"feesPerformance\" : 7.061401241503109105224211816675961017608642578125,    \"datePortfolio\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"feesAnnual\" : 6.02745618307040320615897144307382404804229736328125,    \"feesOperatingCashFlow\" : 2.3021358869347654518833223846741020679473876953125,    \"mifid2ReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceAnnualHistory1\" : 1.489415909854170383397331534069962799549102783203125,    \"performanceAnnualHistory2\" : 6.8468526983526398765889098285697400569915771484375,    \"statisticRelativeAlpha\" : 1.2846590061165319429647979632136411964893341064453125,    \"whiteassimilated\" : 6.70401929795003592715829654480330646038055419921875,    \"instrumentType\" : \"instrumentType\",    \"statisticRelativeCorrelation\" : 6.77832496304801335185175048536621034145355224609375,    \"feesExitMax\" : 5.962133916683182377482808078639209270477294921875,    \"collectiveInvestmentTransferableSecurities\" : true,    \"distributionFrequency\" : \"distributionFrequency\",    \"domicilie\" : \"domicilie\",    \"informationProvider\" : \"informationProvider\",    \"lastPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"baseCurrencyCode\" : \"baseCurrencyCode\",    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeFiveYears\" : 4.9652184929849543237878606305457651615142822265625,    \"currencyCode\" : \"currencyCode\",    \"lastPrice\" : 7.3862819483858839220147274318151175975799560546875,    \"minimunInvestmentSubsequent\" : 1.024645700144157789424070870154537260532379150390625  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFavoritesInstrumentsRaw", nickname = "listFavoritesInstrumentsRawUsingPOST", notes = "", response = RawSearchInstrumentResultAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = RawSearchInstrumentResultAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/favorites/raw",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RawSearchInstrumentResultAndPage> listFavoritesInstrumentsRawUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody FavoriteInstrumentRawFilterAndPageFilter favoriteInstrumentRawFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"results\" : [ {    \"performanceCumulativeWeek\" : 6.683562403749608193948006373830139636993408203125,    \"transferable\" : true,    \"fundHouseId\" : 2,    \"statisticAbsoluteMaxDrawdown\" : 9.0183481860707832566959041287191212177276611328125,    \"feesInitialMax\" : 5.63737665663332876420099637471139430999755859375,    \"productStructure\" : \"productStructure\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"whiteassimilatedAnt\" : 3.35319334701124294184637619764544069766998291015625,    \"id\" : 4,    \"statisticAbsoluteSharpeRatio\" : 3.557195227068097320710649000830017030239105224609375,    \"statisticAbsoluteVolatility\" : 6.96511769763884558415156789124011993408203125,    \"replicationMethod\" : \"replicationMethod\",    \"rebalanceFrequency\" : \"rebalanceFrequency\",    \"shareTypeCode\" : \"shareTypeCode\",    \"statisticAbsolutePerformance\" : 6.438423552598546706349225132726132869720458984375,    \"indexName\" : \"indexName\",    \"fundAum\" : 9.301444243932575517419536481611430644989013671875,    \"dateAum\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeSixMonths\" : 9.965781217890562260208753286860883235931396484375,    \"statisticRelativeInfoRatio\" : 6.87805222012787620400331434211693704128265380859375,    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"performanceCumulativeOneYear\" : 5.02500479152029466689555192715488374233245849609375,    \"subscriptionType\" : \"subscriptionType\",    \"fundTypeCode\" : \"fundTypeCode\",    \"name\" : \"name\",    \"statisticRelativeTrackingError\" : 5.94489560761401580890606055618263781070709228515625,    \"fundCurrencyAumCode\" : \"fundCurrencyAumCode\",    \"performanceCumulativeThreeYears\" : 9.3693102714106686335071572102606296539306640625,    \"fundHouseGroupId\" : 3,    \"riskLevel\" : 8,    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"minimunInvestmentInitial\" : 1.231513536777255612975068288506008684635162353515625,    \"performanceAnnualYtd\" : 7.4577447736837658709418974467553198337554931640625,    \"dealingAvailable\" : true,    \"feesDistribution\" : 1.46581298050294517310021547018550336360931396484375,    \"performanceCumulativeDay\" : 1.173074250955943309548956676735542714595794677734375,    \"statisticRelativeBeta\" : 2.884162126668780246063761296682059764862060546875,    \"priipsReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"feesPerformance\" : 7.061401241503109105224211816675961017608642578125,    \"datePortfolio\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"feesAnnual\" : 6.02745618307040320615897144307382404804229736328125,    \"feesOperatingCashFlow\" : 2.3021358869347654518833223846741020679473876953125,    \"mifid2ReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceAnnualHistory1\" : 1.489415909854170383397331534069962799549102783203125,    \"performanceAnnualHistory2\" : 6.8468526983526398765889098285697400569915771484375,    \"statisticRelativeAlpha\" : 1.2846590061165319429647979632136411964893341064453125,    \"whiteassimilated\" : 6.70401929795003592715829654480330646038055419921875,    \"instrumentType\" : \"instrumentType\",    \"statisticRelativeCorrelation\" : 6.77832496304801335185175048536621034145355224609375,    \"feesExitMax\" : 5.962133916683182377482808078639209270477294921875,    \"collectiveInvestmentTransferableSecurities\" : true,    \"distributionFrequency\" : \"distributionFrequency\",    \"domicilie\" : \"domicilie\",    \"informationProvider\" : \"informationProvider\",    \"lastPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"baseCurrencyCode\" : \"baseCurrencyCode\",    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeFiveYears\" : 4.9652184929849543237878606305457651615142822265625,    \"currencyCode\" : \"currencyCode\",    \"lastPrice\" : 7.3862819483858839220147274318151175975799560546875,    \"minimunInvestmentSubsequent\" : 1.024645700144157789424070870154537260532379150390625  }, {    \"performanceCumulativeWeek\" : 6.683562403749608193948006373830139636993408203125,    \"transferable\" : true,    \"fundHouseId\" : 2,    \"statisticAbsoluteMaxDrawdown\" : 9.0183481860707832566959041287191212177276611328125,    \"feesInitialMax\" : 5.63737665663332876420099637471139430999755859375,    \"productStructure\" : \"productStructure\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"whiteassimilatedAnt\" : 3.35319334701124294184637619764544069766998291015625,    \"id\" : 4,    \"statisticAbsoluteSharpeRatio\" : 3.557195227068097320710649000830017030239105224609375,    \"statisticAbsoluteVolatility\" : 6.96511769763884558415156789124011993408203125,    \"replicationMethod\" : \"replicationMethod\",    \"rebalanceFrequency\" : \"rebalanceFrequency\",    \"shareTypeCode\" : \"shareTypeCode\",    \"statisticAbsolutePerformance\" : 6.438423552598546706349225132726132869720458984375,    \"indexName\" : \"indexName\",    \"fundAum\" : 9.301444243932575517419536481611430644989013671875,    \"dateAum\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeSixMonths\" : 9.965781217890562260208753286860883235931396484375,    \"statisticRelativeInfoRatio\" : 6.87805222012787620400331434211693704128265380859375,    \"subscriptionTypeCurrency\" : \"subscriptionTypeCurrency\",    \"performanceCumulativeOneYear\" : 5.02500479152029466689555192715488374233245849609375,    \"subscriptionType\" : \"subscriptionType\",    \"fundTypeCode\" : \"fundTypeCode\",    \"name\" : \"name\",    \"statisticRelativeTrackingError\" : 5.94489560761401580890606055618263781070709228515625,    \"fundCurrencyAumCode\" : \"fundCurrencyAumCode\",    \"performanceCumulativeThreeYears\" : 9.3693102714106686335071572102606296539306640625,    \"fundHouseGroupId\" : 3,    \"riskLevel\" : 8,    \"cnmvInstrument\" : 0.80082819046101150206595775671303272247314453125,    \"minimunInvestmentInitial\" : 1.231513536777255612975068288506008684635162353515625,    \"performanceAnnualYtd\" : 7.4577447736837658709418974467553198337554931640625,    \"dealingAvailable\" : true,    \"feesDistribution\" : 1.46581298050294517310021547018550336360931396484375,    \"performanceCumulativeDay\" : 1.173074250955943309548956676735542714595794677734375,    \"statisticRelativeBeta\" : 2.884162126668780246063761296682059764862060546875,    \"priipsReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"classificationKeyValuesALLFUNDSCATEGORY\" : \"classificationKeyValuesALLFUNDSCATEGORY\",    \"feesPerformance\" : 7.061401241503109105224211816675961017608642578125,    \"datePortfolio\" : \"2000-01-23T04:56:07.000+00:00\",    \"externalCodeKeyValuesISIN\" : \"externalCodeKeyValuesISIN\",    \"feesAnnual\" : 6.02745618307040320615897144307382404804229736328125,    \"feesOperatingCashFlow\" : 2.3021358869347654518833223846741020679473876953125,    \"mifid2ReportingDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceAnnualHistory1\" : 1.489415909854170383397331534069962799549102783203125,    \"performanceAnnualHistory2\" : 6.8468526983526398765889098285697400569915771484375,    \"statisticRelativeAlpha\" : 1.2846590061165319429647979632136411964893341064453125,    \"whiteassimilated\" : 6.70401929795003592715829654480330646038055419921875,    \"instrumentType\" : \"instrumentType\",    \"statisticRelativeCorrelation\" : 6.77832496304801335185175048536621034145355224609375,    \"feesExitMax\" : 5.962133916683182377482808078639209270477294921875,    \"collectiveInvestmentTransferableSecurities\" : true,    \"distributionFrequency\" : \"distributionFrequency\",    \"domicilie\" : \"domicilie\",    \"informationProvider\" : \"informationProvider\",    \"lastPriceDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"baseCurrencyCode\" : \"baseCurrencyCode\",    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performanceCumulativeFiveYears\" : 4.9652184929849543237878606305457651615142822265625,    \"currencyCode\" : \"currencyCode\",    \"lastPrice\" : 7.3862819483858839220147274318151175975799560546875,    \"minimunInvestmentSubsequent\" : 1.024645700144157789424070870154537260532379150390625  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFavoritesInstruments", nickname = "listFavoritesInstrumentsUsingPOST", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/favorites/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> listFavoritesInstrumentsUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody FavoriteInstrumentFilterAndPageFilter favoriteInstrumentFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listImpersonations", nickname = "listImpersonationsUsingPOST", notes = "", response = ImpersonationAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ImpersonationAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/impersonations/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ImpersonationAndPage> listImpersonationsUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The ImpersonationFilterAndPageFilter object to use for this user" ,required=true )  @Valid @RequestBody ImpersonationFilterAndPageFilter impersonationFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"impersonations\" : [ {    \"distributorName\" : \"distributorName\",    \"distributorId\" : 0,    \"userIds\" : [ \"userIds\", \"userIds\" ],    \"marketIds\" : [ \"marketIds\", \"marketIds\" ]  }, {    \"distributorName\" : \"distributorName\",    \"distributorId\" : 0,    \"userIds\" : [ \"userIds\", \"userIds\" ],    \"marketIds\" : [ \"marketIds\", \"marketIds\" ]  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listIntermediaries", nickname = "listIntermediariesUsingPOST", notes = "", response = SolvencyIntermediariesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SolvencyIntermediariesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/solvency/intermediaries/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SolvencyIntermediariesAndPage> listIntermediariesUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"intermediaries\" : [ {    \"solvencyFunds\" : [ {      \"file\" : {        \"filename\" : \"filename\",        \"size\" : 0,        \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"title\" : \"title\",        \"url\" : \"url\"      },      \"name\" : \"name\",      \"description\" : \"description\",      \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"id\" : \"id\",      \"isin\" : \"isin\"    }, {      \"file\" : {        \"filename\" : \"filename\",        \"size\" : 0,        \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"title\" : \"title\",        \"url\" : \"url\"      },      \"name\" : \"name\",      \"description\" : \"description\",      \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"id\" : \"id\",      \"isin\" : \"isin\"    } ],    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"solvencyFunds\" : [ {      \"file\" : {        \"filename\" : \"filename\",        \"size\" : 0,        \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"title\" : \"title\",        \"url\" : \"url\"      },      \"name\" : \"name\",      \"description\" : \"description\",      \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"id\" : \"id\",      \"isin\" : \"isin\"    }, {      \"file\" : {        \"filename\" : \"filename\",        \"size\" : 0,        \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"title\" : \"title\",        \"url\" : \"url\"      },      \"name\" : \"name\",      \"description\" : \"description\",      \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"id\" : \"id\",      \"isin\" : \"isin\"    } ],    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listPeriodicities", nickname = "listPeriodicitiesUsingPOST", notes = "", response = KeyValueAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = KeyValueAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/solvency/periodicity/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<KeyValueAndPage> listPeriodicitiesUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSavedComparisons", nickname = "listSavedComparisonsUsingPOST", notes = "", response = SavedComparisonAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SavedComparisonAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/comparisons/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SavedComparisonAndPage> listSavedComparisonsUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Comparison object to use for this search"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"comparisons\" : [ {    \"instruments\" : [ {      \"instrumentType\" : \"FUND\",      \"instrumentId\" : \"instrumentId\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    }, {      \"instrumentType\" : \"FUND\",      \"instrumentId\" : \"instrumentId\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    } ],    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"instruments\" : [ {      \"instrumentType\" : \"FUND\",      \"instrumentId\" : \"instrumentId\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    }, {      \"instrumentType\" : \"FUND\",      \"instrumentId\" : \"instrumentId\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    } ],    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSearches", nickname = "listSearchesUsingPOST", notes = "", response = SavedSearchAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SavedSearchAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/searches/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SavedSearchAndPage> listSearchesUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody SavedSearchFilterAndPageFilter savedSearchFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"searches\" : [ {    \"searchType\" : \"FUND\",    \"name\" : \"name\",    \"instrumentSearch\" : {      \"feesSearch\" : {        \"afbAppliedRedemption\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"operatingCashFlowDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"performance\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"totalFeeApplied\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"annual\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"initialMax\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"operatingCashFlow\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"afbAppliedSubscription\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"distribution\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"exitMax\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"instrumentSearchByCode\" : {        \"values\" : [ \"values\", \"values\" ],        \"instrumentExternalCode\" : \"instrumentExternalCode\"      },      \"instrumentType\" : \"FUND\",      \"breakdownSearch\" : {        \"geographicArea\" : {          \"code\" : \"code\",          \"comparison\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"inTopTen\" : true        },        \"creditQuality\" : {          \"code\" : \"code\",          \"comparison\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"inTopTen\" : true        },        \"breakdownDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"currency\" : {          \"code\" : \"code\",          \"comparison\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"inTopTen\" : true        },        \"holdings\" : {          \"holding\" : \"holding\",          \"comparison\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"inTopTen\" : true        },        \"assetAllocation\" : {          \"code\" : \"code\",          \"comparison\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"inTopTen\" : true        },        \"sector\" : {          \"code\" : \"code\",          \"comparison\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"inTopTen\" : true        }      },      \"performanceSearch\" : {        \"annual\" : {          \"history1\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"history2\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"history3\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"ytd\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"history4\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"history5\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          }        },        \"cumulative\" : {          \"oneMonth\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"threeMonths\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"oneYear\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"week\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"fromInception\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"threeYears\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"fiveYears\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"twoMonth\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"day\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"sixMonths\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          }        }      },      \"pricesTypesSearch\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"offer\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"nav\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"bid\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"ratingsSearch\" : {        \"blueRating\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"citywire\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"morningStar\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"regulatoryDataCode\" : \"regulatoryDataCode\",      \"fundDetailsSearch\" : {        \"fundCharacteristics\" : {          \"riskLevel\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"cnmvInstrument\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"domicilieCountryCode\" : \"domicilieCountryCode\",          \"transferable\" : true,          \"benchmarkName\" : \"benchmarkName\",          \"rebalanceFrequencyCode\" : \"rebalanceFrequencyCode\",          \"inceptionDate\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : \"2000-01-23T04:56:07.000+00:00\"          },          \"countryOfRegitrationCode\" : \"countryOfRegitrationCode\",          \"parentClass\" : true,          \"datePortfolio\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : \"2000-01-23T04:56:07.000+00:00\"          },          \"distributionFrequencyCode\" : \"distributionFrequencyCode\",          \"currencyAumCode\" : \"currencyAumCode\",          \"shareTypeCode\" : \"shareTypeCode\",          \"collectiveInvestmentTransferableSecurities\" : true,          \"fundAum\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"dateAum\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : \"2000-01-23T04:56:07.000+00:00\"          },          \"minimunInvestment\" : {            \"initial\" : {              \"comparisonCode\" : \"comparisonCode\",              \"value\" : 0.80082819046101150206595775671303272247314453125            },            \"subsequent\" : {              \"comparisonCode\" : \"comparisonCode\",              \"value\" : 0.80082819046101150206595775671303272247314453125            },            \"typeValue\" : \"UNITS\"          },          \"shareAum\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"lastPriceDate\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : \"2000-01-23T04:56:07.000+00:00\"          },          \"baseCurrencyCode\" : \"baseCurrencyCode\",          \"fundTypeCode\" : \"fundTypeCode\",          \"name\" : [ \"name\", \"name\" ],          \"shariaCompliant\" : true,          \"currencyCode\" : \"currencyCode\",          \"initialAum\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"lastPrice\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          }        },        \"fundRange\" : {          \"etfAdministrator\" : \"etfAdministrator\",          \"fundHouseGroupId\" : 5,          \"custodian\" : \"custodian\",          \"collectiveInvestmentSchemeId\" : 1,          \"fundHouseId\" : 2,          \"universeCode\" : \"universeCode\",          \"dealingFundHouseId\" : 5,          \"marketIdentifierCode\" : \"marketIdentifierCode\"        },        \"fundClassification\" : {          \"classificationKeyValues\" : [ {            \"value\" : \"value\",            \"key\" : \"key\"          }, {            \"value\" : \"value\",            \"key\" : \"key\"          } ],          \"whiteassimilated\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"marketRegistrationKeyValues\" : [ {            \"value\" : \"value\",            \"key\" : \"key\"          }, {            \"value\" : \"value\",            \"key\" : \"key\"          } ],          \"whiteassimilatedAnt\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"euSavingDirectiveCode\" : \"euSavingDirectiveCode\"        }      },      \"statisticSearch\" : {        \"absolute\" : {          \"performance\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"maxDrawdown\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"sharpeRatio\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"volatility\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          }        },        \"relative\" : {          \"r2\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"trackingError\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"correlation\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"infoRatio\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"alpha\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"treynorRatio\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"jesenAlpha\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"beta\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          }        }      },      \"marketId\" : 6    },    \"id\" : \"id\"  }, {    \"searchType\" : \"FUND\",    \"name\" : \"name\",    \"instrumentSearch\" : {      \"feesSearch\" : {        \"afbAppliedRedemption\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"operatingCashFlowDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"performance\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"totalFeeApplied\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"annual\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"initialMax\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"operatingCashFlow\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"afbAppliedSubscription\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"distribution\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"exitMax\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"instrumentSearchByCode\" : {        \"values\" : [ \"values\", \"values\" ],        \"instrumentExternalCode\" : \"instrumentExternalCode\"      },      \"instrumentType\" : \"FUND\",      \"breakdownSearch\" : {        \"geographicArea\" : {          \"code\" : \"code\",          \"comparison\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"inTopTen\" : true        },        \"creditQuality\" : {          \"code\" : \"code\",          \"comparison\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"inTopTen\" : true        },        \"breakdownDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"currency\" : {          \"code\" : \"code\",          \"comparison\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"inTopTen\" : true        },        \"holdings\" : {          \"holding\" : \"holding\",          \"comparison\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"inTopTen\" : true        },        \"assetAllocation\" : {          \"code\" : \"code\",          \"comparison\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"inTopTen\" : true        },        \"sector\" : {          \"code\" : \"code\",          \"comparison\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"inTopTen\" : true        }      },      \"performanceSearch\" : {        \"annual\" : {          \"history1\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"history2\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"history3\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"ytd\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"history4\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"history5\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          }        },        \"cumulative\" : {          \"oneMonth\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"threeMonths\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"oneYear\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"week\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"fromInception\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"threeYears\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"fiveYears\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"twoMonth\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"day\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"sixMonths\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          }        }      },      \"pricesTypesSearch\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"offer\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"nav\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"bid\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"ratingsSearch\" : {        \"blueRating\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"citywire\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"morningStar\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"regulatoryDataCode\" : \"regulatoryDataCode\",      \"fundDetailsSearch\" : {        \"fundCharacteristics\" : {          \"riskLevel\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"cnmvInstrument\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"domicilieCountryCode\" : \"domicilieCountryCode\",          \"transferable\" : true,          \"benchmarkName\" : \"benchmarkName\",          \"rebalanceFrequencyCode\" : \"rebalanceFrequencyCode\",          \"inceptionDate\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : \"2000-01-23T04:56:07.000+00:00\"          },          \"countryOfRegitrationCode\" : \"countryOfRegitrationCode\",          \"parentClass\" : true,          \"datePortfolio\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : \"2000-01-23T04:56:07.000+00:00\"          },          \"distributionFrequencyCode\" : \"distributionFrequencyCode\",          \"currencyAumCode\" : \"currencyAumCode\",          \"shareTypeCode\" : \"shareTypeCode\",          \"collectiveInvestmentTransferableSecurities\" : true,          \"fundAum\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"dateAum\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : \"2000-01-23T04:56:07.000+00:00\"          },          \"minimunInvestment\" : {            \"initial\" : {              \"comparisonCode\" : \"comparisonCode\",              \"value\" : 0.80082819046101150206595775671303272247314453125            },            \"subsequent\" : {              \"comparisonCode\" : \"comparisonCode\",              \"value\" : 0.80082819046101150206595775671303272247314453125            },            \"typeValue\" : \"UNITS\"          },          \"shareAum\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"lastPriceDate\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : \"2000-01-23T04:56:07.000+00:00\"          },          \"baseCurrencyCode\" : \"baseCurrencyCode\",          \"fundTypeCode\" : \"fundTypeCode\",          \"name\" : [ \"name\", \"name\" ],          \"shariaCompliant\" : true,          \"currencyCode\" : \"currencyCode\",          \"initialAum\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"lastPrice\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          }        },        \"fundRange\" : {          \"etfAdministrator\" : \"etfAdministrator\",          \"fundHouseGroupId\" : 5,          \"custodian\" : \"custodian\",          \"collectiveInvestmentSchemeId\" : 1,          \"fundHouseId\" : 2,          \"universeCode\" : \"universeCode\",          \"dealingFundHouseId\" : 5,          \"marketIdentifierCode\" : \"marketIdentifierCode\"        },        \"fundClassification\" : {          \"classificationKeyValues\" : [ {            \"value\" : \"value\",            \"key\" : \"key\"          }, {            \"value\" : \"value\",            \"key\" : \"key\"          } ],          \"whiteassimilated\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"marketRegistrationKeyValues\" : [ {            \"value\" : \"value\",            \"key\" : \"key\"          }, {            \"value\" : \"value\",            \"key\" : \"key\"          } ],          \"whiteassimilatedAnt\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"euSavingDirectiveCode\" : \"euSavingDirectiveCode\"        }      },      \"statisticSearch\" : {        \"absolute\" : {          \"performance\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"maxDrawdown\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"sharpeRatio\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"volatility\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          }        },        \"relative\" : {          \"r2\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"trackingError\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"correlation\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"infoRatio\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"alpha\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"treynorRatio\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"jesenAlpha\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"beta\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          }        }      },      \"marketId\" : 6    },    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSolvencyFundsIntermediary", nickname = "listSolvencyFundsIntermediaryUsingPOST", notes = "", response = SolvencyFundAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SolvencyFundAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/solvency/intermediaries/{intermediaryId}/funds/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SolvencyFundAndPage> listSolvencyFundsIntermediaryUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"fundHouseGroups\" : [ {    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"name\" : \"name\",    \"description\" : \"description\",    \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"id\" : \"id\",    \"isin\" : \"isin\"  }, {    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"name\" : \"name\",    \"description\" : \"description\",    \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"id\" : \"id\",    \"isin\" : \"isin\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUploadedOrdersAsExcel", nickname = "listUploadedOrdersAsExcelUsingPOST", notes = "Returns an excel file with a list of all the active {UploadedOrder}s of the user", response = ExcelAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedOrders/list/xls",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndPage> listUploadedOrdersAsExcelUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUploadedOrders", nickname = "listUploadedOrdersUsingPOST", notes = "List all the active {UploadedOrder}s of the user", response = UploadedOrderAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UploadedOrderAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedOrders/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<UploadedOrderAndPage> listUploadedOrdersUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"uploadedOrders\" : [ {    \"messages\" : [ {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }, {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    } ],    \"id\" : 0,    \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"order\" : {      \"orderTypeCode\" : \"orderTypeCode\",      \"orderDateData\" : {        \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"depositaryId\" : 6,      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"orderAmountData\" : {        \"awardedGrossAmount\" : 5.63737665663332876420099637471139430999755859375,        \"awardedGrossAmountInLocalCurrency\" : 2.3021358869347654518833223846741020679473876953125,        \"requestedGrossAmount\" : 7.061401241503109105224211816675961017608642578125      },      \"orderContractData\" : {        \"contractExternalReference\" : \"contractExternalReference\",        \"contractAccount\" : {          \"assetAccountCode\" : \"assetAccountCode\",          \"currentAccountCode\" : \"currentAccountCode\"        }      },      \"orderSettingsData\" : {        \"omnibus\" : true,        \"dealingCurrencyPolicy\" : \"INSTRUMENT_CURRENCY\"      },      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"id\" : 5,      \"subdistributorId\" : 4,      \"dealingFundHouseId\" : 0,      \"orderEtfData\" : {        \"brokerId\" : 9,        \"etfDealingData\" : {          \"launchPrice\" : 2.027123023002321833274663731572218239307403564453125,          \"pendingShares\" : 4.1456080298839363962315474054776132106781005859375,          \"dealingTypeCode\" : \"dealingTypeCode\",          \"validityPeriodCode\" : \"validityPeriodCode\",          \"executeShares\" : 3.61607674925191080461672754609026014804840087890625,          \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"stockExchangeId\" : \"stockExchangeId\"      },      \"comments\" : \"comments\",      \"productId\" : 1,      \"distributorId\" : 1,      \"paymentCurrencyCode\" : \"paymentCurrencyCode\",      \"dealingInstrumentType\" : \"FUND\",      \"orderSharesData\" : {        \"requestedShares\" : 7.4577447736837658709418974467553198337554931640625      },      \"localCurrencyCode\" : \"localCurrencyCode\",      \"externalReference\" : \"externalReference\",      \"orderFeeData\" : {        \"feePerDealingInstrument\" : 7.3862819483858839220147274318151175975799560546875,        \"secondOrderFeePercentage\" : 6.8468526983526398765889098285697400569915771484375,        \"secondOrderFeeAmount\" : 1.489415909854170383397331534069962799549102783203125,        \"firstOrderFeePercentage\" : 1.024645700144157789424070870154537260532379150390625,        \"firstOrderFeeAmount\" : 1.231513536777255612975068288506008684635162353515625      },      \"orderItalianRetailMarketData\" : {        \"feeChargeOption\" : \"FRONTLOAD\"      },      \"orderSwitchData\" : {        \"associatedOrderExternalReference\" : \"associatedOrderExternalReference\",        \"associatedDealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"associatedDealingInstrumentType\" : \"FUND\",        \"associatedCurrencyCode\" : \"associatedCurrencyCode\"      },      \"orderStatusCode\" : \"orderStatusCode\",      \"currencyCode\" : \"currencyCode\"    },    \"status\" : \"OK\"  }, {    \"messages\" : [ {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }, {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    } ],    \"id\" : 0,    \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"order\" : {      \"orderTypeCode\" : \"orderTypeCode\",      \"orderDateData\" : {        \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"depositaryId\" : 6,      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"orderAmountData\" : {        \"awardedGrossAmount\" : 5.63737665663332876420099637471139430999755859375,        \"awardedGrossAmountInLocalCurrency\" : 2.3021358869347654518833223846741020679473876953125,        \"requestedGrossAmount\" : 7.061401241503109105224211816675961017608642578125      },      \"orderContractData\" : {        \"contractExternalReference\" : \"contractExternalReference\",        \"contractAccount\" : {          \"assetAccountCode\" : \"assetAccountCode\",          \"currentAccountCode\" : \"currentAccountCode\"        }      },      \"orderSettingsData\" : {        \"omnibus\" : true,        \"dealingCurrencyPolicy\" : \"INSTRUMENT_CURRENCY\"      },      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"id\" : 5,      \"subdistributorId\" : 4,      \"dealingFundHouseId\" : 0,      \"orderEtfData\" : {        \"brokerId\" : 9,        \"etfDealingData\" : {          \"launchPrice\" : 2.027123023002321833274663731572218239307403564453125,          \"pendingShares\" : 4.1456080298839363962315474054776132106781005859375,          \"dealingTypeCode\" : \"dealingTypeCode\",          \"validityPeriodCode\" : \"validityPeriodCode\",          \"executeShares\" : 3.61607674925191080461672754609026014804840087890625,          \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"stockExchangeId\" : \"stockExchangeId\"      },      \"comments\" : \"comments\",      \"productId\" : 1,      \"distributorId\" : 1,      \"paymentCurrencyCode\" : \"paymentCurrencyCode\",      \"dealingInstrumentType\" : \"FUND\",      \"orderSharesData\" : {        \"requestedShares\" : 7.4577447736837658709418974467553198337554931640625      },      \"localCurrencyCode\" : \"localCurrencyCode\",      \"externalReference\" : \"externalReference\",      \"orderFeeData\" : {        \"feePerDealingInstrument\" : 7.3862819483858839220147274318151175975799560546875,        \"secondOrderFeePercentage\" : 6.8468526983526398765889098285697400569915771484375,        \"secondOrderFeeAmount\" : 1.489415909854170383397331534069962799549102783203125,        \"firstOrderFeePercentage\" : 1.024645700144157789424070870154537260532379150390625,        \"firstOrderFeeAmount\" : 1.231513536777255612975068288506008684635162353515625      },      \"orderItalianRetailMarketData\" : {        \"feeChargeOption\" : \"FRONTLOAD\"      },      \"orderSwitchData\" : {        \"associatedOrderExternalReference\" : \"associatedOrderExternalReference\",        \"associatedDealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"associatedDealingInstrumentType\" : \"FUND\",        \"associatedCurrencyCode\" : \"associatedCurrencyCode\"      },      \"orderStatusCode\" : \"orderStatusCode\",      \"currencyCode\" : \"currencyCode\"    },    \"status\" : \"OK\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUploadedStockTransfersAsExcel", nickname = "listUploadedStockTransfersAsExcelUsingPOST", notes = "Returns an excel file with a list of all the active {UploadedStockTransfer}s of the user", response = ExcelAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedStockTransfers/list/xls",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndPage> listUploadedStockTransfersAsExcelUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUploadedStockTransfers", nickname = "listUploadedStockTransfersUsingPOST", notes = "List all the active {UploadedStockTransfer}s of the user", response = UploadedStockTransferAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UploadedStockTransferAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedStockTransfers/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<UploadedStockTransferAndPage> listUploadedStockTransfersUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"uploadedStockTransfers\" : [ {    \"messages\" : [ {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }, {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    } ],    \"stockTransfer\" : {      \"intermediaryBic\" : \"intermediaryBic\",      \"stockTransferSharesData\" : {        \"sharesAfterDistribution\" : 2.027123023002321833274663731572218239307403564453125,        \"requestedSharesAsWords\" : \"requestedSharesAsWords\",        \"requestedShares\" : 3.61607674925191080461672754609026014804840087890625,        \"sharesBeforeDistribution\" : 4.1456080298839363962315474054776132106781005859375      },      \"stockTransferItalianRetailMarketData\" : {        \"weightedAveragePrice\" : 7.061401241503109105224211816675961017608642578125,        \"withheldAmount\" : 9.301444243932575517419536481611430644989013671875,        \"weightedAverageCost\" : 2.3021358869347654518833223846741020679473876953125      },      \"senderBic\" : \"senderBic\",      \"swiftText\" : \"swiftText\",      \"stockTransferBasicData\" : {        \"productId\" : 5,        \"stockTransferStatusCode\" : \"stockTransferStatusCode\",        \"distributorId\" : 1,        \"stockTransferTypeCode\" : \"stockTransferTypeCode\",        \"dealingInstrumentType\" : \"FUND\",        \"categoryCode\" : \"categoryCode\",        \"contractExternalReference\" : \"contractExternalReference\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"externalReference\" : \"externalReference\",        \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"additionalReferenceSwift\" : \"additionalReferenceSwift\",        \"price\" : {          \"date\" : \"2000-01-23T04:56:07.000+00:00\",          \"priceTypeCode\" : \"priceTypeCode\",          \"currencyCode\" : \"currencyCode\",          \"value\" : 6.02745618307040320615897144307382404804229736328125        },        \"additionalReference\" : \"additionalReference\",        \"subdistributorId\" : 5,        \"dealingFundHouseId\" : 6,        \"followupDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"stockTransferSettingsData\" : {        \"applicationFormAccessible\" : true,        \"errorCode\" : \"errorCode\",        \"platformAccount\" : \"platformAccount\",        \"signedApplicationFormAccessible\" : true,        \"platformCode\" : \"platformCode\",        \"taxTransactionHistory\" : true      },      \"historyAccessible\" : true,      \"id\" : \"id\",      \"currencyCode\" : \"currencyCode\",      \"stockTransferTransactionData\" : {        \"externalReference\" : \"externalReference\",        \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"transaction\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        }      },      \"internalStockTransferData\" : {        \"associatedProductId\" : 0,        \"associatedContractExternalReference\" : \"associatedContractExternalReference\",        \"associatedTransactionExternalReference\" : \"associatedTransactionExternalReference\"      },      \"externalStockTransferData\" : {        \"address\" : \"address\",        \"externalAccountCode\" : \"externalAccountCode\",        \"document\" : \"document\",        \"externalCurrentAccountCode\" : \"externalCurrentAccountCode\",        \"name\" : \"name\",        \"externalAccountName\" : \"externalAccountName\"      }    },    \"id\" : 0,    \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"status\" : \"OK\"  }, {    \"messages\" : [ {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }, {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    } ],    \"stockTransfer\" : {      \"intermediaryBic\" : \"intermediaryBic\",      \"stockTransferSharesData\" : {        \"sharesAfterDistribution\" : 2.027123023002321833274663731572218239307403564453125,        \"requestedSharesAsWords\" : \"requestedSharesAsWords\",        \"requestedShares\" : 3.61607674925191080461672754609026014804840087890625,        \"sharesBeforeDistribution\" : 4.1456080298839363962315474054776132106781005859375      },      \"stockTransferItalianRetailMarketData\" : {        \"weightedAveragePrice\" : 7.061401241503109105224211816675961017608642578125,        \"withheldAmount\" : 9.301444243932575517419536481611430644989013671875,        \"weightedAverageCost\" : 2.3021358869347654518833223846741020679473876953125      },      \"senderBic\" : \"senderBic\",      \"swiftText\" : \"swiftText\",      \"stockTransferBasicData\" : {        \"productId\" : 5,        \"stockTransferStatusCode\" : \"stockTransferStatusCode\",        \"distributorId\" : 1,        \"stockTransferTypeCode\" : \"stockTransferTypeCode\",        \"dealingInstrumentType\" : \"FUND\",        \"categoryCode\" : \"categoryCode\",        \"contractExternalReference\" : \"contractExternalReference\",        \"dealingInstrument\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        },        \"externalReference\" : \"externalReference\",        \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"additionalReferenceSwift\" : \"additionalReferenceSwift\",        \"price\" : {          \"date\" : \"2000-01-23T04:56:07.000+00:00\",          \"priceTypeCode\" : \"priceTypeCode\",          \"currencyCode\" : \"currencyCode\",          \"value\" : 6.02745618307040320615897144307382404804229736328125        },        \"additionalReference\" : \"additionalReference\",        \"subdistributorId\" : 5,        \"dealingFundHouseId\" : 6,        \"followupDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"stockTransferSettingsData\" : {        \"applicationFormAccessible\" : true,        \"errorCode\" : \"errorCode\",        \"platformAccount\" : \"platformAccount\",        \"signedApplicationFormAccessible\" : true,        \"platformCode\" : \"platformCode\",        \"taxTransactionHistory\" : true      },      \"historyAccessible\" : true,      \"id\" : \"id\",      \"currencyCode\" : \"currencyCode\",      \"stockTransferTransactionData\" : {        \"externalReference\" : \"externalReference\",        \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",        \"transaction\" : {          \"id\" : \"id\",          \"label\" : \"label\",          \"url\" : \"url\"        }      },      \"internalStockTransferData\" : {        \"associatedProductId\" : 0,        \"associatedContractExternalReference\" : \"associatedContractExternalReference\",        \"associatedTransactionExternalReference\" : \"associatedTransactionExternalReference\"      },      \"externalStockTransferData\" : {        \"address\" : \"address\",        \"externalAccountCode\" : \"externalAccountCode\",        \"document\" : \"document\",        \"externalCurrentAccountCode\" : \"externalCurrentAccountCode\",        \"name\" : \"name\",        \"externalAccountName\" : \"externalAccountName\"      }    },    \"id\" : 0,    \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"status\" : \"OK\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioAssets", nickname = "listUserPortfolioAssetsUsingPOST", notes = "Get a list of asset", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/breakdowns/assets/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listUserPortfolioAssetsUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioCompositions", nickname = "listUserPortfolioCompositionsUsingPOST", notes = "List of {User}'s {Portfolio} {Composition}", response = CompositionAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CompositionAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/compositions/list",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<CompositionAndPage> listUserPortfolioCompositionsUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"compositions\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"resources\" : [ {      \"reference\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"instrumentType\" : \"FUND\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    }, {      \"reference\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"instrumentType\" : \"FUND\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    } ],    \"id\" : 0  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"resources\" : [ {      \"reference\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"instrumentType\" : \"FUND\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    }, {      \"reference\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"instrumentType\" : \"FUND\",      \"weight\" : 0.80082819046101150206595775671303272247314453125    } ],    \"id\" : 0  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioCreditQualities", nickname = "listUserPortfolioCreditQualitiesUsingPOST", notes = "Get a list of credit quality", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/breakdowns/creditQualities/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listUserPortfolioCreditQualitiesUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioCurrencies", nickname = "listUserPortfolioCurrenciesUsingPOST", notes = "Get a list of currency", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/breakdowns/currencies/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listUserPortfolioCurrenciesUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioGeographicAreas", nickname = "listUserPortfolioGeographicAreasUsingPOST", notes = "Get a geograhic list", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/breakdowns/geographicAreas/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listUserPortfolioGeographicAreasUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioHistoricalPerformances", nickname = "listUserPortfolioHistoricalPerformancesUsingPOST", notes = "Get a list of historical performance", response = HistoricalPerformancesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = HistoricalPerformancesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/performances/historical/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HistoricalPerformancesAndPage> listUserPortfolioHistoricalPerformancesUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody HistoricalPerformanceFilterAndPageFilter historicalPerformanceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"benchmarkPerformances\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"instrumentPerformances\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioHoldings", nickname = "listUserPortfolioHoldingsUsingPOST", notes = "Get a holding list", response = HoldingBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = HoldingBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/breakdowns/holdings/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HoldingBreakdownAndPage> listUserPortfolioHoldingsUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"holdingBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioPrices", nickname = "listUserPortfolioPricesUsingPOST", notes = "", response = PriceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PriceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/prices/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<PriceAndPage> listUserPortfolioPricesUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "filter"  )  @Valid @RequestBody PriceFilterAndPageFilter priceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"prices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioQuarterlyPerformances", nickname = "listUserPortfolioQuarterlyPerformancesUsingPOST", notes = "Get a list of Quarterly Performances", response = QuarterlyPerformancesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = QuarterlyPerformancesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/performances/quarterly/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<QuarterlyPerformancesAndPage> listUserPortfolioQuarterlyPerformancesUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody PerformanceFilterAndPageFilter performanceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"quarterlyPerformances\" : [ {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"quarter1\" : 0.80082819046101150206595775671303272247314453125,    \"year\" : 5.63737665663332876420099637471139430999755859375,    \"quarter2\" : 6.02745618307040320615897144307382404804229736328125,    \"quarter3\" : 1.46581298050294517310021547018550336360931396484375,    \"quarter4\" : 5.962133916683182377482808078639209270477294921875  }, {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"quarter1\" : 0.80082819046101150206595775671303272247314453125,    \"year\" : 5.63737665663332876420099637471139430999755859375,    \"quarter2\" : 6.02745618307040320615897144307382404804229736328125,    \"quarter3\" : 1.46581298050294517310021547018550336360931396484375,    \"quarter4\" : 5.962133916683182377482808078639209270477294921875  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioSectors", nickname = "listUserPortfolioSectorsUsingPOST", notes = "Get a sector list", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/breakdowns/sectors/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listUserPortfolioSectorsUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioTopAssets", nickname = "listUserPortfolioTopAssetsUsingPOST", notes = "Get a top list of asset", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/breakdowns/top/assets/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listUserPortfolioTopAssetsUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioTopCreditQualities", nickname = "listUserPortfolioTopCreditQualitiesUsingPOST", notes = "Get a top list of credit quality", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/breakdowns/top/creditQualities/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listUserPortfolioTopCreditQualitiesUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioTopCurrencies", nickname = "listUserPortfolioTopCurrenciesUsingPOST", notes = "Get a top list of currency", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/breakdowns/top/currencies/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listUserPortfolioTopCurrenciesUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioTopGeographicAreas", nickname = "listUserPortfolioTopGeographicAreasUsingPOST", notes = "Get a top geograhic list", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/breakdowns/top/geographicAreas/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listUserPortfolioTopGeographicAreasUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioTopHoldings", nickname = "listUserPortfolioTopHoldingsUsingPOST", notes = "Get a top holding list", response = HoldingBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = HoldingBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/breakdowns/top/holdings/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HoldingBreakdownAndPage> listUserPortfolioTopHoldingsUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"holdingBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolioTopSectors", nickname = "listUserPortfolioTopSectorsUsingPOST", notes = "Get a top sector list", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/breakdowns/top/sectors/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listUserPortfolioTopSectorsUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUserPortfolios", nickname = "listUserPortfoliosUsingPOST", notes = "", response = PortfolioAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PortfolioAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<PortfolioAndPage> listUserPortfoliosUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The PageFilter object to use for this search"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"portfolios\" : [ {    \"owner\" : [ {      \"distributorName\" : \"distributorName\",      \"distributorId\" : \"distributorId\",      \"name\" : \"name\",      \"id\" : \"id\"    }, {      \"distributorName\" : \"distributorName\",      \"distributorId\" : \"distributorId\",      \"name\" : \"name\",      \"id\" : \"id\"    } ],    \"fees\" : {      \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,      \"total\" : 2.027123023002321833274663731572218239307403564453125,      \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"performance\" : 3.61607674925191080461672754609026014804840087890625,      \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,      \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,      \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,      \"distribution\" : 5.962133916683182377482808078639209270477294921875,      \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,      \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,      \"others\" : 9.301444243932575517419536481611430644989013671875    },    \"typeShare\" : \"ACUMULATION\",    \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",    \"investmentObjective\" : \"investmentObjective\",    \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"lastCompositionId\" : 6,    \"lastBenchmarkCompositionId\" : 0,    \"emails\" : [ \"emails\", \"emails\" ],    \"portfolioType\" : \"SIMULATED\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"rebalancingTypeCode\" : \"rebalancingTypeCode\",    \"name\" : \"name\",    \"id\" : \"id\",    \"currencyCode\" : \"currencyCode\",    \"lastPrices\" : [ {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    }, {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    } ],    \"statusCode\" : \"statusCode\"  }, {    \"owner\" : [ {      \"distributorName\" : \"distributorName\",      \"distributorId\" : \"distributorId\",      \"name\" : \"name\",      \"id\" : \"id\"    }, {      \"distributorName\" : \"distributorName\",      \"distributorId\" : \"distributorId\",      \"name\" : \"name\",      \"id\" : \"id\"    } ],    \"fees\" : {      \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,      \"total\" : 2.027123023002321833274663731572218239307403564453125,      \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"performance\" : 3.61607674925191080461672754609026014804840087890625,      \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,      \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,      \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,      \"distribution\" : 5.962133916683182377482808078639209270477294921875,      \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,      \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,      \"others\" : 9.301444243932575517419536481611430644989013671875    },    \"typeShare\" : \"ACUMULATION\",    \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",    \"investmentObjective\" : \"investmentObjective\",    \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"lastCompositionId\" : 6,    \"lastBenchmarkCompositionId\" : 0,    \"emails\" : [ \"emails\", \"emails\" ],    \"portfolioType\" : \"SIMULATED\",    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"rebalancingTypeCode\" : \"rebalancingTypeCode\",    \"name\" : \"name\",    \"id\" : \"id\",    \"currencyCode\" : \"currencyCode\",    \"lastPrices\" : [ {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    }, {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    } ],    \"statusCode\" : \"statusCode\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "migratedSavedSearches", nickname = "migratedSavedSearchesUsingPOST", notes = "", response = SavedSearch.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SavedSearch.class),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/any/searches/migratedUsers",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SavedSearch> migratedSavedSearchesUsingPOST(@ApiParam(value = "body"  )  @Valid @RequestBody MigratedObject migratedObject) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"searchType\" : \"FUND\",  \"name\" : \"name\",  \"instrumentSearch\" : {    \"feesSearch\" : {      \"afbAppliedRedemption\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"operatingCashFlowDate\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"performance\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"totalFeeApplied\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"annual\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"initialMax\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"operatingCashFlow\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"afbAppliedSubscription\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"distribution\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"exitMax\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"instrumentSearchByCode\" : {      \"values\" : [ \"values\", \"values\" ],      \"instrumentExternalCode\" : \"instrumentExternalCode\"    },    \"instrumentType\" : \"FUND\",    \"breakdownSearch\" : {      \"geographicArea\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"creditQuality\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"breakdownDate\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"currency\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"holdings\" : {        \"holding\" : \"holding\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"assetAllocation\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"sector\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      }    },    \"performanceSearch\" : {      \"annual\" : {        \"history1\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history2\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history3\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"ytd\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history4\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history5\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"cumulative\" : {        \"oneMonth\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"threeMonths\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"oneYear\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"week\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"fromInception\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"threeYears\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"fiveYears\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"twoMonth\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"day\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"sixMonths\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      }    },    \"pricesTypesSearch\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"offer\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"nav\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"bid\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"ratingsSearch\" : {      \"blueRating\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"citywire\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"morningStar\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"regulatoryDataCode\" : \"regulatoryDataCode\",    \"fundDetailsSearch\" : {      \"fundCharacteristics\" : {        \"riskLevel\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"cnmvInstrument\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"domicilieCountryCode\" : \"domicilieCountryCode\",        \"transferable\" : true,        \"benchmarkName\" : \"benchmarkName\",        \"rebalanceFrequencyCode\" : \"rebalanceFrequencyCode\",        \"inceptionDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"countryOfRegitrationCode\" : \"countryOfRegitrationCode\",        \"parentClass\" : true,        \"datePortfolio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"distributionFrequencyCode\" : \"distributionFrequencyCode\",        \"currencyAumCode\" : \"currencyAumCode\",        \"shareTypeCode\" : \"shareTypeCode\",        \"collectiveInvestmentTransferableSecurities\" : true,        \"fundAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"dateAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"minimunInvestment\" : {          \"initial\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"subsequent\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"typeValue\" : \"UNITS\"        },        \"shareAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"lastPriceDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"baseCurrencyCode\" : \"baseCurrencyCode\",        \"fundTypeCode\" : \"fundTypeCode\",        \"name\" : [ \"name\", \"name\" ],        \"shariaCompliant\" : true,        \"currencyCode\" : \"currencyCode\",        \"initialAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"lastPrice\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"fundRange\" : {        \"etfAdministrator\" : \"etfAdministrator\",        \"fundHouseGroupId\" : 5,        \"custodian\" : \"custodian\",        \"collectiveInvestmentSchemeId\" : 1,        \"fundHouseId\" : 2,        \"universeCode\" : \"universeCode\",        \"dealingFundHouseId\" : 5,        \"marketIdentifierCode\" : \"marketIdentifierCode\"      },      \"fundClassification\" : {        \"classificationKeyValues\" : [ {          \"value\" : \"value\",          \"key\" : \"key\"        }, {          \"value\" : \"value\",          \"key\" : \"key\"        } ],        \"whiteassimilated\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"marketRegistrationKeyValues\" : [ {          \"value\" : \"value\",          \"key\" : \"key\"        }, {          \"value\" : \"value\",          \"key\" : \"key\"        } ],        \"whiteassimilatedAnt\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"euSavingDirectiveCode\" : \"euSavingDirectiveCode\"      }    },    \"statisticSearch\" : {      \"absolute\" : {        \"performance\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"maxDrawdown\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"sharpeRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"volatility\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"relative\" : {        \"r2\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"trackingError\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"correlation\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"infoRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"alpha\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"treynorRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"jesenAlpha\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"beta\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      }    },    \"marketId\" : 6  },  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "postBlockingReport", nickname = "postBlockingReportUsingPOST", notes = "Sends to the {User} an email blocking.", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/credentials/blockingReport",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> postBlockingReportUsingPOST(@ApiParam(value = "username" ,required=true )  @Valid @RequestBody String body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "postForgotPassword", nickname = "postForgotPasswordUsingPOST", notes = "Sends to the {User} an email in order to change its password itself.", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/credentials/password/forgotPassword",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> postForgotPasswordUsingPOST(@ApiParam(value = "username" ,required=true )  @Valid @RequestBody String body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "postSendNewPassword", nickname = "postSendNewPasswordUsingPOST", notes = "Sends to the {User} an email with its new password.", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/credentials/password/sendNewPassword",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> postSendNewPasswordUsingPOST(@ApiParam(value = "username" ,required=true )  @Valid @RequestBody String body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "processUploadedOrders", nickname = "processUploadedOrdersUsingPUT", notes = "Process Upload Orders", response = UploadedOrder.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UploadedOrder.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedOrders/process",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<List<UploadedOrder>> processUploadedOrdersUsingPUT(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody UploadedOrderAndSignature uploadedOrderAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ],  \"id\" : 0,  \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"order\" : {    \"orderTypeCode\" : \"orderTypeCode\",    \"orderDateData\" : {      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"depositaryId\" : 6,    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"orderAmountData\" : {      \"awardedGrossAmount\" : 5.63737665663332876420099637471139430999755859375,      \"awardedGrossAmountInLocalCurrency\" : 2.3021358869347654518833223846741020679473876953125,      \"requestedGrossAmount\" : 7.061401241503109105224211816675961017608642578125    },    \"orderContractData\" : {      \"contractExternalReference\" : \"contractExternalReference\",      \"contractAccount\" : {        \"assetAccountCode\" : \"assetAccountCode\",        \"currentAccountCode\" : \"currentAccountCode\"      }    },    \"orderSettingsData\" : {      \"omnibus\" : true,      \"dealingCurrencyPolicy\" : \"INSTRUMENT_CURRENCY\"    },    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"id\" : 5,    \"subdistributorId\" : 4,    \"dealingFundHouseId\" : 0,    \"orderEtfData\" : {      \"brokerId\" : 9,      \"etfDealingData\" : {        \"launchPrice\" : 2.027123023002321833274663731572218239307403564453125,        \"pendingShares\" : 4.1456080298839363962315474054776132106781005859375,        \"dealingTypeCode\" : \"dealingTypeCode\",        \"validityPeriodCode\" : \"validityPeriodCode\",        \"executeShares\" : 3.61607674925191080461672754609026014804840087890625,        \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"stockExchangeId\" : \"stockExchangeId\"    },    \"comments\" : \"comments\",    \"productId\" : 1,    \"distributorId\" : 1,    \"paymentCurrencyCode\" : \"paymentCurrencyCode\",    \"dealingInstrumentType\" : \"FUND\",    \"orderSharesData\" : {      \"requestedShares\" : 7.4577447736837658709418974467553198337554931640625    },    \"localCurrencyCode\" : \"localCurrencyCode\",    \"externalReference\" : \"externalReference\",    \"orderFeeData\" : {      \"feePerDealingInstrument\" : 7.3862819483858839220147274318151175975799560546875,      \"secondOrderFeePercentage\" : 6.8468526983526398765889098285697400569915771484375,      \"secondOrderFeeAmount\" : 1.489415909854170383397331534069962799549102783203125,      \"firstOrderFeePercentage\" : 1.024645700144157789424070870154537260532379150390625,      \"firstOrderFeeAmount\" : 1.231513536777255612975068288506008684635162353515625    },    \"orderItalianRetailMarketData\" : {      \"feeChargeOption\" : \"FRONTLOAD\"    },    \"orderSwitchData\" : {      \"associatedOrderExternalReference\" : \"associatedOrderExternalReference\",      \"associatedDealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"associatedDealingInstrumentType\" : \"FUND\",      \"associatedCurrencyCode\" : \"associatedCurrencyCode\"    },    \"orderStatusCode\" : \"orderStatusCode\",    \"currencyCode\" : \"currencyCode\"  },  \"status\" : \"OK\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "processUploadedStockTransfers", nickname = "processUploadedStockTransfersUsingPUT", notes = "Process Upload StockTransfers", response = UploadedStockTransfer.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UploadedStockTransfer.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedStockTransfers/process",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<List<UploadedStockTransfer>> processUploadedStockTransfersUsingPUT(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody UploadedStockTransferAndSignature uploadedStockTransferAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ],  \"stockTransfer\" : {    \"intermediaryBic\" : \"intermediaryBic\",    \"stockTransferSharesData\" : {      \"sharesAfterDistribution\" : 2.027123023002321833274663731572218239307403564453125,      \"requestedSharesAsWords\" : \"requestedSharesAsWords\",      \"requestedShares\" : 3.61607674925191080461672754609026014804840087890625,      \"sharesBeforeDistribution\" : 4.1456080298839363962315474054776132106781005859375    },    \"stockTransferItalianRetailMarketData\" : {      \"weightedAveragePrice\" : 7.061401241503109105224211816675961017608642578125,      \"withheldAmount\" : 9.301444243932575517419536481611430644989013671875,      \"weightedAverageCost\" : 2.3021358869347654518833223846741020679473876953125    },    \"senderBic\" : \"senderBic\",    \"swiftText\" : \"swiftText\",    \"stockTransferBasicData\" : {      \"productId\" : 5,      \"stockTransferStatusCode\" : \"stockTransferStatusCode\",      \"distributorId\" : 1,      \"stockTransferTypeCode\" : \"stockTransferTypeCode\",      \"dealingInstrumentType\" : \"FUND\",      \"categoryCode\" : \"categoryCode\",      \"contractExternalReference\" : \"contractExternalReference\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"externalReference\" : \"externalReference\",      \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"additionalReferenceSwift\" : \"additionalReferenceSwift\",      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"additionalReference\" : \"additionalReference\",      \"subdistributorId\" : 5,      \"dealingFundHouseId\" : 6,      \"followupDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"stockTransferSettingsData\" : {      \"applicationFormAccessible\" : true,      \"errorCode\" : \"errorCode\",      \"platformAccount\" : \"platformAccount\",      \"signedApplicationFormAccessible\" : true,      \"platformCode\" : \"platformCode\",      \"taxTransactionHistory\" : true    },    \"historyAccessible\" : true,    \"id\" : \"id\",    \"currencyCode\" : \"currencyCode\",    \"stockTransferTransactionData\" : {      \"externalReference\" : \"externalReference\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"internalStockTransferData\" : {      \"associatedProductId\" : 0,      \"associatedContractExternalReference\" : \"associatedContractExternalReference\",      \"associatedTransactionExternalReference\" : \"associatedTransactionExternalReference\"    },    \"externalStockTransferData\" : {      \"address\" : \"address\",      \"externalAccountCode\" : \"externalAccountCode\",      \"document\" : \"document\",      \"externalCurrentAccountCode\" : \"externalCurrentAccountCode\",      \"name\" : \"name\",      \"externalAccountName\" : \"externalAccountName\"    }  },  \"id\" : 0,  \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"status\" : \"OK\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "refuseSolvencyFund", nickname = "refuseSolvencyFundUsingPOST", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/solvency/funds/refuse",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> refuseSolvencyFundUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body"  )  @Valid @RequestBody SolvencyFundIds solvencyFundIds) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "setPassword", nickname = "setPasswordUsingPUT", notes = "Set the new password of the {User}, without checking the current value, only validating a token, that was previously sent to the user", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/credentials/password/set",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> setPasswordUsingPUT(@ApiParam(value = "filter" ,required=true )  @Valid @RequestBody ChangeCredentialsByTokenFilter changeCredentialsByTokenFilter) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateSavedComparisonById", nickname = "updateSavedComparisonByIdUsingPUT", notes = "Updates a comparison form data", response = SavedComparison.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SavedComparison.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/comparisons/{savedComparisonId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<SavedComparison> updateSavedComparisonByIdUsingPUT(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the  {SavedComparison}",required=true) @PathVariable("savedComparisonId") String savedComparisonId,@ApiParam(value = "The SavedComparison object to update SavedComparison from form data" ,required=true )  @Valid @RequestBody SavedComparison savedComparison) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instruments\" : [ {    \"instrumentType\" : \"FUND\",    \"instrumentId\" : \"instrumentId\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"instrumentType\" : \"FUND\",    \"instrumentId\" : \"instrumentId\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"name\" : \"name\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateSavedSearch", nickname = "updateSavedSearchUsingPUT", notes = "Updates a search criteria with form data", response = SavedSearch.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SavedSearch.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/searches/{savedSearchId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<SavedSearch> updateSavedSearchUsingPUT(@ApiParam(value = "The Id of the {SavedSearch}",required=true) @PathVariable("savedSearchId") String savedSearchId,@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The SavedSearch object to update search criteria from form data" ,required=true )  @Valid @RequestBody SavedSearch savedSearch) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"searchType\" : \"FUND\",  \"name\" : \"name\",  \"instrumentSearch\" : {    \"feesSearch\" : {      \"afbAppliedRedemption\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"operatingCashFlowDate\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"performance\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"totalFeeApplied\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"annual\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"initialMax\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"operatingCashFlow\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"afbAppliedSubscription\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"distribution\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"exitMax\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"instrumentSearchByCode\" : {      \"values\" : [ \"values\", \"values\" ],      \"instrumentExternalCode\" : \"instrumentExternalCode\"    },    \"instrumentType\" : \"FUND\",    \"breakdownSearch\" : {      \"geographicArea\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"creditQuality\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"breakdownDate\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"currency\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"holdings\" : {        \"holding\" : \"holding\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"assetAllocation\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      },      \"sector\" : {        \"code\" : \"code\",        \"comparison\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"inTopTen\" : true      }    },    \"performanceSearch\" : {      \"annual\" : {        \"history1\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history2\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history3\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"ytd\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history4\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"history5\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"cumulative\" : {        \"oneMonth\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"threeMonths\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"oneYear\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"week\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"fromInception\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"threeYears\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"fiveYears\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"twoMonth\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"day\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"sixMonths\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      }    },    \"pricesTypesSearch\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"offer\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"nav\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"bid\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"ratingsSearch\" : {      \"blueRating\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"citywire\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      },      \"morningStar\" : {        \"comparisonCode\" : \"comparisonCode\",        \"value\" : 0.80082819046101150206595775671303272247314453125      }    },    \"regulatoryDataCode\" : \"regulatoryDataCode\",    \"fundDetailsSearch\" : {      \"fundCharacteristics\" : {        \"riskLevel\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"cnmvInstrument\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"domicilieCountryCode\" : \"domicilieCountryCode\",        \"transferable\" : true,        \"benchmarkName\" : \"benchmarkName\",        \"rebalanceFrequencyCode\" : \"rebalanceFrequencyCode\",        \"inceptionDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"countryOfRegitrationCode\" : \"countryOfRegitrationCode\",        \"parentClass\" : true,        \"datePortfolio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"distributionFrequencyCode\" : \"distributionFrequencyCode\",        \"currencyAumCode\" : \"currencyAumCode\",        \"shareTypeCode\" : \"shareTypeCode\",        \"collectiveInvestmentTransferableSecurities\" : true,        \"fundAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"dateAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"minimunInvestment\" : {          \"initial\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"subsequent\" : {            \"comparisonCode\" : \"comparisonCode\",            \"value\" : 0.80082819046101150206595775671303272247314453125          },          \"typeValue\" : \"UNITS\"        },        \"shareAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"lastPriceDate\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : \"2000-01-23T04:56:07.000+00:00\"        },        \"baseCurrencyCode\" : \"baseCurrencyCode\",        \"fundTypeCode\" : \"fundTypeCode\",        \"name\" : [ \"name\", \"name\" ],        \"shariaCompliant\" : true,        \"currencyCode\" : \"currencyCode\",        \"initialAum\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"lastPrice\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"fundRange\" : {        \"etfAdministrator\" : \"etfAdministrator\",        \"fundHouseGroupId\" : 5,        \"custodian\" : \"custodian\",        \"collectiveInvestmentSchemeId\" : 1,        \"fundHouseId\" : 2,        \"universeCode\" : \"universeCode\",        \"dealingFundHouseId\" : 5,        \"marketIdentifierCode\" : \"marketIdentifierCode\"      },      \"fundClassification\" : {        \"classificationKeyValues\" : [ {          \"value\" : \"value\",          \"key\" : \"key\"        }, {          \"value\" : \"value\",          \"key\" : \"key\"        } ],        \"whiteassimilated\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"marketRegistrationKeyValues\" : [ {          \"value\" : \"value\",          \"key\" : \"key\"        }, {          \"value\" : \"value\",          \"key\" : \"key\"        } ],        \"whiteassimilatedAnt\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"euSavingDirectiveCode\" : \"euSavingDirectiveCode\"      }    },    \"statisticSearch\" : {      \"absolute\" : {        \"performance\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"maxDrawdown\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"sharpeRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"volatility\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      },      \"relative\" : {        \"r2\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"trackingError\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"correlation\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"infoRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"alpha\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"treynorRatio\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"jesenAlpha\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        },        \"beta\" : {          \"comparisonCode\" : \"comparisonCode\",          \"value\" : 0.80082819046101150206595775671303272247314453125        }      }    },    \"marketId\" : 6  },  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateUserPortfolioById", nickname = "updateUserPortfolioByIdUsingPUT", notes = "Updates a portfolio", response = Portfolio.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Portfolio.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Portfolio> updateUserPortfolioByIdUsingPUT(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId,@ApiParam(value = "The Portfolio object to update portfolio" ,required=true )  @Valid @RequestBody Portfolio portfolio) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : [ {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"distributorName\" : \"distributorName\",    \"distributorId\" : \"distributorId\",    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"fees\" : {    \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,    \"total\" : 2.027123023002321833274663731572218239307403564453125,    \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"performance\" : 3.61607674925191080461672754609026014804840087890625,    \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,    \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,    \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,    \"distribution\" : 5.962133916683182377482808078639209270477294921875,    \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,    \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,    \"others\" : 9.301444243932575517419536481611430644989013671875  },  \"typeShare\" : \"ACUMULATION\",  \"comparisonBenchmarkId\" : \"comparisonBenchmarkId\",  \"investmentObjective\" : \"investmentObjective\",  \"calculationDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"lastCompositionId\" : 6,  \"lastBenchmarkCompositionId\" : 0,  \"emails\" : [ \"emails\", \"emails\" ],  \"portfolioType\" : \"SIMULATED\",  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"rebalancingTypeCode\" : \"rebalancingTypeCode\",  \"name\" : \"name\",  \"id\" : \"id\",  \"currencyCode\" : \"currencyCode\",  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateUserPreferences", nickname = "updateUserPreferencesUsingPUT", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/preferences",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateUserPreferencesUsingPUT(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody Preferences preferences) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "uploadOrdersFile", nickname = "uploadOrdersFileUsingPOST", notes = "Inserts into the system all the {UploadedOrder}s included in the input file", response = UploadedFileResult.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UploadedFileResult.class),
        @ApiResponse(code = 201, message = "successful operation", response = UploadedFileResult.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedOrders/upload",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    default ResponseEntity<UploadedFileResult> uploadOrdersFileUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"totalNumber\" : 6,  \"failedOrders\" : [ {    \"inputFileRow\" : 0,    \"message\" : {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }  }, {    \"inputFileRow\" : 0,    \"message\" : {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "uploadStockTransfersFile", nickname = "uploadStockTransfersFileUsingPOST", notes = "Inserts into the system all the {UploadedStockTransfer}s included in the input file", response = UploadedFileStockTransferResult.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UploadedFileStockTransferResult.class),
        @ApiResponse(code = 201, message = "successful operation", response = UploadedFileStockTransferResult.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedStockTransfers/upload",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    default ResponseEntity<UploadedFileStockTransferResult> uploadStockTransfersFileUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"totalNumber\" : 6,  \"failedStockTransfers\" : [ {    \"inputFileRow\" : 0,    \"message\" : {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }  }, {    \"inputFileRow\" : 0,    \"message\" : {      \"errorCode\" : \"errorCode\",      \"changedValue\" : \"changedValue\",      \"status\" : \"OK\"    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateUploadedOrders", nickname = "validateUploadedOrdersUsingPOST", notes = "Validate a list of {UploadeOrder}s", response = UploadedOrder.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UploadedOrder.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedOrders/validate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<UploadedOrder>> validateUploadedOrdersUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody List<UploadedOrder> uploadedOrder) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ],  \"id\" : 0,  \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"order\" : {    \"orderTypeCode\" : \"orderTypeCode\",    \"orderDateData\" : {      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"settlementDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"depositaryId\" : 6,    \"dealingInstrument\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"orderAmountData\" : {      \"awardedGrossAmount\" : 5.63737665663332876420099637471139430999755859375,      \"awardedGrossAmountInLocalCurrency\" : 2.3021358869347654518833223846741020679473876953125,      \"requestedGrossAmount\" : 7.061401241503109105224211816675961017608642578125    },    \"orderContractData\" : {      \"contractExternalReference\" : \"contractExternalReference\",      \"contractAccount\" : {        \"assetAccountCode\" : \"assetAccountCode\",        \"currentAccountCode\" : \"currentAccountCode\"      }    },    \"orderSettingsData\" : {      \"omnibus\" : true,      \"dealingCurrencyPolicy\" : \"INSTRUMENT_CURRENCY\"    },    \"price\" : {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    },    \"id\" : 5,    \"subdistributorId\" : 4,    \"dealingFundHouseId\" : 0,    \"orderEtfData\" : {      \"brokerId\" : 9,      \"etfDealingData\" : {        \"launchPrice\" : 2.027123023002321833274663731572218239307403564453125,        \"pendingShares\" : 4.1456080298839363962315474054776132106781005859375,        \"dealingTypeCode\" : \"dealingTypeCode\",        \"validityPeriodCode\" : \"validityPeriodCode\",        \"executeShares\" : 3.61607674925191080461672754609026014804840087890625,        \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\"      },      \"stockExchangeId\" : \"stockExchangeId\"    },    \"comments\" : \"comments\",    \"productId\" : 1,    \"distributorId\" : 1,    \"paymentCurrencyCode\" : \"paymentCurrencyCode\",    \"dealingInstrumentType\" : \"FUND\",    \"orderSharesData\" : {      \"requestedShares\" : 7.4577447736837658709418974467553198337554931640625    },    \"localCurrencyCode\" : \"localCurrencyCode\",    \"externalReference\" : \"externalReference\",    \"orderFeeData\" : {      \"feePerDealingInstrument\" : 7.3862819483858839220147274318151175975799560546875,      \"secondOrderFeePercentage\" : 6.8468526983526398765889098285697400569915771484375,      \"secondOrderFeeAmount\" : 1.489415909854170383397331534069962799549102783203125,      \"firstOrderFeePercentage\" : 1.024645700144157789424070870154537260532379150390625,      \"firstOrderFeeAmount\" : 1.231513536777255612975068288506008684635162353515625    },    \"orderItalianRetailMarketData\" : {      \"feeChargeOption\" : \"FRONTLOAD\"    },    \"orderSwitchData\" : {      \"associatedOrderExternalReference\" : \"associatedOrderExternalReference\",      \"associatedDealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"associatedDealingInstrumentType\" : \"FUND\",      \"associatedCurrencyCode\" : \"associatedCurrencyCode\"    },    \"orderStatusCode\" : \"orderStatusCode\",    \"currencyCode\" : \"currencyCode\"  },  \"status\" : \"OK\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateUploadedStockTransfers", nickname = "validateUploadedStockTransfersUsingPOST", notes = "Validate a list of {UploadeStockTransfer}s", response = UploadedStockTransfer.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UploadedStockTransfer.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/uploadedStockTransfers/validate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<UploadedStockTransfer>> validateUploadedStockTransfersUsingPOST(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody List<UploadedStockTransfer> uploadedStockTransfer) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ],  \"stockTransfer\" : {    \"intermediaryBic\" : \"intermediaryBic\",    \"stockTransferSharesData\" : {      \"sharesAfterDistribution\" : 2.027123023002321833274663731572218239307403564453125,      \"requestedSharesAsWords\" : \"requestedSharesAsWords\",      \"requestedShares\" : 3.61607674925191080461672754609026014804840087890625,      \"sharesBeforeDistribution\" : 4.1456080298839363962315474054776132106781005859375    },    \"stockTransferItalianRetailMarketData\" : {      \"weightedAveragePrice\" : 7.061401241503109105224211816675961017608642578125,      \"withheldAmount\" : 9.301444243932575517419536481611430644989013671875,      \"weightedAverageCost\" : 2.3021358869347654518833223846741020679473876953125    },    \"senderBic\" : \"senderBic\",    \"swiftText\" : \"swiftText\",    \"stockTransferBasicData\" : {      \"productId\" : 5,      \"stockTransferStatusCode\" : \"stockTransferStatusCode\",      \"distributorId\" : 1,      \"stockTransferTypeCode\" : \"stockTransferTypeCode\",      \"dealingInstrumentType\" : \"FUND\",      \"categoryCode\" : \"categoryCode\",      \"contractExternalReference\" : \"contractExternalReference\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"externalReference\" : \"externalReference\",      \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"additionalReferenceSwift\" : \"additionalReferenceSwift\",      \"price\" : {        \"date\" : \"2000-01-23T04:56:07.000+00:00\",        \"priceTypeCode\" : \"priceTypeCode\",        \"currencyCode\" : \"currencyCode\",        \"value\" : 6.02745618307040320615897144307382404804229736328125      },      \"additionalReference\" : \"additionalReference\",      \"subdistributorId\" : 5,      \"dealingFundHouseId\" : 6,      \"followupDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"stockTransferSettingsData\" : {      \"applicationFormAccessible\" : true,      \"errorCode\" : \"errorCode\",      \"platformAccount\" : \"platformAccount\",      \"signedApplicationFormAccessible\" : true,      \"platformCode\" : \"platformCode\",      \"taxTransactionHistory\" : true    },    \"historyAccessible\" : true,    \"id\" : \"id\",    \"currencyCode\" : \"currencyCode\",    \"stockTransferTransactionData\" : {      \"externalReference\" : \"externalReference\",      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transaction\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    },    \"internalStockTransferData\" : {      \"associatedProductId\" : 0,      \"associatedContractExternalReference\" : \"associatedContractExternalReference\",      \"associatedTransactionExternalReference\" : \"associatedTransactionExternalReference\"    },    \"externalStockTransferData\" : {      \"address\" : \"address\",      \"externalAccountCode\" : \"externalAccountCode\",      \"document\" : \"document\",      \"externalCurrentAccountCode\" : \"externalCurrentAccountCode\",      \"name\" : \"name\",      \"externalAccountName\" : \"externalAccountName\"    }  },  \"id\" : 0,  \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"status\" : \"OK\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "viewed", nickname = "viewedUsingPOST1", notes = "update portfolio to status viewed", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/users/{userId}/portfolios/{portfolioId}/viewed",
        method = RequestMethod.POST)
    default ResponseEntity<Void> viewedUsingPOST1(@ApiParam(value = "The Id of the {User}",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The Id of the {Portfolio}",required=true) @PathVariable("portfolioId") String portfolioId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
