/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.EmployeeArea;
import org.openapitools.model.EmployeeAreaAndPage;
import org.openapitools.model.EmployeeCompany;
import org.openapitools.model.EmployeeCompanyAndPage;
import org.openapitools.model.EmployeeCountry;
import org.openapitools.model.EmployeeCountryAndPage;
import org.openapitools.model.EmployeeDepartment;
import org.openapitools.model.EmployeeDepartmentAndPage;
import org.openapitools.model.EmployeeOffice;
import org.openapitools.model.EmployeeOfficeAndPage;
import org.openapitools.model.PageFilter;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "companies", description = "the companies API")
public interface CompaniesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "getEmployeeAreaById", nickname = "getEmployeeAreaByIdUsingGET", notes = "This method returns the {EmployeeArea} whose {EmployeeArea.id} is specified as parameter.", response = EmployeeArea.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "companies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EmployeeArea.class),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/companies/{employeeCompanyId}/countries/{employeeCountryId}/offices/{employeeOfficeId}/areas/{employeeAreaId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EmployeeArea> getEmployeeAreaByIdUsingGET(@ApiParam(value = "The Id of the {EmployeeCompany}",required=true) @PathVariable("employeeCompanyId") String employeeCompanyId,@ApiParam(value = "The Id of the {EmployeeCountry}",required=true) @PathVariable("employeeCountryId") String employeeCountryId,@ApiParam(value = "The Id of the {EmployeeOffice}",required=true) @PathVariable("employeeOfficeId") String employeeOfficeId,@ApiParam(value = "The Id of the {EmployeeArea}",required=true) @PathVariable("employeeAreaId") String employeeAreaId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"name\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEmployeeCompanyById", nickname = "getEmployeeCompanyByIdUsingGET", notes = "This method returns the {EmployeeCompany} whose {EmployeeCompany.id} is specified as parameter.", response = EmployeeCompany.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "companies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EmployeeCompany.class),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/companies/{employeeCompanyId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EmployeeCompany> getEmployeeCompanyByIdUsingGET(@ApiParam(value = "The Id of the {EmployeeCompany}",required=true) @PathVariable("employeeCompanyId") String employeeCompanyId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"name\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEmployeeCountryById", nickname = "getEmployeeCountryByIdUsingGET", notes = "This method returns the {EmployeeCountry} whose {EmployeeCountry.id} is specified as parameter.", response = EmployeeCountry.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "companies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EmployeeCountry.class),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/companies/{employeeCompanyId}/countries/{employeeCountryId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EmployeeCountry> getEmployeeCountryByIdUsingGET(@ApiParam(value = "The Id of the {EmployeeCompany}",required=true) @PathVariable("employeeCompanyId") String employeeCompanyId,@ApiParam(value = "The Id of the {EmployeeCountry}",required=true) @PathVariable("employeeCountryId") String employeeCountryId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"name\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEmployeeDepartmentById", nickname = "getEmployeeDepartmentByIdUsingGET", notes = "This method returns the {EmployeeDepartment} whose {EmployeeDepartment.id} is specified as parameter.", response = EmployeeDepartment.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "companies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EmployeeDepartment.class),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/companies/{employeeCompanyId}/countries/{employeeCountryId}/offices/{employeeOfficeId}/areas/{employeeAreaId}/departments/{employeeDepartmentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EmployeeDepartment> getEmployeeDepartmentByIdUsingGET(@ApiParam(value = "The Id of the {EmployeeCompany}",required=true) @PathVariable("employeeCompanyId") String employeeCompanyId,@ApiParam(value = "The Id of the {EmployeeCountry}",required=true) @PathVariable("employeeCountryId") String employeeCountryId,@ApiParam(value = "The Id of the {EmployeeOffice}",required=true) @PathVariable("employeeOfficeId") String employeeOfficeId,@ApiParam(value = "The Id of the {EmployeeArea}",required=true) @PathVariable("employeeAreaId") String employeeAreaId,@ApiParam(value = "The Id of the {EmployeeDepartment}",required=true) @PathVariable("employeeDepartmentId") String employeeDepartmentId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"name\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEmployeeOfficeById", nickname = "getEmployeeOfficeByIdUsingGET", notes = "This method returns the {EmployeeOffice} whose {EmployeeOffice.id} is specified as parameter.", response = EmployeeOffice.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "companies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EmployeeOffice.class),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/companies/{employeeCompanyId}/countries/{employeeCountryId}/offices/{employeeOfficeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EmployeeOffice> getEmployeeOfficeByIdUsingGET(@ApiParam(value = "The Id of the {EmployeeCompany}",required=true) @PathVariable("employeeCompanyId") String employeeCompanyId,@ApiParam(value = "The Id of the {EmployeeCountry}",required=true) @PathVariable("employeeCountryId") String employeeCountryId,@ApiParam(value = "The Id of the {EmployeeOffice}",required=true) @PathVariable("employeeOfficeId") String employeeOfficeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"name\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEmployeeAreas", nickname = "listEmployeeAreasUsingPOST", notes = "This method returns list of {EmployeeArea}s", response = EmployeeAreaAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "companies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EmployeeAreaAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/companies/{employeeCompanyId}/countries/{employeeCountryId}/offices/{employeeOfficeId}/areas/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<EmployeeAreaAndPage> listEmployeeAreasUsingPOST(@ApiParam(value = "The Id of the {EmployeeCompany}",required=true) @PathVariable("employeeCompanyId") String employeeCompanyId,@ApiParam(value = "The Id of the {EmployeeCountry}",required=true) @PathVariable("employeeCountryId") String employeeCountryId,@ApiParam(value = "The Id of the {EmployeeOffice}",required=true) @PathVariable("employeeOfficeId") String employeeOfficeId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"employeeAreas\" : [ {    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEmployeeCompanies", nickname = "listEmployeeCompaniesUsingPOST", notes = "This method returns list of {EmployeeCompany}s", response = EmployeeCompanyAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "companies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EmployeeCompanyAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/companies/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<EmployeeCompanyAndPage> listEmployeeCompaniesUsingPOST(@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"employeeCompanies\" : [ {    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEmployeeCountries", nickname = "listEmployeeCountriesUsingPOST", notes = "This method returns list of {EmployeeCountry}s", response = EmployeeCountryAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "companies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EmployeeCountryAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/companies/{employeeCompanyId}/countries/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<EmployeeCountryAndPage> listEmployeeCountriesUsingPOST(@ApiParam(value = "The Id of the {EmployeeCompany}",required=true) @PathVariable("employeeCompanyId") String employeeCompanyId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"employeeCountries\" : [ {    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEmployeeDepartments", nickname = "listEmployeeDepartmentsUsingPOST", notes = "This method returns list of {EmployeeDepartment}s", response = EmployeeDepartmentAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "companies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EmployeeDepartmentAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/companies/{employeeCompanyId}/countries/{employeeCountryId}/offices/{employeeOfficeId}/areas/{employeeAreaId}/departments/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<EmployeeDepartmentAndPage> listEmployeeDepartmentsUsingPOST(@ApiParam(value = "The Id of the {EmployeeCompany}",required=true) @PathVariable("employeeCompanyId") String employeeCompanyId,@ApiParam(value = "The Id of the {EmployeeCountry}",required=true) @PathVariable("employeeCountryId") String employeeCountryId,@ApiParam(value = "The Id of the {EmployeeOffice}",required=true) @PathVariable("employeeOfficeId") String employeeOfficeId,@ApiParam(value = "The Id of the {EmployeeArea}",required=true) @PathVariable("employeeAreaId") String employeeAreaId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"employeeDepartments\" : [ {    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"name\" : \"name\",    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEmployeeOffices", nickname = "listEmployeeOfficesUsingPOST", notes = "This method returns list of {EmployeeOffice}s", response = EmployeeOfficeAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "companies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EmployeeOfficeAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/companies/{employeeCompanyId}/countries/{employeeCountryId}/offices/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<EmployeeOfficeAndPage> listEmployeeOfficesUsingPOST(@ApiParam(value = "The Id of the {EmployeeCompany}",required=true) @PathVariable("employeeCompanyId") String employeeCompanyId,@ApiParam(value = "The Id of the {EmployeeCountry}",required=true) @PathVariable("employeeCountryId") String employeeCountryId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"employeeOffices\" : [ {    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"name\" : \"name\",    \"id\" : \"id\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
