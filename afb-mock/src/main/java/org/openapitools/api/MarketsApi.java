/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AnnualBenchmarkAndInstrumentPerformance;
import org.openapitools.model.AssetUnderManagment;
import org.openapitools.model.AssetUnderManagmentFilter;
import org.openapitools.model.BreakDownDatesAndPage;
import org.openapitools.model.BreakdownFilter;
import org.openapitools.model.BreakdownFilterAndPageFilter;
import org.openapitools.model.CalculatorCummulativeAndAnnualizedPerformance;
import org.openapitools.model.CitywireAndPage;
import org.openapitools.model.ConsobDisclaimer;
import org.openapitools.model.CountryAndPage;
import org.openapitools.model.CumulativeBenchmarkAndInstrumentPerformance;
import org.openapitools.model.Document;
import org.openapitools.model.DocumentAndPage;
import org.openapitools.model.Etf;
import org.openapitools.model.Fees;
import org.openapitools.model.FeesFilter;
import org.openapitools.model.Fund;
import org.openapitools.model.FundAndPage;
import org.openapitools.model.FundFamilyPrice;
import org.openapitools.model.FundTypeCodes;
import org.openapitools.model.GenericBreakdownAndPage;
import org.openapitools.model.HistoricalPerformanceFilterAndPageFilter;
import org.openapitools.model.HistoricalPerformancesAndPage;
import org.openapitools.model.HoldingBreakdownAndPage;
import org.openapitools.model.ManagersAndPage;
import org.openapitools.model.Market;
import org.openapitools.model.MarketAndPage;
import org.openapitools.model.OperationalDetails;
import org.openapitools.model.PageFilter;
import org.openapitools.model.PerformanceFilter;
import org.openapitools.model.PerformanceFilterAndPageFilter;
import org.openapitools.model.PriceAndPage;
import org.openapitools.model.PriceFilterAndPageFilter;
import org.openapitools.model.QuarterlyPerformancesAndPage;
import org.openapitools.model.Rating;
import org.openapitools.model.ResourceReferenceAndPage;
import org.openapitools.model.RiskClassification;
import org.openapitools.model.Statistic;
import org.openapitools.model.StatisticFilter;
import org.openapitools.model.StatisticRawFilter;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "markets", description = "the markets API")
public interface MarketsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "fundFamilyPrices", nickname = "fundFamilyPricesUsingGET", notes = "Get a list of fundfamily prices.", response = FundFamilyPrice.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = FundFamilyPrice.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/fundfamily/prices",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<FundFamilyPrice>> fundFamilyPricesUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"highest12Month\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"mostRecent\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"name\" : \"name\",  \"lastMonth\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"id\" : 0,  \"lowest12Month\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"informationProvider\" : \"ALLFUNDS\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateFamilyReportAsXls", nickname = "generateFamilyReportAsXlsUsingPOST", notes = "Generate family report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/report/family/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateFamilyReportAsXlsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateLookThroughReportAsPdf", nickname = "generateLookThroughReportAsPdfUsingPOST1", notes = "Generate look through report as PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/report/lookThrough/pdf",
        produces = { "application/pdf" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateLookThroughReportAsPdfUsingPOST1(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilter breakdownFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateLookThroughReportAsXls", nickname = "generateLookThroughReportAsXlsUsingPOST1", notes = "Generate look through report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/report/lookThrough/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateLookThroughReportAsXlsUsingPOST1(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilter breakdownFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateLookThroughReportEtfAsPdf", nickname = "generateLookThroughReportEtfAsPdfUsingPOST", notes = "Generate look through report as PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/report/lookThrough/pdf",
        produces = { "application/pdf" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateLookThroughReportEtfAsPdfUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilter breakdownFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateLookThroughReportEtfAsXls", nickname = "generateLookThroughReportEtfAsXlsUsingPOST", notes = "Generate look through report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/report/lookThrough/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateLookThroughReportEtfAsXlsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilter breakdownFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateOperationalReportAsPdfAny", nickname = "generateOperationalReportAsPdfAnyUsingGET", notes = "Generate operational report as PDF file private", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/any/funds/{fundId}/report/operational/private/pdf",
        produces = { "application/pdf" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<byte[]>> generateOperationalReportAsPdfAnyUsingGET(@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateOperationalReportAsPdf", nickname = "generateOperationalReportAsPdfUsingGET", notes = "Generate operational report as PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/report/operational/pdf",
        produces = { "application/pdf" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<byte[]>> generateOperationalReportAsPdfUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateOperationalReportAsXls", nickname = "generateOperationalReportAsXlsUsingGET", notes = "Generate operational report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/report/operational/xls",
        produces = { "application/vnd.ms-excel" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<byte[]>> generateOperationalReportAsXlsUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateOverviewReportAsPdf", nickname = "generateOverviewReportAsPdfUsingPOST", notes = "Generate overview report as PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/report/overview/pdf",
        produces = { "application/pdf" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateOverviewReportAsPdfUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateOverviewReportAsXls", nickname = "generateOverviewReportAsXlsUsingPOST", notes = "Generate overview report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/report/overview/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateOverviewReportAsXlsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateOverviewReportEtfAsPdf", nickname = "generateOverviewReportEtfAsPdfUsingPOST", notes = "Generate overview report as PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/report/overview/pdf",
        produces = { "application/pdf" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateOverviewReportEtfAsPdfUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateOverviewReportEtfAsXls", nickname = "generateOverviewReportEtfAsXlsUsingPOST", notes = "Generate overview report as XLS file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/report/overview/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateOverviewReportEtfAsXlsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getAnyEtfById", nickname = "getAnyEtfByIdUsingGET", notes = "", response = Etf.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Etf.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/any/etfs/{etfId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Etf> getAnyEtfByIdUsingGET(@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"riskLevel\" : {    \"imageUrl\" : \"imageUrl\",    \"value\" : 5  },  \"typeShare\" : \"ACUMULATION\",  \"domicilieCountryCode\" : \"domicilieCountryCode\",  \"fundHouseBenchmarkDescription\" : \"fundHouseBenchmarkDescription\",  \"marketRegistrationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"dealingAvailable\" : true,  \"marketId\" : 1,  \"otherEtfs\" : [ {    \"ticker\" : \"ticker\",    \"name\" : \"name\",    \"currencyCode\" : \"currencyCode\"  }, {    \"ticker\" : \"ticker\",    \"name\" : \"name\",    \"currencyCode\" : \"currencyCode\"  } ],  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"comparasionBenchmarkId\" : \"comparasionBenchmarkId\",  \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : 6,  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"classificationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"rebalanceFrequency\" : \"DAILY\",  \"investmentObjective\" : \"investmentObjective\",  \"collectiveInvestmentTransferableSecurities\" : \"collectiveInvestmentTransferableSecurities\",  \"distributionFrequency\" : \"DAILY\",  \"structure\" : {    \"legalStructureCode\" : \"legalStructureCode\",    \"replicationMethod\" : \"replicationMethod\",    \"product\" : \"product\",    \"etfAdministrator\" : \"etfAdministrator\",    \"fundHouseGroupId\" : 2,    \"custodian\" : \"custodian\",    \"collectiveInvestmentSchemeId\" : 5,    \"fundHouseId\" : 7  },  \"informationProvider\" : \"ALLFUNDS\",  \"fundGroupId\" : 0,  \"externalCodeKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"firstPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"name\" : \"name\",  \"shariaCompliant\" : true,  \"currencyCode\" : \"currencyCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getAnyFundById", nickname = "getAnyFundByIdUsingGET", notes = "", response = Fund.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Fund.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/any/funds/{fundId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Fund> getAnyFundByIdUsingGET(@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"riskLevel\" : {    \"imageUrl\" : \"imageUrl\",    \"value\" : 5  },  \"typeShare\" : \"ACUMULATION\",  \"lastDividendDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"domicilieCountryCode\" : \"domicilieCountryCode\",  \"fundHouseBenchmarkDescription\" : \"fundHouseBenchmarkDescription\",  \"marketRegistrationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"dealingAvailable\" : true,  \"marketId\" : 1,  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"comparasionBenchmarkId\" : \"comparasionBenchmarkId\",  \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"parentClass\" : true,  \"id\" : 6,  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"classificationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"investmentObjective\" : \"investmentObjective\",  \"collectiveInvestmentTransferableSecurities\" : \"collectiveInvestmentTransferableSecurities\",  \"structure\" : {    \"legalStructureCode\" : \"legalStructureCode\",    \"fundHouseGroupId\" : 2,    \"collectiveInvestmentSchemeId\" : 5,    \"fundHouseId\" : 7,    \"dealingFundHouseId\" : 5  },  \"informationProvider\" : \"ALLFUNDS\",  \"retentionType\" : \"GROSS\",  \"valuationFrequency\" : \"DAILY\",  \"fundGroupId\" : 0,  \"fundTypeCode\" : \"fundTypeCode\",  \"externalCodeKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"firstPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"europeanFundClassificationCode\" : \"europeanFundClassificationCode\",  \"name\" : \"name\",  \"shariaCompliant\" : true,  \"currencyCode\" : \"currencyCode\",  \"classType\" : \"classType\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getBlueRating", nickname = "getBlueRatingUsingGET", notes = "Get a Bluerating", response = Rating.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Rating.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/ratings/blueRating",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Rating> getBlueRatingUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"imageUrl\" : \"imageUrl\",  \"value\" : \"value\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getConsobDisclaimer", nickname = "getConsobDisclaimerUsingGET", notes = "", response = ConsobDisclaimer.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ConsobDisclaimer.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/consob/disclaimers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ConsobDisclaimer> getConsobDisclaimerUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"message\" : \"message\",  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getDocumentById", nickname = "getDocumentByIdUsingGET1", notes = "This method returns the {Document} whose Id is specified as parameter.", response = Document.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Document.class),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/documents/{documentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Document> getDocumentByIdUsingGET1(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "The Id of the {Document}",required=true) @PathVariable("documentId") String documentId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  },  \"metadata\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"file\" : {    \"filename\" : \"filename\",    \"size\" : 0,    \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"title\" : \"title\",    \"url\" : \"url\"  },  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getDocumentKIID", nickname = "getDocumentKIIDUsingGET", notes = "This method returns the {Document} KIID.", response = Document.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Document.class),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/any/funds/{fundId}/documents/KIID",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Document> getDocumentKIIDUsingGET(@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  },  \"metadata\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"file\" : {    \"filename\" : \"filename\",    \"size\" : 0,    \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"title\" : \"title\",    \"url\" : \"url\"  },  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfAnnualPerformance", nickname = "getEtfAnnualPerformanceUsingPOST", notes = "", response = AnnualBenchmarkAndInstrumentPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = AnnualBenchmarkAndInstrumentPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/performances/annual",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AnnualBenchmarkAndInstrumentPerformance> getEtfAnnualPerformanceUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentPerformance\" : {    \"history1\" : 0.80082819046101150206595775671303272247314453125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"history2\" : 6.02745618307040320615897144307382404804229736328125,    \"history3\" : 1.46581298050294517310021547018550336360931396484375,    \"ytd\" : 2.3021358869347654518833223846741020679473876953125,    \"history4\" : 5.962133916683182377482808078639209270477294921875,    \"history5\" : 5.63737665663332876420099637471139430999755859375  },  \"benchmarkPerformance\" : {    \"history1\" : 0.80082819046101150206595775671303272247314453125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"history2\" : 6.02745618307040320615897144307382404804229736328125,    \"history3\" : 1.46581298050294517310021547018550336360931396484375,    \"ytd\" : 2.3021358869347654518833223846741020679473876953125,    \"history4\" : 5.962133916683182377482808078639209270477294921875,    \"history5\" : 5.63737665663332876420099637471139430999755859375  },  \"benchmarkId\" : \"benchmarkId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfAssetUnderManagment", nickname = "getEtfAssetUnderManagmentUsingPOST", notes = "Get asset under Managment.", response = AssetUnderManagment.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AssetUnderManagment.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/assetUnderManagment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AssetUnderManagment> getEtfAssetUnderManagmentUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "filter" ,required=true )  @Valid @RequestBody AssetUnderManagmentFilter assetUnderManagmentFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\",  \"fundValuation\" : 0.80082819046101150206595775671303272247314453125,  \"groupCurrencyCode\" : \"groupCurrencyCode\",  \"fundCurrencyCode\" : \"fundCurrencyCode\",  \"groupValuation\" : 6.02745618307040320615897144307382404804229736328125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfByIdPrivate", nickname = "getEtfByIdPrivateUsingGET", notes = "", response = Etf.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Etf.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/private",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Etf> getEtfByIdPrivateUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"riskLevel\" : {    \"imageUrl\" : \"imageUrl\",    \"value\" : 5  },  \"typeShare\" : \"ACUMULATION\",  \"domicilieCountryCode\" : \"domicilieCountryCode\",  \"fundHouseBenchmarkDescription\" : \"fundHouseBenchmarkDescription\",  \"marketRegistrationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"dealingAvailable\" : true,  \"marketId\" : 1,  \"otherEtfs\" : [ {    \"ticker\" : \"ticker\",    \"name\" : \"name\",    \"currencyCode\" : \"currencyCode\"  }, {    \"ticker\" : \"ticker\",    \"name\" : \"name\",    \"currencyCode\" : \"currencyCode\"  } ],  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"comparasionBenchmarkId\" : \"comparasionBenchmarkId\",  \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : 6,  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"classificationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"rebalanceFrequency\" : \"DAILY\",  \"investmentObjective\" : \"investmentObjective\",  \"collectiveInvestmentTransferableSecurities\" : \"collectiveInvestmentTransferableSecurities\",  \"distributionFrequency\" : \"DAILY\",  \"structure\" : {    \"legalStructureCode\" : \"legalStructureCode\",    \"replicationMethod\" : \"replicationMethod\",    \"product\" : \"product\",    \"etfAdministrator\" : \"etfAdministrator\",    \"fundHouseGroupId\" : 2,    \"custodian\" : \"custodian\",    \"collectiveInvestmentSchemeId\" : 5,    \"fundHouseId\" : 7  },  \"informationProvider\" : \"ALLFUNDS\",  \"fundGroupId\" : 0,  \"externalCodeKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"firstPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"name\" : \"name\",  \"shariaCompliant\" : true,  \"currencyCode\" : \"currencyCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfById", nickname = "getEtfByIdUsingGET", notes = "Get a etf.", response = Etf.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Etf.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Etf> getEtfByIdUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"riskLevel\" : {    \"imageUrl\" : \"imageUrl\",    \"value\" : 5  },  \"typeShare\" : \"ACUMULATION\",  \"domicilieCountryCode\" : \"domicilieCountryCode\",  \"fundHouseBenchmarkDescription\" : \"fundHouseBenchmarkDescription\",  \"marketRegistrationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"dealingAvailable\" : true,  \"marketId\" : 1,  \"otherEtfs\" : [ {    \"ticker\" : \"ticker\",    \"name\" : \"name\",    \"currencyCode\" : \"currencyCode\"  }, {    \"ticker\" : \"ticker\",    \"name\" : \"name\",    \"currencyCode\" : \"currencyCode\"  } ],  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"comparasionBenchmarkId\" : \"comparasionBenchmarkId\",  \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : 6,  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"classificationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"rebalanceFrequency\" : \"DAILY\",  \"investmentObjective\" : \"investmentObjective\",  \"collectiveInvestmentTransferableSecurities\" : \"collectiveInvestmentTransferableSecurities\",  \"distributionFrequency\" : \"DAILY\",  \"structure\" : {    \"legalStructureCode\" : \"legalStructureCode\",    \"replicationMethod\" : \"replicationMethod\",    \"product\" : \"product\",    \"etfAdministrator\" : \"etfAdministrator\",    \"fundHouseGroupId\" : 2,    \"custodian\" : \"custodian\",    \"collectiveInvestmentSchemeId\" : 5,    \"fundHouseId\" : 7  },  \"informationProvider\" : \"ALLFUNDS\",  \"fundGroupId\" : 0,  \"externalCodeKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"firstPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"name\" : \"name\",  \"shariaCompliant\" : true,  \"currencyCode\" : \"currencyCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfCalculatorPerformance", nickname = "getEtfCalculatorPerformanceUsingPOST", notes = "", response = CalculatorCummulativeAndAnnualizedPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CalculatorCummulativeAndAnnualizedPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/performances/calculator",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CalculatorCummulativeAndAnnualizedPerformance> getEtfCalculatorPerformanceUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"annualizedPerformance\" : {    \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,    \"oneYear\" : 1.46581298050294517310021547018550336360931396484375,    \"fromInception\" : 6.02745618307040320615897144307382404804229736328125,    \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,    \"ytd\" : 7.061401241503109105224211816675961017608642578125,    \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,    \"sixMonths\" : 5.962133916683182377482808078639209270477294921875  },  \"cummulativePerformance\" : {    \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,    \"oneYear\" : 1.46581298050294517310021547018550336360931396484375,    \"fromInception\" : 6.02745618307040320615897144307382404804229736328125,    \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,    \"ytd\" : 7.061401241503109105224211816675961017608642578125,    \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,    \"sixMonths\" : 5.962133916683182377482808078639209270477294921875  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfCumulativePerformance", nickname = "getEtfCumulativePerformanceUsingPOST", notes = "", response = CumulativeBenchmarkAndInstrumentPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CumulativeBenchmarkAndInstrumentPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/performances/cumulative",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CumulativeBenchmarkAndInstrumentPerformance> getEtfCumulativePerformanceUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentPerformance\" : {    \"oneMonth\" : 5.63737665663332876420099637471139430999755859375,    \"threeMonths\" : 9.301444243932575517419536481611430644989013671875,    \"oneYear\" : 2.3021358869347654518833223846741020679473876953125,    \"week\" : 7.3862819483858839220147274318151175975799560546875,    \"threeYears\" : 3.61607674925191080461672754609026014804840087890625,    \"fiveYears\" : 6.02745618307040320615897144307382404804229736328125,    \"twelveYears\" : 2.027123023002321833274663731572218239307403564453125,    \"sixMonths\" : 7.061401241503109105224211816675961017608642578125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"fromInception\" : 1.46581298050294517310021547018550336360931396484375,    \"mtd\" : 5.962133916683182377482808078639209270477294921875,    \"twoMonth\" : 4.1456080298839363962315474054776132106781005859375,    \"day\" : 0.80082819046101150206595775671303272247314453125  },  \"benchmarkPerformance\" : {    \"oneMonth\" : 5.63737665663332876420099637471139430999755859375,    \"threeMonths\" : 9.301444243932575517419536481611430644989013671875,    \"oneYear\" : 2.3021358869347654518833223846741020679473876953125,    \"week\" : 7.3862819483858839220147274318151175975799560546875,    \"threeYears\" : 3.61607674925191080461672754609026014804840087890625,    \"fiveYears\" : 6.02745618307040320615897144307382404804229736328125,    \"twelveYears\" : 2.027123023002321833274663731572218239307403564453125,    \"sixMonths\" : 7.061401241503109105224211816675961017608642578125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"fromInception\" : 1.46581298050294517310021547018550336360931396484375,    \"mtd\" : 5.962133916683182377482808078639209270477294921875,    \"twoMonth\" : 4.1456080298839363962315474054776132106781005859375,    \"day\" : 0.80082819046101150206595775671303272247314453125  },  \"benchmarkId\" : \"benchmarkId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfDocumentById", nickname = "getEtfDocumentByIdUsingGET", notes = "This method returns the {Document} whose Id is specified as parameter.", response = Document.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Document.class),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/documents/{documentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Document> getEtfDocumentByIdUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "The Id of the {Document}",required=true) @PathVariable("documentId") String documentId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  },  \"metadata\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"file\" : {    \"filename\" : \"filename\",    \"size\" : 0,    \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"title\" : \"title\",    \"url\" : \"url\"  },  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfDocumentKIID", nickname = "getEtfDocumentKIIDUsingGET", notes = "This method returns the {Document} KIID.", response = Document.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Document.class),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/any/etfs/{etfId}/documents/KIID",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Document> getEtfDocumentKIIDUsingGET(@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"owner\" : {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  },  \"metadata\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"file\" : {    \"filename\" : \"filename\",    \"size\" : 0,    \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"title\" : \"title\",    \"url\" : \"url\"  },  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfFactsheetAny", nickname = "getEtfFactsheetAnyUsingPOST", notes = "Get factsheet etf a PDF file private", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/any/etfs/{etfId}/factsheet/private/pdf",
        produces = { "application/pdf" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> getEtfFactsheetAnyUsingPOST(@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfFees", nickname = "getEtfFeesUsingPOST", notes = "", response = Fees.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Fees.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/fees",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Fees> getEtfFeesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "body"  )  @Valid @RequestBody FeesFilter feesFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,  \"total\" : 2.027123023002321833274663731572218239307403564453125,  \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"performance\" : 3.61607674925191080461672754609026014804840087890625,  \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,  \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,  \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,  \"distribution\" : 5.962133916683182377482808078639209270477294921875,  \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,  \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,  \"others\" : 9.301444243932575517419536481611430644989013671875}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfRiskClassification", nickname = "getEtfRiskClassificationUsingPOST", notes = "Get risk classification information of a etf", response = RiskClassification.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = RiskClassification.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/statistic/riskClassification",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RiskClassification> getEtfRiskClassificationUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"benchmarkVolatility\" : 6.02745618307040320615897144307382404804229736328125,  \"instrumentPerformance\" : 1.46581298050294517310021547018550336360931396484375,  \"instrumentVolatility\" : 5.962133916683182377482808078639209270477294921875,  \"benchmarkPerformance\" : 0.80082819046101150206595775671303272247314453125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfStatisticPrivate", nickname = "getEtfStatisticPrivateUsingPOST", notes = "Get etf statistic.", response = Statistic.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = Statistic.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/statistic/private",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Statistic> getEtfStatisticPrivateUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkId\" : \"benchmarkId\",  \"relative\" : {    \"r2\" : 1.489415909854170383397331534069962799549102783203125,    \"trackingError\" : 6.8468526983526398765889098285697400569915771484375,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"correlation\" : 7.3862819483858839220147274318151175975799560546875,    \"infoRatio\" : 1.231513536777255612975068288506008684635162353515625,    \"actPremium\" : 3.61607674925191080461672754609026014804840087890625,    \"alpha\" : 2.027123023002321833274663731572218239307403564453125,    \"treynorRatio\" : 7.4577447736837658709418974467553198337554931640625,    \"jesenAlpha\" : 1.024645700144157789424070870154537260532379150390625,    \"beta\" : 4.1456080298839363962315474054776132106781005859375  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfStatisticRaw", nickname = "getEtfStatisticRawUsingPOST", notes = "Get etf statistic.", response = Statistic.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = Statistic.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/statistic/raw",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Statistic> getEtfStatisticRawUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "filter" ,required=true )  @Valid @RequestBody StatisticRawFilter statisticRawFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkId\" : \"benchmarkId\",  \"relative\" : {    \"r2\" : 1.489415909854170383397331534069962799549102783203125,    \"trackingError\" : 6.8468526983526398765889098285697400569915771484375,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"correlation\" : 7.3862819483858839220147274318151175975799560546875,    \"infoRatio\" : 1.231513536777255612975068288506008684635162353515625,    \"actPremium\" : 3.61607674925191080461672754609026014804840087890625,    \"alpha\" : 2.027123023002321833274663731572218239307403564453125,    \"treynorRatio\" : 7.4577447736837658709418974467553198337554931640625,    \"jesenAlpha\" : 1.024645700144157789424070870154537260532379150390625,    \"beta\" : 4.1456080298839363962315474054776132106781005859375  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getEtfStatistic", nickname = "getEtfStatisticUsingPOST", notes = "Get etf statistic.", response = Statistic.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = Statistic.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/statistic",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Statistic> getEtfStatisticUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkId\" : \"benchmarkId\",  \"relative\" : {    \"r2\" : 1.489415909854170383397331534069962799549102783203125,    \"trackingError\" : 6.8468526983526398765889098285697400569915771484375,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"correlation\" : 7.3862819483858839220147274318151175975799560546875,    \"infoRatio\" : 1.231513536777255612975068288506008684635162353515625,    \"actPremium\" : 3.61607674925191080461672754609026014804840087890625,    \"alpha\" : 2.027123023002321833274663731572218239307403564453125,    \"treynorRatio\" : 7.4577447736837658709418974467553198337554931640625,    \"jesenAlpha\" : 1.024645700144157789424070870154537260532379150390625,    \"beta\" : 4.1456080298839363962315474054776132106781005859375  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundAnnualPerformance", nickname = "getFundAnnualPerformanceUsingPOST", notes = "", response = AnnualBenchmarkAndInstrumentPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = AnnualBenchmarkAndInstrumentPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/performances/annual",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AnnualBenchmarkAndInstrumentPerformance> getFundAnnualPerformanceUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentPerformance\" : {    \"history1\" : 0.80082819046101150206595775671303272247314453125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"history2\" : 6.02745618307040320615897144307382404804229736328125,    \"history3\" : 1.46581298050294517310021547018550336360931396484375,    \"ytd\" : 2.3021358869347654518833223846741020679473876953125,    \"history4\" : 5.962133916683182377482808078639209270477294921875,    \"history5\" : 5.63737665663332876420099637471139430999755859375  },  \"benchmarkPerformance\" : {    \"history1\" : 0.80082819046101150206595775671303272247314453125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"history2\" : 6.02745618307040320615897144307382404804229736328125,    \"history3\" : 1.46581298050294517310021547018550336360931396484375,    \"ytd\" : 2.3021358869347654518833223846741020679473876953125,    \"history4\" : 5.962133916683182377482808078639209270477294921875,    \"history5\" : 5.63737665663332876420099637471139430999755859375  },  \"benchmarkId\" : \"benchmarkId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundAssetUnderManagment", nickname = "getFundAssetUnderManagmentUsingPOST", notes = "Get asset under Managment.", response = AssetUnderManagment.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = AssetUnderManagment.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/assetUnderManagment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AssetUnderManagment> getFundAssetUnderManagmentUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "filter" ,required=true )  @Valid @RequestBody AssetUnderManagmentFilter assetUnderManagmentFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\",  \"fundValuation\" : 0.80082819046101150206595775671303272247314453125,  \"groupCurrencyCode\" : \"groupCurrencyCode\",  \"fundCurrencyCode\" : \"fundCurrencyCode\",  \"groupValuation\" : 6.02745618307040320615897144307382404804229736328125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundByIdPrivate", nickname = "getFundByIdPrivateUsingGET", notes = "", response = Fund.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Fund.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/private",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Fund> getFundByIdPrivateUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"riskLevel\" : {    \"imageUrl\" : \"imageUrl\",    \"value\" : 5  },  \"typeShare\" : \"ACUMULATION\",  \"lastDividendDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"domicilieCountryCode\" : \"domicilieCountryCode\",  \"fundHouseBenchmarkDescription\" : \"fundHouseBenchmarkDescription\",  \"marketRegistrationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"dealingAvailable\" : true,  \"marketId\" : 1,  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"comparasionBenchmarkId\" : \"comparasionBenchmarkId\",  \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"parentClass\" : true,  \"id\" : 6,  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"classificationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"investmentObjective\" : \"investmentObjective\",  \"collectiveInvestmentTransferableSecurities\" : \"collectiveInvestmentTransferableSecurities\",  \"structure\" : {    \"legalStructureCode\" : \"legalStructureCode\",    \"fundHouseGroupId\" : 2,    \"collectiveInvestmentSchemeId\" : 5,    \"fundHouseId\" : 7,    \"dealingFundHouseId\" : 5  },  \"informationProvider\" : \"ALLFUNDS\",  \"retentionType\" : \"GROSS\",  \"valuationFrequency\" : \"DAILY\",  \"fundGroupId\" : 0,  \"fundTypeCode\" : \"fundTypeCode\",  \"externalCodeKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"firstPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"europeanFundClassificationCode\" : \"europeanFundClassificationCode\",  \"name\" : \"name\",  \"shariaCompliant\" : true,  \"currencyCode\" : \"currencyCode\",  \"classType\" : \"classType\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundById", nickname = "getFundByIdUsingGET", notes = "", response = Fund.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Fund.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Fund> getFundByIdUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"riskLevel\" : {    \"imageUrl\" : \"imageUrl\",    \"value\" : 5  },  \"typeShare\" : \"ACUMULATION\",  \"lastDividendDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"domicilieCountryCode\" : \"domicilieCountryCode\",  \"fundHouseBenchmarkDescription\" : \"fundHouseBenchmarkDescription\",  \"marketRegistrationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"dealingAvailable\" : true,  \"marketId\" : 1,  \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"comparasionBenchmarkId\" : \"comparasionBenchmarkId\",  \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"parentClass\" : true,  \"id\" : 6,  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"classificationKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"investmentObjective\" : \"investmentObjective\",  \"collectiveInvestmentTransferableSecurities\" : \"collectiveInvestmentTransferableSecurities\",  \"structure\" : {    \"legalStructureCode\" : \"legalStructureCode\",    \"fundHouseGroupId\" : 2,    \"collectiveInvestmentSchemeId\" : 5,    \"fundHouseId\" : 7,    \"dealingFundHouseId\" : 5  },  \"informationProvider\" : \"ALLFUNDS\",  \"retentionType\" : \"GROSS\",  \"valuationFrequency\" : \"DAILY\",  \"fundGroupId\" : 0,  \"fundTypeCode\" : \"fundTypeCode\",  \"externalCodeKeyValues\" : [ {    \"value\" : \"value\",    \"key\" : \"key\"  }, {    \"value\" : \"value\",    \"key\" : \"key\"  } ],  \"firstPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"europeanFundClassificationCode\" : \"europeanFundClassificationCode\",  \"name\" : \"name\",  \"shariaCompliant\" : true,  \"currencyCode\" : \"currencyCode\",  \"classType\" : \"classType\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundCalculatorPerformance", nickname = "getFundCalculatorPerformanceUsingPOST", notes = "", response = CalculatorCummulativeAndAnnualizedPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CalculatorCummulativeAndAnnualizedPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/performances/calculator",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CalculatorCummulativeAndAnnualizedPerformance> getFundCalculatorPerformanceUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"annualizedPerformance\" : {    \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,    \"oneYear\" : 1.46581298050294517310021547018550336360931396484375,    \"fromInception\" : 6.02745618307040320615897144307382404804229736328125,    \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,    \"ytd\" : 7.061401241503109105224211816675961017608642578125,    \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,    \"sixMonths\" : 5.962133916683182377482808078639209270477294921875  },  \"cummulativePerformance\" : {    \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,    \"oneYear\" : 1.46581298050294517310021547018550336360931396484375,    \"fromInception\" : 6.02745618307040320615897144307382404804229736328125,    \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,    \"ytd\" : 7.061401241503109105224211816675961017608642578125,    \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,    \"sixMonths\" : 5.962133916683182377482808078639209270477294921875  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundCumulativePerformance", nickname = "getFundCumulativePerformanceUsingPOST", notes = "", response = CumulativeBenchmarkAndInstrumentPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CumulativeBenchmarkAndInstrumentPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/performances/cumulative",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CumulativeBenchmarkAndInstrumentPerformance> getFundCumulativePerformanceUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentPerformance\" : {    \"oneMonth\" : 5.63737665663332876420099637471139430999755859375,    \"threeMonths\" : 9.301444243932575517419536481611430644989013671875,    \"oneYear\" : 2.3021358869347654518833223846741020679473876953125,    \"week\" : 7.3862819483858839220147274318151175975799560546875,    \"threeYears\" : 3.61607674925191080461672754609026014804840087890625,    \"fiveYears\" : 6.02745618307040320615897144307382404804229736328125,    \"twelveYears\" : 2.027123023002321833274663731572218239307403564453125,    \"sixMonths\" : 7.061401241503109105224211816675961017608642578125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"fromInception\" : 1.46581298050294517310021547018550336360931396484375,    \"mtd\" : 5.962133916683182377482808078639209270477294921875,    \"twoMonth\" : 4.1456080298839363962315474054776132106781005859375,    \"day\" : 0.80082819046101150206595775671303272247314453125  },  \"benchmarkPerformance\" : {    \"oneMonth\" : 5.63737665663332876420099637471139430999755859375,    \"threeMonths\" : 9.301444243932575517419536481611430644989013671875,    \"oneYear\" : 2.3021358869347654518833223846741020679473876953125,    \"week\" : 7.3862819483858839220147274318151175975799560546875,    \"threeYears\" : 3.61607674925191080461672754609026014804840087890625,    \"fiveYears\" : 6.02745618307040320615897144307382404804229736328125,    \"twelveYears\" : 2.027123023002321833274663731572218239307403564453125,    \"sixMonths\" : 7.061401241503109105224211816675961017608642578125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"fromInception\" : 1.46581298050294517310021547018550336360931396484375,    \"mtd\" : 5.962133916683182377482808078639209270477294921875,    \"twoMonth\" : 4.1456080298839363962315474054776132106781005859375,    \"day\" : 0.80082819046101150206595775671303272247314453125  },  \"benchmarkId\" : \"benchmarkId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundFactsheetAny", nickname = "getFundFactsheetAnyUsingPOST", notes = "Get factsheet fund a PDF file private", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/any/funds/{fundId}/factsheet/private/pdf",
        produces = { "application/pdf" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> getFundFactsheetAnyUsingPOST(@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundFactsheet", nickname = "getFundFactsheetUsingPOST", notes = "Get factsheet fund a PDF file", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/factsheet/pdf",
        produces = { "application/pdf" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> getFundFactsheetUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundFees", nickname = "getFundFeesUsingPOST", notes = "", response = Fees.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Fees.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/fees",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Fees> getFundFeesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "body"  )  @Valid @RequestBody FeesFilter feesFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"afbAppliedRedemption\" : 0.80082819046101150206595775671303272247314453125,  \"total\" : 2.027123023002321833274663731572218239307403564453125,  \"ongoingChargeDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"performance\" : 3.61607674925191080461672754609026014804840087890625,  \"maximumSubcription\" : 2.3021358869347654518833223846741020679473876953125,  \"afbAppliedSubscription\" : 6.02745618307040320615897144307382404804229736328125,  \"annualManagement\" : 1.46581298050294517310021547018550336360931396484375,  \"distribution\" : 5.962133916683182377482808078639209270477294921875,  \"maximumRedemption\" : 5.63737665663332876420099637471139430999755859375,  \"ongoingCharge\" : 7.061401241503109105224211816675961017608642578125,  \"others\" : 9.301444243932575517419536481611430644989013671875}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundOperationalDetails", nickname = "getFundOperationalDetailsUsingGET", notes = "", response = OperationalDetails.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = OperationalDetails.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/operationalDetails",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OperationalDetails> getFundOperationalDetailsUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"dealingCurrencyCode\" : \"dealingCurrencyCode\",  \"unitSharesDecimalPlaces\" : 2,  \"cashAmountDecimalPlaces\" : 0,  \"pricesDecimalPlaces\" : 6,  \"subscriptionType\" : \"NA\",  \"historicOrForwardPricing\" : \"HISTORIC\",  \"whiteList\" : [ {    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"percentage\" : 7.061401241503109105224211816675961017608642578125,    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  }, {    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"percentage\" : 7.061401241503109105224211816675961017608642578125,    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  } ],  \"distribution\" : {    \"distributionCategory\" : \"INTEREST\",    \"equalisation\" : true,    \"cashDistribution\" : true,    \"distributionFrequencyCode\" : \"distributionFrequencyCode\"  },  \"subscriptionDetail\" : {    \"initial\" : {      \"amount\" : 5.962133916683182377482808078639209270477294921875,      \"unitShares\" : 5.63737665663332876420099637471139430999755859375    },    \"subsequent\" : {      \"amount\" : 5.962133916683182377482808078639209270477294921875,      \"unitShares\" : 5.63737665663332876420099637471139430999755859375    },    \"dealingDetail\" : {      \"dealingCutoffTime\" : \"dealingCutoffTime\",      \"dealingFrequencyCode\" : \"dealingFrequencyCode\",      \"orderPrenotification\" : \"orderPrenotification\",      \"roundingUnitSharesCode\" : \"roundingUnitSharesCode\",      \"byShares\" : true,      \"settlementPeriod\" : \"settlementPeriod\",      \"byAmount\" : true,      \"roundingAmountCode\" : \"roundingAmountCode\",      \"recalculation\" : true    }  },  \"pricingType\" : \"SINGLE\",  \"redemptionDetail\" : {    \"bufferPercentage\" : 1,    \"dealingDetail\" : {      \"dealingCutoffTime\" : \"dealingCutoffTime\",      \"dealingFrequencyCode\" : \"dealingFrequencyCode\",      \"orderPrenotification\" : \"orderPrenotification\",      \"roundingUnitSharesCode\" : \"roundingUnitSharesCode\",      \"byShares\" : true,      \"settlementPeriod\" : \"settlementPeriod\",      \"byAmount\" : true,      \"roundingAmountCode\" : \"roundingAmountCode\",      \"recalculation\" : true    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundRiskClassification", nickname = "getFundRiskClassificationUsingPOST", notes = "Get risk classification information of a fund", response = RiskClassification.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = RiskClassification.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/statistic/riskClassification",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RiskClassification> getFundRiskClassificationUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"benchmarkVolatility\" : 6.02745618307040320615897144307382404804229736328125,  \"instrumentPerformance\" : 1.46581298050294517310021547018550336360931396484375,  \"instrumentVolatility\" : 5.962133916683182377482808078639209270477294921875,  \"benchmarkPerformance\" : 0.80082819046101150206595775671303272247314453125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundStatisticPrivate", nickname = "getFundStatisticPrivateUsingPOST", notes = "Get fund statistic.", response = Statistic.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = Statistic.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/statistic/private",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Statistic> getFundStatisticPrivateUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkId\" : \"benchmarkId\",  \"relative\" : {    \"r2\" : 1.489415909854170383397331534069962799549102783203125,    \"trackingError\" : 6.8468526983526398765889098285697400569915771484375,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"correlation\" : 7.3862819483858839220147274318151175975799560546875,    \"infoRatio\" : 1.231513536777255612975068288506008684635162353515625,    \"actPremium\" : 3.61607674925191080461672754609026014804840087890625,    \"alpha\" : 2.027123023002321833274663731572218239307403564453125,    \"treynorRatio\" : 7.4577447736837658709418974467553198337554931640625,    \"jesenAlpha\" : 1.024645700144157789424070870154537260532379150390625,    \"beta\" : 4.1456080298839363962315474054776132106781005859375  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundStatisticRaw", nickname = "getFundStatisticRawUsingPOST", notes = "Get fund statistic.", response = Statistic.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = Statistic.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/statistic/raw",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Statistic> getFundStatisticRawUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "filter" ,required=true )  @Valid @RequestBody StatisticRawFilter statisticRawFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkId\" : \"benchmarkId\",  \"relative\" : {    \"r2\" : 1.489415909854170383397331534069962799549102783203125,    \"trackingError\" : 6.8468526983526398765889098285697400569915771484375,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"correlation\" : 7.3862819483858839220147274318151175975799560546875,    \"infoRatio\" : 1.231513536777255612975068288506008684635162353515625,    \"actPremium\" : 3.61607674925191080461672754609026014804840087890625,    \"alpha\" : 2.027123023002321833274663731572218239307403564453125,    \"treynorRatio\" : 7.4577447736837658709418974467553198337554931640625,    \"jesenAlpha\" : 1.024645700144157789424070870154537260532379150390625,    \"beta\" : 4.1456080298839363962315474054776132106781005859375  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundStatistic", nickname = "getFundStatisticUsingPOST", notes = "Get fund statistic.", response = Statistic.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = Statistic.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/statistic",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Statistic> getFundStatisticUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkId\" : \"benchmarkId\",  \"relative\" : {    \"r2\" : 1.489415909854170383397331534069962799549102783203125,    \"trackingError\" : 6.8468526983526398765889098285697400569915771484375,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"correlation\" : 7.3862819483858839220147274318151175975799560546875,    \"infoRatio\" : 1.231513536777255612975068288506008684635162353515625,    \"actPremium\" : 3.61607674925191080461672754609026014804840087890625,    \"alpha\" : 2.027123023002321833274663731572218239307403564453125,    \"treynorRatio\" : 7.4577447736837658709418974467553198337554931640625,    \"jesenAlpha\" : 1.024645700144157789424070870154537260532379150390625,    \"beta\" : 4.1456080298839363962315474054776132106781005859375  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundTypesByMarketId", nickname = "getFundTypesByMarketIdUsingGET", notes = "Get fund types by market id.", response = FundTypeCodes.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = FundTypeCodes.class),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/types/fund",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<FundTypeCodes> getFundTypesByMarketIdUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"values\" : [ \"values\", \"values\" ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getMarketById", nickname = "getMarketByIdUsingGET", notes = "Get market by id.", response = Market.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Market.class),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Market> getMarketByIdUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"name\",  \"defaultCurrencyCode\" : \"defaultCurrencyCode\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getMorningStar", nickname = "getMorningStarUsingGET", notes = "Get a MorningStar rating", response = Rating.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Rating.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/ratings/morningStar",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Rating> getMorningStarUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"imageUrl\" : \"imageUrl\",  \"value\" : \"value\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listArticles", nickname = "listArticlesUsingPOST", notes = "Get a list of {Document}s associated with the {Fund}", response = DocumentAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DocumentAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/documents/article/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DocumentAndPage> listArticlesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"documents\" : [ {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  }, {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listAvailableBreakdownsDates", nickname = "listAvailableBreakdownsDatesUsingPOST1", notes = "", response = BreakDownDatesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BreakDownDatesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/availableBreakdownsDates/list",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<BreakDownDatesAndPage> listAvailableBreakdownsDatesUsingPOST1(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"breakdownDates\" : [ \"2000-01-23T04:56:07.000+00:00\", \"2000-01-23T04:56:07.000+00:00\" ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listBasicFundFamily", nickname = "listBasicFundFamilyUsingPOST", notes = "Get a list of fund the same group.", response = FundAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = FundAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/fundFamily/basic/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<FundAndPage> listBasicFundFamilyUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"fund\" : [ {    \"riskLevel\" : {      \"imageUrl\" : \"imageUrl\",      \"value\" : 5    },    \"typeShare\" : \"ACUMULATION\",    \"lastDividendDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"domicilieCountryCode\" : \"domicilieCountryCode\",    \"fundHouseBenchmarkDescription\" : \"fundHouseBenchmarkDescription\",    \"marketRegistrationKeyValues\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"dealingAvailable\" : true,    \"marketId\" : 1,    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"comparasionBenchmarkId\" : \"comparasionBenchmarkId\",    \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"parentClass\" : true,    \"id\" : 6,    \"lastPrices\" : [ {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    }, {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    } ],    \"classificationKeyValues\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"investmentObjective\" : \"investmentObjective\",    \"collectiveInvestmentTransferableSecurities\" : \"collectiveInvestmentTransferableSecurities\",    \"structure\" : {      \"legalStructureCode\" : \"legalStructureCode\",      \"fundHouseGroupId\" : 2,      \"collectiveInvestmentSchemeId\" : 5,      \"fundHouseId\" : 7,      \"dealingFundHouseId\" : 5    },    \"informationProvider\" : \"ALLFUNDS\",    \"retentionType\" : \"GROSS\",    \"valuationFrequency\" : \"DAILY\",    \"fundGroupId\" : 0,    \"fundTypeCode\" : \"fundTypeCode\",    \"externalCodeKeyValues\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"firstPrices\" : [ {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    }, {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    } ],    \"europeanFundClassificationCode\" : \"europeanFundClassificationCode\",    \"name\" : \"name\",    \"shariaCompliant\" : true,    \"currencyCode\" : \"currencyCode\",    \"classType\" : \"classType\"  }, {    \"riskLevel\" : {      \"imageUrl\" : \"imageUrl\",      \"value\" : 5    },    \"typeShare\" : \"ACUMULATION\",    \"lastDividendDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"domicilieCountryCode\" : \"domicilieCountryCode\",    \"fundHouseBenchmarkDescription\" : \"fundHouseBenchmarkDescription\",    \"marketRegistrationKeyValues\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"dealingAvailable\" : true,    \"marketId\" : 1,    \"inceptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"comparasionBenchmarkId\" : \"comparasionBenchmarkId\",    \"breakdownDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"parentClass\" : true,    \"id\" : 6,    \"lastPrices\" : [ {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    }, {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    } ],    \"classificationKeyValues\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"investmentObjective\" : \"investmentObjective\",    \"collectiveInvestmentTransferableSecurities\" : \"collectiveInvestmentTransferableSecurities\",    \"structure\" : {      \"legalStructureCode\" : \"legalStructureCode\",      \"fundHouseGroupId\" : 2,      \"collectiveInvestmentSchemeId\" : 5,      \"fundHouseId\" : 7,      \"dealingFundHouseId\" : 5    },    \"informationProvider\" : \"ALLFUNDS\",    \"retentionType\" : \"GROSS\",    \"valuationFrequency\" : \"DAILY\",    \"fundGroupId\" : 0,    \"fundTypeCode\" : \"fundTypeCode\",    \"externalCodeKeyValues\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"firstPrices\" : [ {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    }, {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    } ],    \"europeanFundClassificationCode\" : \"europeanFundClassificationCode\",    \"name\" : \"name\",    \"shariaCompliant\" : true,    \"currencyCode\" : \"currencyCode\",    \"classType\" : \"classType\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCitywire", nickname = "listCitywireUsingPOST", notes = "Get a list of Citywire ratings", response = CitywireAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CitywireAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/ratings/citywire/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CitywireAndPage> listCitywireUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"citywires\" : [ {    \"manager\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"origin\" : \"origin\",      \"pictureUrl\" : \"pictureUrl\",      \"name\" : \"name\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"rating\" : {      \"imageUrl\" : \"imageUrl\",      \"value\" : \"value\"    }  }, {    \"manager\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"origin\" : \"origin\",      \"pictureUrl\" : \"pictureUrl\",      \"name\" : \"name\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"rating\" : {      \"imageUrl\" : \"imageUrl\",      \"value\" : \"value\"    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listDocuments", nickname = "listDocumentsUsingPOST1", notes = "Get a list of {Document}s associated with the {Fund}", response = DocumentAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DocumentAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/documents/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DocumentAndPage> listDocumentsUsingPOST1(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "page"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"documents\" : [ {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  }, {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfArticles", nickname = "listEtfArticlesUsingPOST", notes = "Get a list of {Document}s associated with the {Etf}", response = DocumentAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DocumentAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/documents/article/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DocumentAndPage> listEtfArticlesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"documents\" : [ {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  }, {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfAssets", nickname = "listEtfAssetsUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/breakdowns/assets/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listEtfAssetsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfAvailableBreakdownsDates", nickname = "listEtfAvailableBreakdownsDatesUsingPOST", notes = "", response = BreakDownDatesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BreakDownDatesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/availableBreakdownsDates/list",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<BreakDownDatesAndPage> listEtfAvailableBreakdownsDatesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"breakdownDates\" : [ \"2000-01-23T04:56:07.000+00:00\", \"2000-01-23T04:56:07.000+00:00\" ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfCountriesAuthorizedForSale", nickname = "listEtfCountriesAuthorizedForSaleUsingPOST", notes = "", response = CountryAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CountryAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/countriesAuthorizedForSale/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CountryAndPage> listEtfCountriesAuthorizedForSaleUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"countryCodes\" : [ \"countryCodes\", \"countryCodes\" ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfCreditQualities", nickname = "listEtfCreditQualitiesUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/breakdowns/creditQualities/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listEtfCreditQualitiesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfCurrencies", nickname = "listEtfCurrenciesUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/breakdowns/currencies/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listEtfCurrenciesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfFactsheets", nickname = "listEtfFactsheetsUsingPOST", notes = "Get a list of {Document}s associated with the {Etf}", response = DocumentAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DocumentAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/documents/factsheet/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DocumentAndPage> listEtfFactsheetsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"documents\" : [ {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  }, {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfGeographicAreas", nickname = "listEtfGeographicAreasUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/breakdowns/geographicAreas/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listEtfGeographicAreasUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfHistoricalPerformances", nickname = "listEtfHistoricalPerformancesUsingPOST", notes = "", response = HistoricalPerformancesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = HistoricalPerformancesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/performances/historical/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HistoricalPerformancesAndPage> listEtfHistoricalPerformancesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody HistoricalPerformanceFilterAndPageFilter historicalPerformanceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"benchmarkPerformances\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"instrumentPerformances\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfHoldings", nickname = "listEtfHoldingsUsingPOST", notes = "", response = HoldingBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = HoldingBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/breakdowns/holdings/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HoldingBreakdownAndPage> listEtfHoldingsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"holdingBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfLegal", nickname = "listEtfLegalUsingPOST", notes = "Get a list of {Document}s associated with the {Etf}", response = DocumentAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DocumentAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/documents/legal/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DocumentAndPage> listEtfLegalUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"documents\" : [ {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  }, {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfManagers", nickname = "listEtfManagersUsingPOST", notes = "Get a list of managers of etf.", response = ManagersAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ManagersAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/managers/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ManagersAndPage> listEtfManagersUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"managers\" : [ {    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"origin\" : \"origin\",    \"pictureUrl\" : \"pictureUrl\",    \"name\" : \"name\",    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  }, {    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"origin\" : \"origin\",    \"pictureUrl\" : \"pictureUrl\",    \"name\" : \"name\",    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfPricesAny", nickname = "listEtfPricesAnyUsingPOST", notes = "Get a list of prices private, this list contain the 30 last prices a etf.", response = PriceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PriceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/any/etfs/{etfId}/prices/private/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<PriceAndPage> listEtfPricesAnyUsingPOST(@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "filter"  )  @Valid @RequestBody PriceFilterAndPageFilter priceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"prices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfPrices", nickname = "listEtfPricesUsingPOST", notes = "Get a list of prices, this list contain the 30 last prices a etf.", response = PriceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PriceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/prices/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<PriceAndPage> listEtfPricesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "filter"  )  @Valid @RequestBody PriceFilterAndPageFilter priceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"prices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfQuarterlyPerformances", nickname = "listEtfQuarterlyPerformancesUsingPOST", notes = "", response = QuarterlyPerformancesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = QuarterlyPerformancesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/performances/quarterly/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<QuarterlyPerformancesAndPage> listEtfQuarterlyPerformancesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody PerformanceFilterAndPageFilter performanceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"quarterlyPerformances\" : [ {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"quarter1\" : 0.80082819046101150206595775671303272247314453125,    \"year\" : 5.63737665663332876420099637471139430999755859375,    \"quarter2\" : 6.02745618307040320615897144307382404804229736328125,    \"quarter3\" : 1.46581298050294517310021547018550336360931396484375,    \"quarter4\" : 5.962133916683182377482808078639209270477294921875  }, {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"quarter1\" : 0.80082819046101150206595775671303272247314453125,    \"year\" : 5.63737665663332876420099637471139430999755859375,    \"quarter2\" : 6.02745618307040320615897144307382404804229736328125,    \"quarter3\" : 1.46581298050294517310021547018550336360931396484375,    \"quarter4\" : 5.962133916683182377482808078639209270477294921875  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfSectors", nickname = "listEtfSectorsUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/breakdowns/sectors/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listEtfSectorsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfTopAssets", nickname = "listEtfTopAssetsUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/breakdowns/top/assets/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listEtfTopAssetsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfTopCreditQualities", nickname = "listEtfTopCreditQualitiesUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/breakdowns/top/creditQualities/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listEtfTopCreditQualitiesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfTopCurrencies", nickname = "listEtfTopCurrenciesUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/breakdowns/top/currencies/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listEtfTopCurrenciesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfTopGeographicAreas", nickname = "listEtfTopGeographicAreasUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/breakdowns/top/geographicAreas/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listEtfTopGeographicAreasUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfTopHoldings", nickname = "listEtfTopHoldingsUsingPOST", notes = "", response = HoldingBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = HoldingBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/breakdowns/top/holdings/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HoldingBreakdownAndPage> listEtfTopHoldingsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"holdingBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfTopSectors", nickname = "listEtfTopSectorsUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/breakdowns/top/sectors/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listEtfTopSectorsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfsCorporateActions", nickname = "listEtfsCorporateActionsUsingGET", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/etfs/{etfId}/corporateActions/list",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResourceReferenceAndPage> listEtfsCorporateActionsUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Etf}",required=true) @PathVariable("etfId") Long etfId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFactsheets", nickname = "listFactsheetsUsingPOST", notes = "Get a list of {Document}s associated with the {Fund}", response = DocumentAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DocumentAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/documents/factsheet/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DocumentAndPage> listFactsheetsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"documents\" : [ {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  }, {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundAssets", nickname = "listFundAssetsUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/breakdowns/assets/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listFundAssetsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundCountriesAuthorizedForSale", nickname = "listFundCountriesAuthorizedForSaleUsingPOST", notes = "", response = CountryAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CountryAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/countriesAuthorizedForSale/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CountryAndPage> listFundCountriesAuthorizedForSaleUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"countryCodes\" : [ \"countryCodes\", \"countryCodes\" ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundCreditQualities", nickname = "listFundCreditQualitiesUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/breakdowns/creditQualities/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listFundCreditQualitiesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundCurrencies", nickname = "listFundCurrenciesUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/breakdowns/currencies/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listFundCurrenciesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundFamily", nickname = "listFundFamilyUsingPOST", notes = "Get a list of fund the same group.", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/fundFamily/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResourceReferenceAndPage> listFundFamilyUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundGeographicAreas", nickname = "listFundGeographicAreasUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/breakdowns/geographicAreas/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listFundGeographicAreasUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundHistoricalPerformances", nickname = "listFundHistoricalPerformancesUsingPOST", notes = "", response = HistoricalPerformancesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = HistoricalPerformancesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/performances/historical/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HistoricalPerformancesAndPage> listFundHistoricalPerformancesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody HistoricalPerformanceFilterAndPageFilter historicalPerformanceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"benchmarkPerformances\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"instrumentPerformances\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundHoldings", nickname = "listFundHoldingsUsingPOST", notes = "", response = HoldingBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = HoldingBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/breakdowns/holdings/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HoldingBreakdownAndPage> listFundHoldingsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"holdingBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundManagers", nickname = "listFundManagersUsingPOST", notes = "Get a list of managers of fund.", response = ManagersAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ManagersAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/managers/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ManagersAndPage> listFundManagersUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"managers\" : [ {    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"origin\" : \"origin\",    \"pictureUrl\" : \"pictureUrl\",    \"name\" : \"name\",    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  }, {    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"origin\" : \"origin\",    \"pictureUrl\" : \"pictureUrl\",    \"name\" : \"name\",    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundPricesAny", nickname = "listFundPricesAnyUsingPOST", notes = "Get a list of prices private, this list contain the 30 last prices a fund.", response = PriceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PriceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/any/funds/{fundId}/prices/private/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<PriceAndPage> listFundPricesAnyUsingPOST(@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "filter"  )  @Valid @RequestBody PriceFilterAndPageFilter priceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"prices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundPrices", nickname = "listFundPricesUsingPOST", notes = "Get a list of prices, this list contain the 30 last prices a fund.", response = PriceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PriceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/prices/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<PriceAndPage> listFundPricesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "filter"  )  @Valid @RequestBody PriceFilterAndPageFilter priceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"prices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundQuarterlyPerformances", nickname = "listFundQuarterlyPerformancesUsingPOST", notes = "", response = QuarterlyPerformancesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = QuarterlyPerformancesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/performances/quarterly/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<QuarterlyPerformancesAndPage> listFundQuarterlyPerformancesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody PerformanceFilterAndPageFilter performanceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"quarterlyPerformances\" : [ {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"quarter1\" : 0.80082819046101150206595775671303272247314453125,    \"year\" : 5.63737665663332876420099637471139430999755859375,    \"quarter2\" : 6.02745618307040320615897144307382404804229736328125,    \"quarter3\" : 1.46581298050294517310021547018550336360931396484375,    \"quarter4\" : 5.962133916683182377482808078639209270477294921875  }, {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"quarter1\" : 0.80082819046101150206595775671303272247314453125,    \"year\" : 5.63737665663332876420099637471139430999755859375,    \"quarter2\" : 6.02745618307040320615897144307382404804229736328125,    \"quarter3\" : 1.46581298050294517310021547018550336360931396484375,    \"quarter4\" : 5.962133916683182377482808078639209270477294921875  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundSectors", nickname = "listFundSectorsUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/breakdowns/sectors/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listFundSectorsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundTopAssets", nickname = "listFundTopAssetsUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/breakdowns/top/assets/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listFundTopAssetsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundTopCreditQualities", nickname = "listFundTopCreditQualitiesUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/breakdowns/top/creditQualities/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listFundTopCreditQualitiesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundTopCurrencies", nickname = "listFundTopCurrenciesUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/breakdowns/top/currencies/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listFundTopCurrenciesUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundTopGeographicAreas", nickname = "listFundTopGeographicAreasUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/breakdowns/top/geographicAreas/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listFundTopGeographicAreasUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundTopHoldings", nickname = "listFundTopHoldingsUsingPOST", notes = "", response = HoldingBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = HoldingBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/breakdowns/top/holdings/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HoldingBreakdownAndPage> listFundTopHoldingsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"holdingBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : 0,    \"description\" : \"description\",    \"weight\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundTopSectors", nickname = "listFundTopSectorsUsingPOST", notes = "", response = GenericBreakdownAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GenericBreakdownAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/breakdowns/top/sectors/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<GenericBreakdownAndPage> listFundTopSectorsUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching either {GenericBreakdown.date} or {HoldingBreakdown.date}" ,required=true )  @Valid @RequestBody BreakdownFilterAndPageFilter breakdownFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"genericBreakdowns\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"code\" : \"code\",    \"description\" : \"description\",    \"weight\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundsCorporateActions", nickname = "listFundsCorporateActionsUsingGET", notes = "", response = ResourceReferenceAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResourceReferenceAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/corporateActions/list",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResourceReferenceAndPage> listFundsCorporateActionsUsingGET(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"resources\" : [ {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  }, {    \"id\" : \"id\",    \"label\" : \"label\",    \"url\" : \"url\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listLegal", nickname = "listLegalUsingPOST", notes = "Get a list of {Document}s associated with the {Fund}", response = DocumentAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DocumentAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/{marketId}/funds/{fundId}/documents/legal/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<DocumentAndPage> listLegalUsingPOST(@ApiParam(value = "The Id of the {Market}",required=true) @PathVariable("marketId") Long marketId,@ApiParam(value = "The Id of the {Fund}",required=true) @PathVariable("fundId") Long fundId,@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"documents\" : [ {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  }, {    \"owner\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    },    \"metadata\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ],    \"file\" : {      \"filename\" : \"filename\",      \"size\" : 0,      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"title\" : \"title\",      \"url\" : \"url\"    },    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listMarkets", nickname = "listMarketsUsingPOST", notes = "get a list of markets.", response = MarketAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "markets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = MarketAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/markets/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<MarketAndPage> listMarketsUsingPOST(@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"markets\" : [ {    \"name\" : \"name\",    \"defaultCurrencyCode\" : \"defaultCurrencyCode\",    \"id\" : \"id\"  }, {    \"name\" : \"name\",    \"defaultCurrencyCode\" : \"defaultCurrencyCode\",    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
