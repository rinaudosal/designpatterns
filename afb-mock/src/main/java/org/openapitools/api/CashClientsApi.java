/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CashAccount;
import org.openapitools.model.CashAccountAlias;
import org.openapitools.model.CashAccountAliasFilterAndPageFilter;
import org.openapitools.model.CashAccountAliasSummaryAndPage;
import org.openapitools.model.CashAccountAndPage;
import org.openapitools.model.CashAccountBalance;
import org.openapitools.model.CashAccountBalanceFilter;
import org.openapitools.model.CashClient;
import org.openapitools.model.CashClientSummaryAndPage;
import org.openapitools.model.CashTransactionAndPage;
import org.openapitools.model.CashTransactionByTransfer;
import org.openapitools.model.CashTransactionFilterAndPageFilter;
import org.openapitools.model.CashTransactionInterestAndPage;
import org.openapitools.model.CashTransfer;
import org.openapitools.model.CashTransferAndMessages;
import org.openapitools.model.CashTransferAndPage;
import org.openapitools.model.CashTransferAndSignature;
import org.openapitools.model.CashTransferFilterAndPageFilter;
import org.openapitools.model.CursorFilter;
import org.openapitools.model.ExcelAndCursor;
import org.openapitools.model.ExcelAndPage;
import org.openapitools.model.PageFilter;
import org.openapitools.model.SettlementSummaryAndCursor;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "cashClients", description = "the cashClients API")
public interface CashClientsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "addCashTransfer", nickname = "addCashTransferUsingPOST", notes = "Add new {CashTransfer}", response = CashTransfer.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CashTransfer.class),
        @ApiResponse(code = 201, message = "successful operation", response = CashTransfer.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/transfers",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CashTransfer> addCashTransferUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody CashTransferAndSignature cashTransferAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cashAccountAliasName\" : \"cashAccountAliasName\",  \"cashTransferSource\" : \"cashTransferSource\",  \"externalReference\" : \"externalReference\",  \"amount\" : 0.80082819046101150206595775671303272247314453125,  \"chargeAccountIban\" : \"chargeAccountIban\",  \"failureCode\" : \"failureCode\",  \"orderedBy\" : \"orderedBy\",  \"cashDateData\" : {    \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"senderToReceiverInformation\" : {    \"information4\" : \"information4\",    \"information1\" : \"information1\",    \"information2\" : \"information2\",    \"information3\" : \"information3\"  },  \"currencyCode\" : \"currencyCode\",  \"beneficiaryInstitution\" : {    \"bicData\" : {      \"receiverBic\" : \"receiverBic\",      \"bankBic\" : \"bankBic\",      \"intermediaryBankBic\" : \"intermediaryBankBic\",      \"bic\" : \"bic\",      \"senderBic\" : \"senderBic\"    },    \"iban\" : \"iban\",    \"bankIban\" : \"bankIban\",    \"descriptionData\" : {      \"description4\" : \"description4\",      \"description2\" : \"description2\",      \"description3\" : \"description3\",      \"description1\" : \"description1\"    }  },  \"statusCode\" : \"statusCode\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "authorizeCashTransfer", nickname = "authorizeCashTransferUsingPUT", notes = "Authorize a Cash Transfer with form data", response = CashTransferAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashTransferAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/transfers/authorize",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<CashTransferAndMessages> authorizeCashTransferUsingPUT(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody CashTransferAndSignature cashTransferAndSignature) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cashTransfer\" : {    \"cashAccountAliasName\" : \"cashAccountAliasName\",    \"cashTransferSource\" : \"cashTransferSource\",    \"externalReference\" : \"externalReference\",    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"chargeAccountIban\" : \"chargeAccountIban\",    \"failureCode\" : \"failureCode\",    \"orderedBy\" : \"orderedBy\",    \"cashDateData\" : {      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"senderToReceiverInformation\" : {      \"information4\" : \"information4\",      \"information1\" : \"information1\",      \"information2\" : \"information2\",      \"information3\" : \"information3\"    },    \"currencyCode\" : \"currencyCode\",    \"beneficiaryInstitution\" : {      \"bicData\" : {        \"receiverBic\" : \"receiverBic\",        \"bankBic\" : \"bankBic\",        \"intermediaryBankBic\" : \"intermediaryBankBic\",        \"bic\" : \"bic\",        \"senderBic\" : \"senderBic\"      },      \"iban\" : \"iban\",      \"bankIban\" : \"bankIban\",      \"descriptionData\" : {        \"description4\" : \"description4\",        \"description2\" : \"description2\",        \"description3\" : \"description3\",        \"description1\" : \"description1\"      }    },    \"statusCode\" : \"statusCode\"  },  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "cancelCashTransfer", nickname = "cancelCashTransferUsingPUT", notes = "Cancel a {CashTransfer}", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/transfers/cancel",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> cancelCashTransferUsingPUT(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody CashTransferAndSignature cashTransferAndSignature) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getCashAccountAliasById", nickname = "getCashAccountAliasByIdUsingGET", notes = "Find a {CashAccountAlias} by ID", response = CashAccountAlias.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashAccountAlias.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accountAliases/{cashAccountAliasId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CashAccountAlias> getCashAccountAliasByIdUsingGET(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "The Id of the {CashAccountAlias}",required=true) @PathVariable("cashAccountAliasId") String cashAccountAliasId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"intermediaryInstitution\" : {    \"bicData\" : {      \"receiverBic\" : \"receiverBic\",      \"bankBic\" : \"bankBic\",      \"intermediaryBankBic\" : \"intermediaryBankBic\",      \"bic\" : \"bic\",      \"senderBic\" : \"senderBic\"    },    \"iban\" : \"iban\",    \"bankIban\" : \"bankIban\",    \"descriptionData\" : {      \"description4\" : \"description4\",      \"description2\" : \"description2\",      \"description3\" : \"description3\",      \"description1\" : \"description1\"    }  },  \"basicCashAccountAlias\" : {    \"name\" : \"name\",    \"cashClientId\" : \"cashClientId\",    \"currencyCode\" : \"currencyCode\"  },  \"id\" : \"id\",  \"beneficiaryInstitution\" : {    \"bicData\" : {      \"receiverBic\" : \"receiverBic\",      \"bankBic\" : \"bankBic\",      \"intermediaryBankBic\" : \"intermediaryBankBic\",      \"bic\" : \"bic\",      \"senderBic\" : \"senderBic\"    },    \"iban\" : \"iban\",    \"bankIban\" : \"bankIban\",    \"descriptionData\" : {      \"description4\" : \"description4\",      \"description2\" : \"description2\",      \"description3\" : \"description3\",      \"description1\" : \"description1\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getCashAccountBalance", nickname = "getCashAccountBalanceUsingPOST", notes = "Find CashAccount Balance", response = CashAccountBalance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashAccountBalance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accounts/{cashAccountId}/balance",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CashAccountBalance> getCashAccountBalanceUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "The Id of the {CashAccount}",required=true) @PathVariable("cashAccountId") String cashAccountId,@ApiParam(value = "filter"  )  @Valid @RequestBody CashAccountBalanceFilter cashAccountBalanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",  \"endBalance\" : 0.80082819046101150206595775671303272247314453125,  \"startBalance\" : 6.02745618307040320615897144307382404804229736328125,  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getCashAccountById", nickname = "getCashAccountByIdUsingGET", notes = "Find {CashAccount} by ID", response = CashAccount.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashAccount.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accounts/{cashAccountId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CashAccount> getCashAccountByIdUsingGET(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "The Id of the {CashAccount}",required=true) @PathVariable("cashAccountId") String cashAccountId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"balance\" : 0.80082819046101150206595775671303272247314453125,  \"currentAccountCode\" : \"currentAccountCode\",  \"balanceInLocalCurrency\" : 6.02745618307040320615897144307382404804229736328125,  \"iban\" : \"iban\",  \"name\" : \"name\",  \"id\" : \"id\",  \"localCurrencyCode\" : \"localCurrencyCode\",  \"cashClientId\" : \"cashClientId\",  \"currencyCode\" : \"currencyCode\",  \"domicilie\" : \"domicilie\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getCashClientById", nickname = "getCashClientByIdUsingGET", notes = "Find {CashClient} by ID", response = CashClient.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashClient.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CashClient> getCashClientByIdUsingGET(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cashUnitCode\" : \"cashUnitCode\",  \"address\" : {    \"roadTypeCode\" : \"roadTypeCode\",    \"zipCode\" : \"zipCode\",    \"regionCode\" : \"regionCode\",    \"address\" : \"address\",    \"complementaryAddress\" : \"complementaryAddress\",    \"city\" : \"city\",    \"countryCode\" : \"countryCode\",    \"region\" : \"region\"  },  \"cashClientTypeCode\" : \"cashClientTypeCode\",  \"telephone\" : \"telephone\",  \"languageCode\" : \"languageCode\",  \"externalReference\" : \"externalReference\",  \"cashBranchCode\" : \"cashBranchCode\",  \"mnemonicName\" : \"mnemonicName\",  \"name\" : \"name\",  \"id\" : \"id\",  \"fax\" : \"fax\",  \"shortName\" : \"shortName\",  \"bic\" : \"bic\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getTransactionByTransferDetails", nickname = "getTransactionByTransferDetailsUsingPOST", notes = "Returns the details of a {CashTransaction} originated from a {CashTransfer}", response = CashTransactionByTransfer.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashTransactionByTransfer.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accounts/{cashAccountId}/transactions/{cashTransactionId}/breakdowns/transfer",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<CashTransactionByTransfer> getTransactionByTransferDetailsUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "The Id of the {CashAccount}",required=true) @PathVariable("cashAccountId") String cashAccountId,@ApiParam(value = "The Id of the {CashTransaction}",required=true) @PathVariable("cashTransactionId") String cashTransactionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cashTransactionId\" : \"cashTransactionId\",  \"swiftMessageType\" : \"swiftMessageType\",  \"customerInstitution\" : {    \"bicData\" : {      \"receiverBic\" : \"receiverBic\",      \"bankBic\" : \"bankBic\",      \"intermediaryBankBic\" : \"intermediaryBankBic\",      \"bic\" : \"bic\",      \"senderBic\" : \"senderBic\"    },    \"iban\" : \"iban\",    \"bankIban\" : \"bankIban\",    \"descriptionData\" : {      \"description4\" : \"description4\",      \"description2\" : \"description2\",      \"description3\" : \"description3\",      \"description1\" : \"description1\"    }  },  \"accountWithInstitution\" : {    \"bicData\" : {      \"receiverBic\" : \"receiverBic\",      \"bankBic\" : \"bankBic\",      \"intermediaryBankBic\" : \"intermediaryBankBic\",      \"bic\" : \"bic\",      \"senderBic\" : \"senderBic\"    },    \"iban\" : \"iban\",    \"bankIban\" : \"bankIban\",    \"descriptionData\" : {      \"description4\" : \"description4\",      \"description2\" : \"description2\",      \"description3\" : \"description3\",      \"description1\" : \"description1\"    }  },  \"cashTransfer\" : {    \"cashAccountAliasName\" : \"cashAccountAliasName\",    \"cashTransferSource\" : \"cashTransferSource\",    \"externalReference\" : \"externalReference\",    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"chargeAccountIban\" : \"chargeAccountIban\",    \"failureCode\" : \"failureCode\",    \"orderedBy\" : \"orderedBy\",    \"cashDateData\" : {      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"senderToReceiverInformation\" : {      \"information4\" : \"information4\",      \"information1\" : \"information1\",      \"information2\" : \"information2\",      \"information3\" : \"information3\"    },    \"currencyCode\" : \"currencyCode\",    \"beneficiaryInstitution\" : {      \"bicData\" : {        \"receiverBic\" : \"receiverBic\",        \"bankBic\" : \"bankBic\",        \"intermediaryBankBic\" : \"intermediaryBankBic\",        \"bic\" : \"bic\",        \"senderBic\" : \"senderBic\"      },      \"iban\" : \"iban\",      \"bankIban\" : \"bankIban\",      \"descriptionData\" : {        \"description4\" : \"description4\",        \"description2\" : \"description2\",        \"description3\" : \"description3\",        \"description1\" : \"description1\"      }    },    \"statusCode\" : \"statusCode\"  },  \"orderingIntitution\" : {    \"bicData\" : {      \"receiverBic\" : \"receiverBic\",      \"bankBic\" : \"bankBic\",      \"intermediaryBankBic\" : \"intermediaryBankBic\",      \"bic\" : \"bic\",      \"senderBic\" : \"senderBic\"    },    \"iban\" : \"iban\",    \"bankIban\" : \"bankIban\",    \"descriptionData\" : {      \"description4\" : \"description4\",      \"description2\" : \"description2\",      \"description3\" : \"description3\",      \"description1\" : \"description1\"    }  },  \"senderReference\" : \"senderReference\",  \"intermediaryIntitution\" : {    \"bicData\" : {      \"receiverBic\" : \"receiverBic\",      \"bankBic\" : \"bankBic\",      \"intermediaryBankBic\" : \"intermediaryBankBic\",      \"bic\" : \"bic\",      \"senderBic\" : \"senderBic\"    },    \"iban\" : \"iban\",    \"bankIban\" : \"bankIban\",    \"descriptionData\" : {      \"description4\" : \"description4\",      \"description2\" : \"description2\",      \"description3\" : \"description3\",      \"description1\" : \"description1\"    }  },  \"omType\" : \"omType\",  \"cashAccountId\" : \"cashAccountId\",  \"cashClientId\" : \"cashClientId\",  \"messageUserReferences\" : \"messageUserReferences\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashAccountAliases", nickname = "listCashAccountAliasesUsingPOST", notes = "Returns list of {CashAccountAlias}es", response = CashAccountAliasSummaryAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashAccountAliasSummaryAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accountAliases/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CashAccountAliasSummaryAndPage> listCashAccountAliasesUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "body"  )  @Valid @RequestBody CashAccountAliasFilterAndPageFilter cashAccountAliasFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cashAccountAliasSummaries\" : [ {    \"basicCashAccountAlias\" : {      \"name\" : \"name\",      \"cashClientId\" : \"cashClientId\",      \"currencyCode\" : \"currencyCode\"    },    \"id\" : \"id\"  }, {    \"basicCashAccountAlias\" : {      \"name\" : \"name\",      \"cashClientId\" : \"cashClientId\",      \"currencyCode\" : \"currencyCode\"    },    \"id\" : \"id\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashAccounts", nickname = "listCashAccountsUsingPOST", notes = "Returns list of {CashAccount}s", response = CashAccountAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashAccountAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accounts/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CashAccountAndPage> listCashAccountsUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "filter"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"accounts\" : [ {    \"balance\" : 0.80082819046101150206595775671303272247314453125,    \"currentAccountCode\" : \"currentAccountCode\",    \"balanceInLocalCurrency\" : 6.02745618307040320615897144307382404804229736328125,    \"iban\" : \"iban\",    \"name\" : \"name\",    \"id\" : \"id\",    \"localCurrencyCode\" : \"localCurrencyCode\",    \"cashClientId\" : \"cashClientId\",    \"currencyCode\" : \"currencyCode\",    \"domicilie\" : \"domicilie\"  }, {    \"balance\" : 0.80082819046101150206595775671303272247314453125,    \"currentAccountCode\" : \"currentAccountCode\",    \"balanceInLocalCurrency\" : 6.02745618307040320615897144307382404804229736328125,    \"iban\" : \"iban\",    \"name\" : \"name\",    \"id\" : \"id\",    \"localCurrencyCode\" : \"localCurrencyCode\",    \"cashClientId\" : \"cashClientId\",    \"currencyCode\" : \"currencyCode\",    \"domicilie\" : \"domicilie\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashClients", nickname = "listCashClientsUsingPOST", notes = "Returns list of {CashClient}s", response = CashClientSummaryAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashClientSummaryAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CashClientSummaryAndPage> listCashClientsUsingPOST(@ApiParam(value = "filter"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"summaries\" : [ {    \"externalReference\" : \"externalReference\",    \"name\" : \"name\",    \"id\" : \"id\"  }, {    \"externalReference\" : \"externalReference\",    \"name\" : \"name\",    \"id\" : \"id\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashTransactionsAsExcel", nickname = "listCashTransactionsAsExcelUsingPOST", notes = "Returns an Excel file, that contains a list of {CashTransaction}s", response = ExcelAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accounts/{cashAccountId}/transactions/list/xls",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndPage> listCashTransactionsAsExcelUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "The Id of the {CashAccount}",required=true) @PathVariable("cashAccountId") String cashAccountId,@ApiParam(value = "filter"  )  @Valid @RequestBody CashTransactionFilterAndPageFilter cashTransactionFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashTransactionsAsPdf", nickname = "listCashTransactionsAsPdfUsingPOST", notes = "Returns PDF file, that contins a list of {CashTransaction}s", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accounts/{cashAccountId}/transactions/list/pdf",
        produces = { "application/pdf" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> listCashTransactionsAsPdfUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "The Id of the {CashAccount}",required=true) @PathVariable("cashAccountId") String cashAccountId,@ApiParam(value = "filter"  )  @Valid @RequestBody CashTransactionFilterAndPageFilter cashTransactionFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashTransactionsInterestsAsExcel", nickname = "listCashTransactionsInterestsAsExcelUsingPOST", notes = "Returns an Excel file, that contains {CashTransactionInterest} of a {CashTransaction}", response = ExcelAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accounts/{cashAccountId}/transactions/{cashTransactionId}/breakdowns/interests/list/xls",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndPage> listCashTransactionsInterestsAsExcelUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "The Id of the {CashAccount}",required=true) @PathVariable("cashAccountId") String cashAccountId,@ApiParam(value = "The Id of the {CashTransaction}",required=true) @PathVariable("cashTransactionId") String cashTransactionId,@ApiParam(value = "filter"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashTransactionsInterestsAsPdf", nickname = "listCashTransactionsInterestsAsPdfUsingPOST", notes = "Returns PDF file, that contins a list of {CashTransactionsInterests}s", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accounts/{cashAccountId}/transactions/{cashTransactionId}/breakdowns/interests/list/pdf",
        produces = { "application/pdf" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> listCashTransactionsInterestsAsPdfUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "The Id of the {CashAccount}",required=true) @PathVariable("cashAccountId") String cashAccountId,@ApiParam(value = "The Id of the {CashTransaction}",required=true) @PathVariable("cashTransactionId") String cashTransactionId,@ApiParam(value = "filter"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashTransactionsInterests", nickname = "listCashTransactionsInterestsUsingPOST", notes = "Returns the list of {CashTransactionInterest} of a {CashTransaction}", response = CashTransactionInterestAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashTransactionInterestAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accounts/{cashAccountId}/transactions/{cashTransactionId}/breakdowns/interests/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CashTransactionInterestAndPage> listCashTransactionsInterestsUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "The Id of the {CashAccount}",required=true) @PathVariable("cashAccountId") String cashAccountId,@ApiParam(value = "The Id of the {CashTransaction}",required=true) @PathVariable("cashTransactionId") String cashTransactionId,@ApiParam(value = "filter"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"interests\" : [ {    \"cashTransactionId\" : \"cashTransactionId\",    \"amount\" : 6.02745618307040320615897144307382404804229736328125,    \"cashTransactionInterestDateData\" : {      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"interestTypeCode\" : \"interestTypeCode\",    \"iban\" : \"iban\",    \"ratePercentage\" : 5.962133916683182377482808078639209270477294921875,    \"numberOfDays\" : 1,    \"accountBalance\" : 0.80082819046101150206595775671303272247314453125,    \"cashAccountId\" : \"cashAccountId\",    \"cashClientId\" : \"cashClientId\"  }, {    \"cashTransactionId\" : \"cashTransactionId\",    \"amount\" : 6.02745618307040320615897144307382404804229736328125,    \"cashTransactionInterestDateData\" : {      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"interestTypeCode\" : \"interestTypeCode\",    \"iban\" : \"iban\",    \"ratePercentage\" : 5.962133916683182377482808078639209270477294921875,    \"numberOfDays\" : 1,    \"accountBalance\" : 0.80082819046101150206595775671303272247314453125,    \"cashAccountId\" : \"cashAccountId\",    \"cashClientId\" : \"cashClientId\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashTransactions", nickname = "listCashTransactionsUsingPOST", notes = "Returns list of {CashTransaction}s", response = CashTransactionAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashTransactionAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accounts/{cashAccountId}/transactions/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CashTransactionAndPage> listCashTransactionsUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "The Id of the {CashAccount}",required=true) @PathVariable("cashAccountId") String cashAccountId,@ApiParam(value = "filter"  )  @Valid @RequestBody CashTransactionFilterAndPageFilter cashTransactionFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"transactions\" : [ {    \"externalReference\" : \"externalReference\",    \"amount\" : 6.02745618307040320615897144307382404804229736328125,    \"cashDateData\" : {      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"id\" : \"id\",    \"accountBalance\" : 0.80082819046101150206595775671303272247314453125,    \"cashAccountId\" : \"cashAccountId\",    \"cashClientId\" : \"cashClientId\",    \"currencyCode\" : \"currencyCode\",    \"additionalReferences\" : {      \"additionalReference4\" : \"additionalReference4\",      \"additionalReference1\" : \"additionalReference1\",      \"additionalReference2\" : \"additionalReference2\",      \"additionalReference3\" : \"additionalReference3\"    },    \"cashTransactionTypeCode\" : \"cashTransactionTypeCode\"  }, {    \"externalReference\" : \"externalReference\",    \"amount\" : 6.02745618307040320615897144307382404804229736328125,    \"cashDateData\" : {      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"id\" : \"id\",    \"accountBalance\" : 0.80082819046101150206595775671303272247314453125,    \"cashAccountId\" : \"cashAccountId\",    \"cashClientId\" : \"cashClientId\",    \"currencyCode\" : \"currencyCode\",    \"additionalReferences\" : {      \"additionalReference4\" : \"additionalReference4\",      \"additionalReference1\" : \"additionalReference1\",      \"additionalReference2\" : \"additionalReference2\",      \"additionalReference3\" : \"additionalReference3\"    },    \"cashTransactionTypeCode\" : \"cashTransactionTypeCode\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashTransfersAsExcel", nickname = "listCashTransfersAsExcelUsingPOST", notes = "Returns an Excel file, that contains a list of {CashTransfer}s", response = ExcelAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/transfers/list/xls",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndPage> listCashTransfersAsExcelUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "filter"  )  @Valid @RequestBody CashTransferFilterAndPageFilter cashTransferFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashTransfers", nickname = "listCashTransfersUsingPOST", notes = "Returns list of {CashTransfer}s", response = CashTransferAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashTransferAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/transfers/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CashTransferAndPage> listCashTransfersUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "filter"  )  @Valid @RequestBody CashTransferFilterAndPageFilter cashTransferFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cashTransfers\" : [ {    \"cashAccountAliasName\" : \"cashAccountAliasName\",    \"cashTransferSource\" : \"cashTransferSource\",    \"externalReference\" : \"externalReference\",    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"chargeAccountIban\" : \"chargeAccountIban\",    \"failureCode\" : \"failureCode\",    \"orderedBy\" : \"orderedBy\",    \"cashDateData\" : {      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"senderToReceiverInformation\" : {      \"information4\" : \"information4\",      \"information1\" : \"information1\",      \"information2\" : \"information2\",      \"information3\" : \"information3\"    },    \"currencyCode\" : \"currencyCode\",    \"beneficiaryInstitution\" : {      \"bicData\" : {        \"receiverBic\" : \"receiverBic\",        \"bankBic\" : \"bankBic\",        \"intermediaryBankBic\" : \"intermediaryBankBic\",        \"bic\" : \"bic\",        \"senderBic\" : \"senderBic\"      },      \"iban\" : \"iban\",      \"bankIban\" : \"bankIban\",      \"descriptionData\" : {        \"description4\" : \"description4\",        \"description2\" : \"description2\",        \"description3\" : \"description3\",        \"description1\" : \"description1\"      }    },    \"statusCode\" : \"statusCode\"  }, {    \"cashAccountAliasName\" : \"cashAccountAliasName\",    \"cashTransferSource\" : \"cashTransferSource\",    \"externalReference\" : \"externalReference\",    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"chargeAccountIban\" : \"chargeAccountIban\",    \"failureCode\" : \"failureCode\",    \"orderedBy\" : \"orderedBy\",    \"cashDateData\" : {      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"senderToReceiverInformation\" : {      \"information4\" : \"information4\",      \"information1\" : \"information1\",      \"information2\" : \"information2\",      \"information3\" : \"information3\"    },    \"currencyCode\" : \"currencyCode\",    \"beneficiaryInstitution\" : {      \"bicData\" : {        \"receiverBic\" : \"receiverBic\",        \"bankBic\" : \"bankBic\",        \"intermediaryBankBic\" : \"intermediaryBankBic\",        \"bic\" : \"bic\",        \"senderBic\" : \"senderBic\"      },      \"iban\" : \"iban\",      \"bankIban\" : \"bankIban\",      \"descriptionData\" : {        \"description4\" : \"description4\",        \"description2\" : \"description2\",        \"description3\" : \"description3\",        \"description1\" : \"description1\"      }    },    \"statusCode\" : \"statusCode\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listDestinationCashAccounts", nickname = "listDestinationCashAccountsUsingPOST", notes = "Returns list of Destination {CashAccount}s", response = CashAccountAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashAccountAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accounts/{cashAccountId}/destinationCashAccounts/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CashAccountAndPage> listDestinationCashAccountsUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "The Id of the {CashAccount}",required=true) @PathVariable("cashAccountId") String cashAccountId,@ApiParam(value = "filter"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"accounts\" : [ {    \"balance\" : 0.80082819046101150206595775671303272247314453125,    \"currentAccountCode\" : \"currentAccountCode\",    \"balanceInLocalCurrency\" : 6.02745618307040320615897144307382404804229736328125,    \"iban\" : \"iban\",    \"name\" : \"name\",    \"id\" : \"id\",    \"localCurrencyCode\" : \"localCurrencyCode\",    \"cashClientId\" : \"cashClientId\",    \"currencyCode\" : \"currencyCode\",    \"domicilie\" : \"domicilie\"  }, {    \"balance\" : 0.80082819046101150206595775671303272247314453125,    \"currentAccountCode\" : \"currentAccountCode\",    \"balanceInLocalCurrency\" : 6.02745618307040320615897144307382404804229736328125,    \"iban\" : \"iban\",    \"name\" : \"name\",    \"id\" : \"id\",    \"localCurrencyCode\" : \"localCurrencyCode\",    \"cashClientId\" : \"cashClientId\",    \"currencyCode\" : \"currencyCode\",    \"domicilie\" : \"domicilie\"  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateCashTransactionSettlementsAsExcel", nickname = "navigateCashTransactionSettlementsAsExcelUsingPOST", notes = "Returns the list of {SettlementSummary}s of a {CashTransaction}", response = ExcelAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ExcelAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accounts/{cashAccountId}/transactions/{cashTransactionId}/breakdowns/settlements/navigate/xls",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ExcelAndCursor> navigateCashTransactionSettlementsAsExcelUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "The Id of the {CashAccount}",required=true) @PathVariable("cashAccountId") String cashAccountId,@ApiParam(value = "The Id of the {CashTransaction}",required=true) @PathVariable("cashTransactionId") String cashTransactionId,@ApiParam(value = "filter"  )  @Valid @RequestBody CursorFilter cursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"base64BinaryData\" : \"base64BinaryData\",  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "navigateCashTransactionSettlements", nickname = "navigateCashTransactionSettlementsUsingPOST", notes = "Returns the list of {SettlementSummary}s of a {CashTransaction}", response = SettlementSummaryAndCursor.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SettlementSummaryAndCursor.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/accounts/{cashAccountId}/transactions/{cashTransactionId}/breakdowns/settlements/navigate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SettlementSummaryAndCursor> navigateCashTransactionSettlementsUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "The Id of the {CashAccount}",required=true) @PathVariable("cashAccountId") String cashAccountId,@ApiParam(value = "The Id of the {CashTransaction}",required=true) @PathVariable("cashTransactionId") String cashTransactionId,@ApiParam(value = "filter"  )  @Valid @RequestBody CursorFilter cursorFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cursor\" : {    \"cursorString\" : \"cursorString\",    \"hasPrevious\" : true,    \"hasNext\" : true  },  \"summaries\" : [ {    \"nav\" : 0.80082819046101150206595775671303272247314453125,    \"navDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"settlementCapitalGainedData\" : {      \"capitalGained\" : 6.8468526983526398765889098285697400569915771484375,      \"capitalGainedInLocalCurrency\" : 7.4577447736837658709418974467553198337554931640625    },    \"settlementBasicData\" : {      \"productId\" : 1,      \"depositaryId\" : 4,      \"distributorId\" : 7,      \"paymentCurrencyCode\" : \"paymentCurrencyCode\",      \"settlementTransactionTypeCode\" : \"settlementTransactionTypeCode\",      \"paymentSequence\" : 1,      \"dealingInstrumentType\" : \"FUND\",      \"settlementStatusCode\" : \"settlementStatusCode\",      \"contractExternalReference\" : \"contractExternalReference\",      \"localCurrencyCode\" : \"localCurrencyCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"statusChangePermitted\" : true,      \"exchangeRateApplied\" : 1.231513536777255612975068288506008684635162353515625,      \"externalReference\" : \"externalReference\",      \"transactionExternalReference\" : \"transactionExternalReference\",      \"contractId\" : 3,      \"dealingFundHouseId\" : 2,      \"currencyCode\" : \"currencyCode\"    },    \"settlementAmountData\" : {      \"awardedGrossAmount\" : 5.962133916683182377482808078639209270477294921875,      \"requestedNetAmount\" : 7.061401241503109105224211816675961017608642578125,      \"requestedGrossAmount\" : 2.3021358869347654518833223846741020679473876953125,      \"awardedNetAmount\" : 5.63737665663332876420099637471139430999755859375,      \"settledAmount\" : 9.301444243932575517419536481611430644989013671875    },    \"settlementSettingsData\" : {      \"grouped\" : true,      \"groupedTransaction\" : true,      \"numberGroupedTransactions\" : 9,      \"groupedTransactionsConfirmed\" : true    },    \"settlementFeeData\" : {      \"feePerDealingInstrument\" : 9.965781217890562260208753286860883235931396484375,      \"amount\" : 4.9652184929849543237878606305457651615142822265625,      \"appliedDealingFundHouseFee\" : 5.02500479152029466689555192715488374233245849609375    },    \"settledAmount\" : 1.46581298050294517310021547018550336360931396484375,    \"settlementDateData\" : {      \"settledDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"paymentDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transactionOrderedDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"settlementEtfData\" : {      \"brokerId\" : 1,      \"stockExchangeId\" : \"stockExchangeId\"    },    \"settlementSharesData\" : {      \"awardedShares\" : 6.683562403749608193948006373830139636993408203125,      \"requestedShares\" : 8.7620420127490010742121739895083010196685791015625    },    \"id\" : \"id\",    \"settlementsWithholdingData\" : {      \"withheldAmount\" : 9.0183481860707832566959041287191212177276611328125    },    \"pendingAmount\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"nav\" : 0.80082819046101150206595775671303272247314453125,    \"navDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"settlementCapitalGainedData\" : {      \"capitalGained\" : 6.8468526983526398765889098285697400569915771484375,      \"capitalGainedInLocalCurrency\" : 7.4577447736837658709418974467553198337554931640625    },    \"settlementBasicData\" : {      \"productId\" : 1,      \"depositaryId\" : 4,      \"distributorId\" : 7,      \"paymentCurrencyCode\" : \"paymentCurrencyCode\",      \"settlementTransactionTypeCode\" : \"settlementTransactionTypeCode\",      \"paymentSequence\" : 1,      \"dealingInstrumentType\" : \"FUND\",      \"settlementStatusCode\" : \"settlementStatusCode\",      \"contractExternalReference\" : \"contractExternalReference\",      \"localCurrencyCode\" : \"localCurrencyCode\",      \"dealingInstrument\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      },      \"statusChangePermitted\" : true,      \"exchangeRateApplied\" : 1.231513536777255612975068288506008684635162353515625,      \"externalReference\" : \"externalReference\",      \"transactionExternalReference\" : \"transactionExternalReference\",      \"contractId\" : 3,      \"dealingFundHouseId\" : 2,      \"currencyCode\" : \"currencyCode\"    },    \"settlementAmountData\" : {      \"awardedGrossAmount\" : 5.962133916683182377482808078639209270477294921875,      \"requestedNetAmount\" : 7.061401241503109105224211816675961017608642578125,      \"requestedGrossAmount\" : 2.3021358869347654518833223846741020679473876953125,      \"awardedNetAmount\" : 5.63737665663332876420099637471139430999755859375,      \"settledAmount\" : 9.301444243932575517419536481611430644989013671875    },    \"settlementSettingsData\" : {      \"grouped\" : true,      \"groupedTransaction\" : true,      \"numberGroupedTransactions\" : 9,      \"groupedTransactionsConfirmed\" : true    },    \"settlementFeeData\" : {      \"feePerDealingInstrument\" : 9.965781217890562260208753286860883235931396484375,      \"amount\" : 4.9652184929849543237878606305457651615142822265625,      \"appliedDealingFundHouseFee\" : 5.02500479152029466689555192715488374233245849609375    },    \"settledAmount\" : 1.46581298050294517310021547018550336360931396484375,    \"settlementDateData\" : {      \"settledDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"paymentDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"transactionOrderedDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"settlementEtfData\" : {      \"brokerId\" : 1,      \"stockExchangeId\" : \"stockExchangeId\"    },    \"settlementSharesData\" : {      \"awardedShares\" : 6.683562403749608193948006373830139636993408203125,      \"requestedShares\" : 8.7620420127490010742121739895083010196685791015625    },    \"id\" : \"id\",    \"settlementsWithholdingData\" : {      \"withheldAmount\" : 9.0183481860707832566959041287191212177276611328125    },    \"pendingAmount\" : 6.02745618307040320615897144307382404804229736328125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateCashTransferAuthorization", nickname = "validateCashTransferAuthorizationUsingPOST", notes = "validates the authorization of a {CashTransfer}", response = CashTransferAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashTransferAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/transfers/authorize/validate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CashTransferAndMessages> validateCashTransferAuthorizationUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody CashTransfer cashTransfer) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cashTransfer\" : {    \"cashAccountAliasName\" : \"cashAccountAliasName\",    \"cashTransferSource\" : \"cashTransferSource\",    \"externalReference\" : \"externalReference\",    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"chargeAccountIban\" : \"chargeAccountIban\",    \"failureCode\" : \"failureCode\",    \"orderedBy\" : \"orderedBy\",    \"cashDateData\" : {      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"senderToReceiverInformation\" : {      \"information4\" : \"information4\",      \"information1\" : \"information1\",      \"information2\" : \"information2\",      \"information3\" : \"information3\"    },    \"currencyCode\" : \"currencyCode\",    \"beneficiaryInstitution\" : {      \"bicData\" : {        \"receiverBic\" : \"receiverBic\",        \"bankBic\" : \"bankBic\",        \"intermediaryBankBic\" : \"intermediaryBankBic\",        \"bic\" : \"bic\",        \"senderBic\" : \"senderBic\"      },      \"iban\" : \"iban\",      \"bankIban\" : \"bankIban\",      \"descriptionData\" : {        \"description4\" : \"description4\",        \"description2\" : \"description2\",        \"description3\" : \"description3\",        \"description1\" : \"description1\"      }    },    \"statusCode\" : \"statusCode\"  },  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "validateCashTransfer", nickname = "validateCashTransferUsingPOST", notes = "Validate {CashTransfer}", response = CashTransferAndMessages.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "cashclients", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CashTransferAndMessages.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/cashClients/{cashClientId}/transfers/validate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CashTransferAndMessages> validateCashTransferUsingPOST(@ApiParam(value = "The Id of the {CashClient}",required=true) @PathVariable("cashClientId") String cashClientId,@ApiParam(value = "body" ,required=true )  @Valid @RequestBody CashTransfer cashTransfer) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cashTransfer\" : {    \"cashAccountAliasName\" : \"cashAccountAliasName\",    \"cashTransferSource\" : \"cashTransferSource\",    \"externalReference\" : \"externalReference\",    \"amount\" : 0.80082819046101150206595775671303272247314453125,    \"chargeAccountIban\" : \"chargeAccountIban\",    \"failureCode\" : \"failureCode\",    \"orderedBy\" : \"orderedBy\",    \"cashDateData\" : {      \"orderedDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"valueDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"senderToReceiverInformation\" : {      \"information4\" : \"information4\",      \"information1\" : \"information1\",      \"information2\" : \"information2\",      \"information3\" : \"information3\"    },    \"currencyCode\" : \"currencyCode\",    \"beneficiaryInstitution\" : {      \"bicData\" : {        \"receiverBic\" : \"receiverBic\",        \"bankBic\" : \"bankBic\",        \"intermediaryBankBic\" : \"intermediaryBankBic\",        \"bic\" : \"bic\",        \"senderBic\" : \"senderBic\"      },      \"iban\" : \"iban\",      \"bankIban\" : \"bankIban\",      \"descriptionData\" : {        \"description4\" : \"description4\",        \"description2\" : \"description2\",        \"description3\" : \"description3\",        \"description1\" : \"description1\"      }    },    \"statusCode\" : \"statusCode\"  },  \"messages\" : [ {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  }, {    \"errorCode\" : \"errorCode\",    \"changedValue\" : \"changedValue\",    \"status\" : \"OK\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
