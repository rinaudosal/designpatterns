/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AnnualBenchmarkAndInstrumentPerformance;
import org.openapitools.model.Benchmark;
import org.openapitools.model.BenchmarkAndPage;
import org.openapitools.model.CumulativeBenchmarkAndInstrumentPerformance;
import org.openapitools.model.HistoricalPerformanceFilterAndPageFilter;
import org.openapitools.model.HistoricalPerformancesAndPage;
import org.openapitools.model.PageFilter;
import org.openapitools.model.PerformanceFilter;
import org.openapitools.model.PerformanceFilterAndPageFilter;
import org.openapitools.model.QuarterlyPerformancesAndPage;
import org.openapitools.model.RiskClassification;
import org.openapitools.model.Statistic;
import org.openapitools.model.StatisticFilter;
import org.openapitools.model.ValuationBenchmark;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "benchmarks", description = "the benchmarks API")
public interface BenchmarksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "getBenchmarkAnnualPerformance", nickname = "getBenchmarkAnnualPerformanceUsingPOST", notes = "", response = AnnualBenchmarkAndInstrumentPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "benchmarks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = AnnualBenchmarkAndInstrumentPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/benchmarks/{benchmarkId}/performances/annual",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AnnualBenchmarkAndInstrumentPerformance> getBenchmarkAnnualPerformanceUsingPOST(@ApiParam(value = "The Id of the {Benchmark}",required=true) @PathVariable("benchmarkId") String benchmarkId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentPerformance\" : {    \"history1\" : 0.80082819046101150206595775671303272247314453125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"history2\" : 6.02745618307040320615897144307382404804229736328125,    \"history3\" : 1.46581298050294517310021547018550336360931396484375,    \"ytd\" : 2.3021358869347654518833223846741020679473876953125,    \"history4\" : 5.962133916683182377482808078639209270477294921875,    \"history5\" : 5.63737665663332876420099637471139430999755859375  },  \"benchmarkPerformance\" : {    \"history1\" : 0.80082819046101150206595775671303272247314453125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"history2\" : 6.02745618307040320615897144307382404804229736328125,    \"history3\" : 1.46581298050294517310021547018550336360931396484375,    \"ytd\" : 2.3021358869347654518833223846741020679473876953125,    \"history4\" : 5.962133916683182377482808078639209270477294921875,    \"history5\" : 5.63737665663332876420099637471139430999755859375  },  \"benchmarkId\" : \"benchmarkId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getBenchmarkById", nickname = "getBenchmarkByIdUsingGET", notes = "This method returns the {Benchmark} whose {Benchmark.id} is specified as parameter.", response = Benchmark.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "benchmarks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Benchmark.class),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/benchmarks/{benchmarkId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Benchmark> getBenchmarkByIdUsingGET(@ApiParam(value = "The Id of the {Benchmark}",required=true) @PathVariable("benchmarkId") String benchmarkId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"ticker\" : \"ticker\",  \"firstPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ],  \"name\" : \"name\",  \"id\" : \"id\",  \"currencyCode\" : \"currencyCode\",  \"factors\" : [ {    \"weight\" : 0.80082819046101150206595775671303272247314453125,    \"benchmark\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  }, {    \"weight\" : 0.80082819046101150206595775671303272247314453125,    \"benchmark\" : {      \"id\" : \"id\",      \"label\" : \"label\",      \"url\" : \"url\"    }  } ],  \"lastPrices\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"priceTypeCode\" : \"priceTypeCode\",    \"currencyCode\" : \"currencyCode\",    \"value\" : 6.02745618307040320615897144307382404804229736328125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getBenchmarkCumulativePerformance", nickname = "getBenchmarkCumulativePerformanceUsingPOST", notes = "", response = CumulativeBenchmarkAndInstrumentPerformance.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "benchmarks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CumulativeBenchmarkAndInstrumentPerformance.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/benchmarks/{benchmarkId}/performances/cumulative",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CumulativeBenchmarkAndInstrumentPerformance> getBenchmarkCumulativePerformanceUsingPOST(@ApiParam(value = "The Id of the {Benchmark}",required=true) @PathVariable("benchmarkId") String benchmarkId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics."  )  @Valid @RequestBody PerformanceFilter performanceFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentPerformance\" : {    \"oneMonth\" : 5.63737665663332876420099637471139430999755859375,    \"threeMonths\" : 9.301444243932575517419536481611430644989013671875,    \"oneYear\" : 2.3021358869347654518833223846741020679473876953125,    \"week\" : 7.3862819483858839220147274318151175975799560546875,    \"threeYears\" : 3.61607674925191080461672754609026014804840087890625,    \"fiveYears\" : 6.02745618307040320615897144307382404804229736328125,    \"twelveYears\" : 2.027123023002321833274663731572218239307403564453125,    \"sixMonths\" : 7.061401241503109105224211816675961017608642578125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"fromInception\" : 1.46581298050294517310021547018550336360931396484375,    \"mtd\" : 5.962133916683182377482808078639209270477294921875,    \"twoMonth\" : 4.1456080298839363962315474054776132106781005859375,    \"day\" : 0.80082819046101150206595775671303272247314453125  },  \"benchmarkPerformance\" : {    \"oneMonth\" : 5.63737665663332876420099637471139430999755859375,    \"threeMonths\" : 9.301444243932575517419536481611430644989013671875,    \"oneYear\" : 2.3021358869347654518833223846741020679473876953125,    \"week\" : 7.3862819483858839220147274318151175975799560546875,    \"threeYears\" : 3.61607674925191080461672754609026014804840087890625,    \"fiveYears\" : 6.02745618307040320615897144307382404804229736328125,    \"twelveYears\" : 2.027123023002321833274663731572218239307403564453125,    \"sixMonths\" : 7.061401241503109105224211816675961017608642578125,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"fromInception\" : 1.46581298050294517310021547018550336360931396484375,    \"mtd\" : 5.962133916683182377482808078639209270477294921875,    \"twoMonth\" : 4.1456080298839363962315474054776132106781005859375,    \"day\" : 0.80082819046101150206595775671303272247314453125  },  \"benchmarkId\" : \"benchmarkId\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getBenchmarkRiskClassification", nickname = "getBenchmarkRiskClassificationUsingPOST", notes = "get benchmark risk statistic.", response = RiskClassification.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "benchmarks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = RiskClassification.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/benchmarks/{benchmarkId}/statistic/riskClassification",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RiskClassification> getBenchmarkRiskClassificationUsingPOST(@ApiParam(value = "The Id of the {Benchmark}",required=true) @PathVariable("benchmarkId") String benchmarkId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"benchmarkVolatility\" : 6.02745618307040320615897144307382404804229736328125,  \"instrumentPerformance\" : 1.46581298050294517310021547018550336360931396484375,  \"instrumentVolatility\" : 5.962133916683182377482808078639209270477294921875,  \"benchmarkPerformance\" : 0.80082819046101150206595775671303272247314453125}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getBenchmarkStatistic", nickname = "getBenchmarkStatisticUsingPOST", notes = "Get benchmark statistic.", response = Statistic.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "benchmarks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Statistic.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/benchmarks/{benchmarkId}/statistic",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Statistic> getBenchmarkStatisticUsingPOST(@ApiParam(value = "The Id of the {Benchmark}",required=true) @PathVariable("benchmarkId") String benchmarkId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody StatisticFilter statisticFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"instrumentStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkStatistic\" : {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"performance\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"maxDrawdown\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"sharpeRatio\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"volatility\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    },    \"returnOnRevenue\" : {      \"threeMonths\" : 5.63737665663332876420099637471139430999755859375,      \"oneYear\" : 6.02745618307040320615897144307382404804229736328125,      \"period\" : 1.46581298050294517310021547018550336360931396484375,      \"threeYears\" : 2.3021358869347654518833223846741020679473876953125,      \"ytd\" : 9.301444243932575517419536481611430644989013671875,      \"fiveYears\" : 0.80082819046101150206595775671303272247314453125,      \"twelveYears\" : 7.061401241503109105224211816675961017608642578125,      \"sixMonths\" : 5.962133916683182377482808078639209270477294921875    }  },  \"benchmarkId\" : \"benchmarkId\",  \"relative\" : {    \"r2\" : 1.489415909854170383397331534069962799549102783203125,    \"trackingError\" : 6.8468526983526398765889098285697400569915771484375,    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"correlation\" : 7.3862819483858839220147274318151175975799560546875,    \"infoRatio\" : 1.231513536777255612975068288506008684635162353515625,    \"actPremium\" : 3.61607674925191080461672754609026014804840087890625,    \"alpha\" : 2.027123023002321833274663731572218239307403564453125,    \"treynorRatio\" : 7.4577447736837658709418974467553198337554931640625,    \"jesenAlpha\" : 1.024645700144157789424070870154537260532379150390625,    \"beta\" : 4.1456080298839363962315474054776132106781005859375  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getBenchmarkValuation", nickname = "getBenchmarkValuationUsingPOST", notes = "This method returns the {ValuationBenchmark} of a specific {Benchmark}.", response = ValuationBenchmark.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "benchmarks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ValuationBenchmark.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/benchmarks/{benchmarkId}/valuation",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<ValuationBenchmark> getBenchmarkValuationUsingPOST(@ApiParam(value = "The Id of the {Benchmark}",required=true) @PathVariable("benchmarkId") String benchmarkId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"date\" : \"2000-01-23T04:56:07.000+00:00\",  \"previousClose\" : 5.962133916683182377482808078639209270477294921875,  \"startWeekRange\" : 5.63737665663332876420099637471139430999755859375,  \"change\" : 0.80082819046101150206595775671303272247314453125,  \"changePercentage\" : 6.02745618307040320615897144307382404804229736328125,  \"value\" : 2.3021358869347654518833223846741020679473876953125,  \"benchmarkId\" : \"benchmarkId\",  \"endWeekRange\" : 1.46581298050294517310021547018550336360931396484375}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listBenchmarkHistoricalPerformances", nickname = "listBenchmarkHistoricalPerformancesUsingPOST", notes = "", response = HistoricalPerformancesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "benchmarks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = HistoricalPerformancesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/benchmarks/{benchmarkId}/performances/historical/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<HistoricalPerformancesAndPage> listBenchmarkHistoricalPerformancesUsingPOST(@ApiParam(value = "The Id of the {Benchmark}",required=true) @PathVariable("benchmarkId") String benchmarkId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody HistoricalPerformanceFilterAndPageFilter historicalPerformanceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"benchmarkPerformances\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  },  \"instrumentPerformances\" : [ {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  }, {    \"date\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"value\" : 0.80082819046101150206595775671303272247314453125  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listBenchmarkQuarterlyPerformances", nickname = "listBenchmarkQuarterlyPerformancesUsingPOST", notes = "", response = QuarterlyPerformancesAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "benchmarks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = QuarterlyPerformancesAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/benchmarks/{benchmarkId}/performances/quarterly/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<QuarterlyPerformancesAndPage> listBenchmarkQuarterlyPerformancesUsingPOST(@ApiParam(value = "The Id of the {Benchmark}",required=true) @PathVariable("benchmarkId") String benchmarkId,@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody PerformanceFilterAndPageFilter performanceFilterAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"quarterlyPerformances\" : [ {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"quarter1\" : 0.80082819046101150206595775671303272247314453125,    \"year\" : 5.63737665663332876420099637471139430999755859375,    \"quarter2\" : 6.02745618307040320615897144307382404804229736328125,    \"quarter3\" : 1.46581298050294517310021547018550336360931396484375,    \"quarter4\" : 5.962133916683182377482808078639209270477294921875  }, {    \"calculationPeriod\" : {      \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"quarter1\" : 0.80082819046101150206595775671303272247314453125,    \"year\" : 5.63737665663332876420099637471139430999755859375,    \"quarter2\" : 6.02745618307040320615897144307382404804229736328125,    \"quarter3\" : 1.46581298050294517310021547018550336360931396484375,    \"quarter4\" : 5.962133916683182377482808078639209270477294921875  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listBenchmarks", nickname = "listBenchmarksUsingPOST", notes = "This method returns list of {Benchmark}s", response = BenchmarkAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "benchmarks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BenchmarkAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/benchmarks/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<BenchmarkAndPage> listBenchmarksUsingPOST(@ApiParam(value = "body"  )  @Valid @RequestBody PageFilter pageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"benchmarks\" : [ {    \"ticker\" : \"ticker\",    \"firstPrices\" : [ {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    }, {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    } ],    \"name\" : \"name\",    \"id\" : \"id\",    \"currencyCode\" : \"currencyCode\",    \"factors\" : [ {      \"weight\" : 0.80082819046101150206595775671303272247314453125,      \"benchmark\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"weight\" : 0.80082819046101150206595775671303272247314453125,      \"benchmark\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ],    \"lastPrices\" : [ {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    }, {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    } ]  }, {    \"ticker\" : \"ticker\",    \"firstPrices\" : [ {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    }, {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    } ],    \"name\" : \"name\",    \"id\" : \"id\",    \"currencyCode\" : \"currencyCode\",    \"factors\" : [ {      \"weight\" : 0.80082819046101150206595775671303272247314453125,      \"benchmark\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    }, {      \"weight\" : 0.80082819046101150206595775671303272247314453125,      \"benchmark\" : {        \"id\" : \"id\",        \"label\" : \"label\",        \"url\" : \"url\"      }    } ],    \"lastPrices\" : [ {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    }, {      \"date\" : \"2000-01-23T04:56:07.000+00:00\",      \"priceTypeCode\" : \"priceTypeCode\",      \"currencyCode\" : \"currencyCode\",      \"value\" : 6.02745618307040320615897144307382404804229736328125    } ]  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
