/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CodeDescription;
import java.util.List;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "catalog", description = "the catalog API")
public interface CatalogApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "documentLevels", nickname = "documentLevelsUsingPOST", notes = "This method returns a list of documents levels.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/documentLevels/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> documentLevelsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listAccessControls", nickname = "listAccessControlsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/accessControls/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listAccessControlsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listAfbAssets", nickname = "listAfbAssetsUsingPOST1", notes = "Used in attribute `FundClassificationFilter.classificationKeyValues` and `PopularFilter.afbAssetCode`. This category is a specific {listFundClassifications}.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/afbAssets/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listAfbAssetsUsingPOST1(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listAfbGeographicalAreas", nickname = "listAfbGeographicalAreasUsingPOST1", notes = "This category is a specific {listFundClassifications}.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/afbGeographicalAreas/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listAfbGeographicalAreasUsingPOST1(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listAssetAllocations", nickname = "listAssetAllocationsUsingPOST", notes = "This method returns a list of Asset Allocation. You can specify the input list of Asset Allocation code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/assetAllocations/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listAssetAllocationsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listAssogestionis", nickname = "listAssogestionisUsingPOST", notes = "This category is a specific {listFundClassifications}.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/assogestionis/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listAssogestionisUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listAuthorizationOrderTypes", nickname = "listAuthorizationOrderTypesUsingPOST", notes = "Returns the list of possible causes of a {AuthorizationOrderType} rejection.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/authorizationOrderTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listAuthorizationOrderTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCPFClassification", nickname = "listCPFClassificationUsingPOST", notes = "Returns the list of possible causes of a {CentralProvidentFundClassification} rejection.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/centralProvidedFundClassification/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCPFClassificationUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCPFFocus", nickname = "listCPFFocusUsingPOST", notes = "Returns the list of possible causes of a {CentralProvidentFundFocus} rejection.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/centralProvidedFundFocus/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCPFFocusUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCPFScheme", nickname = "listCPFSchemeUsingPOST", notes = "Returns the list of possible causes of a {CentralProvidentFundScheme} rejection.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/centralProvidedFundScheme/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCPFSchemeUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCalculationCurrencies", nickname = "listCalculationCurrenciesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/calculationCurrencies/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCalculationCurrenciesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashBranches", nickname = "listCashBranchesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/cashBranches/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCashBranchesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashClientTypes", nickname = "listCashClientTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/cashClientTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCashClientTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashInterestTypes", nickname = "listCashInterestTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/cashInterestTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCashInterestTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashTransactionDetailedTypes", nickname = "listCashTransactionDetailedTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/cashTransactionDetailedTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCashTransactionDetailedTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashTransactionTypes", nickname = "listCashTransactionTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/cashTransactionTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCashTransactionTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashTransferSources", nickname = "listCashTransferSourcesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/cashTransferSources/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCashTransferSourcesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashTransferStatuses", nickname = "listCashTransferStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/cashTransferStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCashTransferStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCashUnits", nickname = "listCashUnitsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/cashUnits/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCashUnitsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listClassClientTypes", nickname = "listClassClientTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/classClientTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listClassClientTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listClassServiceTypes", nickname = "listClassServiceTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/classServiceTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listClassServiceTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCollectiveInvestmentSchemeExternalCodes", nickname = "listCollectiveInvestmentSchemeExternalCodesUsingPOST", notes = "This method returns a list of Collective Investment Scheme External Code. You can specify the input list of Collective Investment Scheme External Code code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/collectiveInvestmentSchemeExternalCodes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCollectiveInvestmentSchemeExternalCodesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCollectiveInvestmentSchemeTypes", nickname = "listCollectiveInvestmentSchemeTypesUsingPOST", notes = "This method returns a list of Collective Investment Scheme Type. You can specify the input list of Collective Investment Scheme Type code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/collectiveInvestmentSchemeTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCollectiveInvestmentSchemeTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listComparisons", nickname = "listComparisonsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/comparisons/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listComparisonsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCountries", nickname = "listCountriesUsingPOST", notes = "This method returns a list of country. You can specify the input list of country code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/countries/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCountriesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCreditQualities", nickname = "listCreditQualitiesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/creditQualities/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCreditQualitiesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCreditQualityBreakdowns", nickname = "listCreditQualityBreakdownsUsingPOST", notes = "This method returns a list of Credit Quality Breakdown. You can specify the input list of Credit Quality Breakdown code you're interrested in.  If the list is either null or empty then all the known Credit Quality Breakdown will be returned. If any of the code passed in the list is unkonwn the method will return a 400 HTTP response ({IllegalInput}).", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/creditQualityBreakdowns/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCreditQualityBreakdownsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listCurrencies", nickname = "listCurrenciesUsingPOST", notes = "This method returns a list of currencies. You can specify the input list of currencies code you're  interested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/currencies/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listCurrenciesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listDateFormatPatterns", nickname = "listDateFormatPatternsUsingPOST", notes = "Returns a list of all date_format patterns that users could select as theirs", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/dateFormatPatterns/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listDateFormatPatternsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listDistributionChannels", nickname = "listDistributionChannelsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/distributionChannels/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listDistributionChannelsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listDividendPayoutFrequencies", nickname = "listDividendPayoutFrequenciesUsingPOST", notes = "This method returns a list of DividendPayoutFrequency. You can spcify the input list of order status code you're  interresed in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/dividendPayoutFrequencies/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listDividendPayoutFrequenciesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listDocumentTypes", nickname = "listDocumentTypesUsingPOST", notes = "This method returns a list of document types. You can specify the input list of document types code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/documentTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listDocumentTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listDocumentationTypes", nickname = "listDocumentationTypesUsingPOST", notes = "This method returns a list of legal document types. You can specify the input list of legal document types code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/documentationTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listDocumentationTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEntityTypes", nickname = "listEntityTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/entityTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listEntityTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listErrors", nickname = "listErrorsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/errors/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listErrorsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfDealingTypes", nickname = "listEtfDealingTypesUsingPOST", notes = "Returns the list of ETF Dealing types.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/etfDealingTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listEtfDealingTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfDealingValidityPeriods", nickname = "listEtfDealingValidityPeriodsUsingPOST", notes = "Returns the list of ETF Dealing validity periods.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/etfDealingValidityPeriods/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listEtfDealingValidityPeriodsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEtfTransactionStatuses", nickname = "listEtfTransactionStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/etfTransactionStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listEtfTransactionStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEuropeanFundClassifications", nickname = "listEuropeanFundClassificationsUsingPOST", notes = "This method returns a list of European Fund Classication. You can specify the input list of European Fund Classication code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/europeanFundClassifications/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listEuropeanFundClassificationsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listEventTypes", nickname = "listEventTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/eventType/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listEventTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFatcaCertificateTypes", nickname = "listFatcaCertificateTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/fatcaCertificateTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listFatcaCertificateTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFatcaStatuses", nickname = "listFatcaStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/fatcaStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listFatcaStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFatcaTypes", nickname = "listFatcaTypesUsingPOST", notes = "This method returns a list of fatcatype. You can specify the input list of fatcatype code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/fatcaTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listFatcaTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFiscalGroupings", nickname = "listFiscalGroupingsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/fiscalGroupings/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listFiscalGroupingsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFrequencies", nickname = "listFrequenciesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/frequency/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listFrequenciesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundCatalogStatuses", nickname = "listFundCatalogStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/fundCatalogStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listFundCatalogStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundClassifications", nickname = "listFundClassificationsUsingPOST", notes = "This method returns a list of Fund Classification. You can specify the input list of Fund Classification code you're interrested in. ", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/fundClassifications/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listFundClassificationsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listFundTypes", nickname = "listFundTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/fundtypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listFundTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listGeographicAreas", nickname = "listGeographicAreasUsingPOST", notes = "This method returns a list of Geographic Breakdown. You can specify the input list of Geographic Breakdown code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/geographicAreas/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listGeographicAreasUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listHomePages", nickname = "listHomePagesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/homePages/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listHomePagesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listIndexEtfs", nickname = "listIndexEtfsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/indexNames/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listIndexEtfsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listInstrumentExternalCodes", nickname = "listInstrumentExternalCodesUsingPOST", notes = "This method returns a list of {InstrumentExternalCode}. You can specify the input list of {InstrumentExternalCode} code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/instrumentExternalCodes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listInstrumentExternalCodesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listInvestmentLimitFeatures", nickname = "listInvestmentLimitFeaturesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/investmentLimitFeatures/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listInvestmentLimitFeaturesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listInvestmentLimitRiskLevels", nickname = "listInvestmentLimitRiskLevelsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/investmentLimitRiskLevels/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listInvestmentLimitRiskLevelsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listItalianRetailMarketRoadTypes", nickname = "listItalianRetailMarketRoadTypesUsingPOST", notes = "This method returns a specific list of road types used by the italian retail market entities. You can spcify the input list of road types code you're  interresed in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/italianRetailMarketRoadTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listItalianRetailMarketRoadTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listLanguages", nickname = "listLanguagesUsingPOST", notes = "This method returns a list of language. You can specify the input list of language code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/languages/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listLanguagesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listLegalEstructures", nickname = "listLegalEstructuresUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/legalEstructures/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listLegalEstructuresUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listMarketRegistrations", nickname = "listMarketRegistrationsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/marketRegistrations/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listMarketRegistrationsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listMifid2Classes", nickname = "listMifid2ClassesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/mifid2classes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listMifid2ClassesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listMonitoringStatusAmounts", nickname = "listMonitoringStatusAmountsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/monitoringStatusAmounts/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listMonitoringStatusAmountsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listNativeOfficialDocumentTypes", nickname = "listNativeOfficialDocumentTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/nativeOfficialDocumentTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listNativeOfficialDocumentTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listNonResidentDocumentTypes", nickname = "listNonResidentDocumentTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/nonResidentDocumentTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listNonResidentDocumentTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listNotificationStatuses", nickname = "listNotificationStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/notificationStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listNotificationStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listNotificationTypes", nickname = "listNotificationTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/notificationTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listNotificationTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listNumberFormatPatterns", nickname = "listNumberFormatPatternsUsingPOST", notes = "Returns a list of all number_format patterns that users could select as theirs", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/numberFormatPatterns/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listNumberFormatPatternsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOperationPolicies", nickname = "listOperationPoliciesUsingPOST", notes = "This method returns a list of operation policies. You can specify the input list of operation policies code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/operationPolicies/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listOperationPoliciesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOperationTypes", nickname = "listOperationTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/operationTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listOperationTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOperationalPortfolioAuthorizationPhases", nickname = "listOperationalPortfolioAuthorizationPhasesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/operationalPortfolioAuthorizationPhases/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listOperationalPortfolioAuthorizationPhasesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOperationalPortfolioCompositionStatuses", nickname = "listOperationalPortfolioCompositionStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/operationalPortfolioCompositionStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listOperationalPortfolioCompositionStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOperationalPortfolioMovementTypes", nickname = "listOperationalPortfolioMovementTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/operationalPortfolioMovementTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listOperationalPortfolioMovementTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOperationalPortfolioOrderOrigins", nickname = "listOperationalPortfolioOrderOriginsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/operationalPortfolioOrderOrigins/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listOperationalPortfolioOrderOriginsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOperationalPortfolioOrderStatuses", nickname = "listOperationalPortfolioOrderStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/operationalPortfolioOrderStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listOperationalPortfolioOrderStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOrderMonitoringStatuses", nickname = "listOrderMonitoringStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/orderMonitoringStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listOrderMonitoringStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listOtherFilters", nickname = "listOtherFiltersUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/otherFilters/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listOtherFiltersUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listPerformanceTypes", nickname = "listPerformanceTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/performanceTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listPerformanceTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listPortfolioStatuses", nickname = "listPortfolioStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/portfolioStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listPortfolioStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listPortfolioTypes", nickname = "listPortfolioTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/portfolioTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listPortfolioTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listPreferences", nickname = "listPreferencesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/preferences/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listPreferencesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listPriceSearches", nickname = "listPriceSearchesUsingPOST", notes = "This method returns a list of Price searches. You can specify the input list of Price searches code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/priceSearches/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listPriceSearchesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listPriceTypes", nickname = "listPriceTypesUsingPOST", notes = "This method returns a list of Price types. You can specify the input list of Price types code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/priceTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listPriceTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listProductStructure", nickname = "listProductStructureUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/productStructures/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listProductStructureUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listProductTypes", nickname = "listProductTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/productTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listProductTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listRebalancingTypes", nickname = "listRebalancingTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/rebalancingTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listRebalancingTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listRebateGroupingLevels", nickname = "listRebateGroupingLevelsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/rebateGroupingLevels/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listRebateGroupingLevelsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listRegions", nickname = "listRegionsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/countries/{countryCode}/regions/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listRegionsUsingPOST(@ApiParam(value = "countryCode",required=true) @PathVariable("countryCode") String countryCode,@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listRegulations", nickname = "listRegulationsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/regulatoryData/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listRegulationsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listReplicationMethod", nickname = "listReplicationMethodUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/replicationMethod/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listReplicationMethodUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listRiskControlAlarmTypes", nickname = "listRiskControlAlarmTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/riskControlAlarmTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listRiskControlAlarmTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listRiskControlRatios", nickname = "listRiskControlRatiosUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/riskControlRatios/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listRiskControlRatiosUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listRoadTypes", nickname = "listRoadTypesUsingPOST", notes = "This method returns a list of road types. You can spcify the input list of road types code you're  interresed in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/roadTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listRoadTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listRoundingTypes", nickname = "listRoundingTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/roundingTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listRoundingTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSavingPlanPeriods", nickname = "listSavingPlanPeriodsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/savingPlansPeriods/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listSavingPlanPeriodsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSavingPlanStatuses", nickname = "listSavingPlanStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/savingPlansStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listSavingPlanStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listScorecardMathematicalFunctionValues", nickname = "listScorecardMathematicalFunctionValuesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/scorecardMathematicalFunctionValues/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listScorecardMathematicalFunctionValuesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSectorBreakdowns", nickname = "listSectorBreakdownsUsingPOST", notes = "This method returns a list of Sector Breakdown. You can specify the input list of Sector Breakdown code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/sectorBreakdowns/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listSectorBreakdownsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSectors", nickname = "listSectorsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/sectors/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listSectorsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSettings", nickname = "listSettingsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/settings/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listSettingsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSettlementStatuses", nickname = "listSettlementStatusesUsingPOST", notes = "This method returns a list of settlement status. You can spcify the input list of order status code you're  interresed in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/settlementStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listSettlementStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSettlementTransactionTypes", nickname = "listSettlementTransactionTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/settlementTransactionTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listSettlementTransactionTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listShareTypes", nickname = "listShareTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/sharetypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listShareTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listShareholdingTypes", nickname = "listShareholdingTypesUsingPOST", notes = "This method returns a list of Shareholding types. You can specify the input list of Property types code you're interrested in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/shareholdingTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listShareholdingTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSolvencyAuthorizations", nickname = "listSolvencyAuthorizationsUsingPOST", notes = "Returns the list of possible causes of a {SolvencyAuthorization} rejection.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/solvencyAuthorizations/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listSolvencyAuthorizationsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSpanishTransferRejectionCauses", nickname = "listSpanishTransferRejectionCausesUsingPOST", notes = "Returns the list of possible causes of a {SpanishTransfer} rejection.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/spanishTransferRejectionCauses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listSpanishTransferRejectionCausesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSpanishTransferRequestStatuses", nickname = "listSpanishTransferRequestStatusesUsingPOST", notes = "Returns the list of the statuses associated to a {SpanishTransfer} requests.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/spanishTransferRequestStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listSpanishTransferRequestStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSpanishTransferStatuses", nickname = "listSpanishTransferStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/spanishTransferStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listSpanishTransferStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listSpanishTransferSubstatuses", nickname = "listSpanishTransferSubstatusesUsingPOST", notes = "Returs the list of the statuses of the {SpanishTransfer}s with a greater level of details.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/spanishTransferSubstatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listSpanishTransferSubstatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listStockTransferCategories", nickname = "listStockTransferCategoriesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/stockTransferCategories/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listStockTransferCategoriesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listStockTransferPlatforms", nickname = "listStockTransferPlatformsUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/stockTransferPlatforms/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listStockTransferPlatformsUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listStockTransferStatuses", nickname = "listStockTransferStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/stockTransferStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listStockTransferStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listStockTransferTypes", nickname = "listStockTransferTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/stockTransferTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listStockTransferTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTaxWrappers", nickname = "listTaxWrappersUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/taxWrappers/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listTaxWrappersUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTransactionDetailedStatuses", nickname = "listTransactionDetailedStatusesUsingPOST", notes = "This method returns a list of transaction detailed status. You can spcify the input list of order status code you're  interresed in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/transactionDetailedStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listTransactionDetailedStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTransactionStatusChanges", nickname = "listTransactionStatusChangesUsingPOST", notes = "This method returns a list of transaction evolution action. You can spcify the input list of order status code you're  interresed in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/transactionStatusChanges/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listTransactionStatusChangesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTransactionStatuses", nickname = "listTransactionStatusesUsingPOST", notes = "This method returns a list of transaction status. You can spcify the input list of order status code you're  interresed in.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/transactionStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listTransactionStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listTransactionTypes", nickname = "listTransactionTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/transactionTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listTransactionTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUkReportingStatuses", nickname = "listUkReportingStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/ukReportingStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listUkReportingStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUniverses", nickname = "listUniversesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/universes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listUniversesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUploadedOrderStatuses", nickname = "listUploadedOrderStatusesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/uploadedOrderStatuses/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listUploadedOrderStatusesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUsFiscalTypes", nickname = "listUsFiscalTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/usFiscalTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listUsFiscalTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listUsTinTypes", nickname = "listUsTinTypesUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/usTinTypes/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listUsTinTypesUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listmarketIdentifiers", nickname = "listmarketIdentifiersUsingPOST", notes = "", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/catalog/marketIdentifiers/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<CodeDescription>> listmarketIdentifiersUsingPOST(@ApiParam(value = "A list, possibly empty, of code to be fetched" ,required=true )  @Valid @RequestBody List<String> requestBody) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
