/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CodeDescription;
import org.openapitools.model.SolvencyAuthorizationAndPageFilter;
import org.openapitools.model.SolvencyAuthorizationByIsinAndPageFilter;
import org.openapitools.model.SolvencyAuthorizationDeliveryAndPageFilter;
import org.openapitools.model.SolvencyAuthorizationDeliveryWithXlsExportInfoFilterAndPage;
import org.openapitools.model.SolvencyAuthorizationSelected;
import org.openapitools.model.SolvencyAuthorizationUpdate;
import org.openapitools.model.SolvencyAuthorizationWithXlsExportInfoFilterAndPage;
import org.openapitools.model.SolvencyAuthorizationsAndPage;
import org.openapitools.model.SolvencyAuthorizationsDeliveryAndPage;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

@Validated
@Api(value = "solvency", description = "the solvency API")
public interface SolvencyApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "addClientFundSolvencyAuthorizations", nickname = "addClientFundSolvencyAuthorizationsUsingPUT", notes = "For Client, add one or several the fund's solvency's authorizations.", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "solvency", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 304, message = "Not modified. This response corresponds to the '304' HTTP status code."),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/solvency/client/authorizations/solvencyFund",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> addClientFundSolvencyAuthorizationsUsingPUT(@ApiParam(value = "A simple object allowing the {Consumer} to update several solvency's authorizations." ,required=true )  @Valid @RequestBody SolvencyAuthorizationSelected solvencyAuthorizationSelected) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateClientFundSolvencyAuthorizationsAsXls", nickname = "generateClientFundSolvencyAuthorizationsAsXlsUsingPOST", notes = "For Client, export to XLS a list of fund's solvency's authorizations.", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "solvency", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/solvency/client/authorizations/report/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateClientFundSolvencyAuthorizationsAsXlsUsingPOST(@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody SolvencyAuthorizationWithXlsExportInfoFilterAndPage solvencyAuthorizationWithXlsExportInfoFilterAndPage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateClientTptDeliveryFundSolvencyAuthorizationsAsXls", nickname = "generateClientTptDeliveryFundSolvencyAuthorizationsAsXlsUsingPOST", notes = "For Client, export to XLS a list all TPT of fund's solvency's authorizations.", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "solvency", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/solvency/client/authorizations/tptDelivery/report/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateClientTptDeliveryFundSolvencyAuthorizationsAsXlsUsingPOST(@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody SolvencyAuthorizationDeliveryWithXlsExportInfoFilterAndPage solvencyAuthorizationDeliveryWithXlsExportInfoFilterAndPage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateMgmtFundSolvencyAuthorizationsAsXls", nickname = "generateMgmtFundSolvencyAuthorizationsAsXlsUsingPOST", notes = "For Management, export to XLS a list of fund's solvency's authorizations.", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "solvency", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/solvency/mgmt/authorizations/report/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateMgmtFundSolvencyAuthorizationsAsXlsUsingPOST(@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody SolvencyAuthorizationWithXlsExportInfoFilterAndPage solvencyAuthorizationWithXlsExportInfoFilterAndPage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "generateMgmtTraceFundSolvencyAuthorizationsAsXls", nickname = "generateMgmtTraceFundSolvencyAuthorizationsAsXlsUsingPOST", notes = "For Management, export to XLS a list all tracks of fund's solvency's authorizations.", response = byte[].class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "solvency", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = byte[].class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/solvency/mgmt/authorizations/trace/report/xls",
        produces = { "application/vnd.ms-excel" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<byte[]>> generateMgmtTraceFundSolvencyAuthorizationsAsXlsUsingPOST(@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody SolvencyAuthorizationDeliveryWithXlsExportInfoFilterAndPage solvencyAuthorizationDeliveryWithXlsExportInfoFilterAndPage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "getFundSolvencyAuthorizationsPeriod", nickname = "getFundSolvencyAuthorizationsPeriodUsingGET", notes = "List fund's solvency's authorizations periods.", response = CodeDescription.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "solvency", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = CodeDescription.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/solvency/authorizations/getFundPeriod",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<CodeDescription>> getFundSolvencyAuthorizationsPeriodUsingGET() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"code\" : \"code\",  \"description\" : \"description\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listClientFundSolvencyAuthorizationsByIsin", nickname = "listClientFundSolvencyAuthorizationsByIsinUsingPOST", notes = "For Client, list fund's solvency's authorizations by isin.", response = SolvencyAuthorizationsAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "solvency", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = SolvencyAuthorizationsAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/solvency/client/authorizations/listByIsin",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SolvencyAuthorizationsAndPage> listClientFundSolvencyAuthorizationsByIsinUsingPOST(@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody SolvencyAuthorizationByIsinAndPageFilter solvencyAuthorizationByIsinAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"solvencyAuthorizations\" : [ {    \"intermediateId\" : 1,    \"fundId\" : 6,    \"distributorId\" : 0,    \"name\" : \"name\",    \"fundName\" : \"fundName\",    \"isin\" : \"isin\",    \"status\" : {      \"value\" : \"value\",      \"key\" : \"key\"    }  }, {    \"intermediateId\" : 1,    \"fundId\" : 6,    \"distributorId\" : 0,    \"name\" : \"name\",    \"fundName\" : \"fundName\",    \"isin\" : \"isin\",    \"status\" : {      \"value\" : \"value\",      \"key\" : \"key\"    }  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listClientFundSolvencyAuthorizations", nickname = "listClientFundSolvencyAuthorizationsUsingPOST", notes = "For Client, list fund's solvency's authorizations.", response = SolvencyAuthorizationsAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "solvency", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = SolvencyAuthorizationsAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/solvency/client/authorizations/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SolvencyAuthorizationsAndPage> listClientFundSolvencyAuthorizationsUsingPOST(@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody SolvencyAuthorizationAndPageFilter solvencyAuthorizationAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"solvencyAuthorizations\" : [ {    \"intermediateId\" : 1,    \"fundId\" : 6,    \"distributorId\" : 0,    \"name\" : \"name\",    \"fundName\" : \"fundName\",    \"isin\" : \"isin\",    \"status\" : {      \"value\" : \"value\",      \"key\" : \"key\"    }  }, {    \"intermediateId\" : 1,    \"fundId\" : 6,    \"distributorId\" : 0,    \"name\" : \"name\",    \"fundName\" : \"fundName\",    \"isin\" : \"isin\",    \"status\" : {      \"value\" : \"value\",      \"key\" : \"key\"    }  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listClientTptDeliveryFundSolvencyAuthorizations", nickname = "listClientTptDeliveryFundSolvencyAuthorizationsUsingPOST", notes = "For Management, list all TPT of fund's solvency's authorizations.", response = SolvencyAuthorizationsDeliveryAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "solvency", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = SolvencyAuthorizationsDeliveryAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/solvency/client/authorizations/tptDelivery/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SolvencyAuthorizationsDeliveryAndPage> listClientTptDeliveryFundSolvencyAuthorizationsUsingPOST(@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody SolvencyAuthorizationDeliveryAndPageFilter solvencyAuthorizationDeliveryAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"solvencyAuthorizations\" : [ {    \"intermediateId\" : 1,    \"fundId\" : 6,    \"receptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"distributorId\" : 0,    \"documentUrl\" : \"documentUrl\",    \"estimatedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"description\" : \"description\",    \"documentName\" : \"documentName\",    \"fundName\" : \"fundName\",    \"isin\" : \"isin\",    \"status\" : {      \"value\" : \"value\",      \"key\" : \"key\"    }  }, {    \"intermediateId\" : 1,    \"fundId\" : 6,    \"receptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"distributorId\" : 0,    \"documentUrl\" : \"documentUrl\",    \"estimatedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"description\" : \"description\",    \"documentName\" : \"documentName\",    \"fundName\" : \"fundName\",    \"isin\" : \"isin\",    \"status\" : {      \"value\" : \"value\",      \"key\" : \"key\"    }  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listMgmtFundSolvencyAuthorizations", nickname = "listMgmtFundSolvencyAuthorizationsUsingPOST", notes = "For Management, list fund's solvency's authorizations.", response = SolvencyAuthorizationsAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "solvency", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = SolvencyAuthorizationsAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/solvency/mgmt/authorizations/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SolvencyAuthorizationsAndPage> listMgmtFundSolvencyAuthorizationsUsingPOST(@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody SolvencyAuthorizationAndPageFilter solvencyAuthorizationAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"solvencyAuthorizations\" : [ {    \"intermediateId\" : 1,    \"fundId\" : 6,    \"distributorId\" : 0,    \"name\" : \"name\",    \"fundName\" : \"fundName\",    \"isin\" : \"isin\",    \"status\" : {      \"value\" : \"value\",      \"key\" : \"key\"    }  }, {    \"intermediateId\" : 1,    \"fundId\" : 6,    \"distributorId\" : 0,    \"name\" : \"name\",    \"fundName\" : \"fundName\",    \"isin\" : \"isin\",    \"status\" : {      \"value\" : \"value\",      \"key\" : \"key\"    }  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "listMgmtTraceFundSolvencyAuthorizations", nickname = "listMgmtTraceFundSolvencyAuthorizationsUsingPOST", notes = "For Management, list all tracks of fund's solvency's authorizations.", response = SolvencyAuthorizationsDeliveryAndPage.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "solvency", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = SolvencyAuthorizationsDeliveryAndPage.class),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/solvency/mgmt/authorizations/trace/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SolvencyAuthorizationsDeliveryAndPage> listMgmtTraceFundSolvencyAuthorizationsUsingPOST(@ApiParam(value = "A simple object allowing the {Consumer} to filter the result for matching characteristics." ,required=true )  @Valid @RequestBody SolvencyAuthorizationDeliveryAndPageFilter solvencyAuthorizationDeliveryAndPageFilter) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"solvencyAuthorizations\" : [ {    \"intermediateId\" : 1,    \"fundId\" : 6,    \"receptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"distributorId\" : 0,    \"documentUrl\" : \"documentUrl\",    \"estimatedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"description\" : \"description\",    \"documentName\" : \"documentName\",    \"fundName\" : \"fundName\",    \"isin\" : \"isin\",    \"status\" : {      \"value\" : \"value\",      \"key\" : \"key\"    }  }, {    \"intermediateId\" : 1,    \"fundId\" : 6,    \"receptionDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"distributorId\" : 0,    \"documentUrl\" : \"documentUrl\",    \"estimatedDate\" : \"2000-01-23T04:56:07.000+00:00\",    \"name\" : \"name\",    \"description\" : \"description\",    \"documentName\" : \"documentName\",    \"fundName\" : \"fundName\",    \"isin\" : \"isin\",    \"status\" : {      \"value\" : \"value\",      \"key\" : \"key\"    }  } ],  \"page\" : {    \"pageNumber\" : 6,    \"resultPerPage\" : 1,    \"totalNumberOfResult\" : 5,    \"orderPage\" : {      \"by\" : \"by\",      \"sort\" : \"ASCENDING\"    }  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "removeClientFundSolvencyAuthorizations", nickname = "removeClientFundSolvencyAuthorizationsUsingPOST", notes = "For Client, remove one or several the fund's solvency's authorizations.", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "solvency", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 304, message = "Not modified. This response corresponds to the '304' HTTP status code."),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code.") })
    @RequestMapping(value = "/solvency/client/authorizations/solvencyFund",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> removeClientFundSolvencyAuthorizationsUsingPOST(@ApiParam(value = "A simple object allowing the {Consumer} to update several solvency's authorizations." ,required=true )  @Valid @RequestBody SolvencyAuthorizationSelected solvencyAuthorizationSelected) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "updateMgmtFundSolvencyAuthorizations", nickname = "updateMgmtFundSolvencyAuthorizationsUsingPOST", notes = "For Management, update the fund's solvency's authorizations status.", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "solvency", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Illegal input for operation. This response corresponds to the '400' HTTP status code."),
        @ApiResponse(code = 404, message = "Entity not found. This response corresponds to the '404' HTTP status code.") })
    @RequestMapping(value = "/solvency/mgmt/authorizations/update",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> updateMgmtFundSolvencyAuthorizationsUsingPOST(@ApiParam(value = "A simple object allowing the {Consumer} to update several solvency's authorizations." ,required=true )  @Valid @RequestBody SolvencyAuthorizationUpdate solvencyAuthorizationUpdate) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
