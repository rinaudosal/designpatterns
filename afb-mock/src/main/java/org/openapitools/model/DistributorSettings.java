package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.Valid;
import javax.validation.constraints.*;

/**
 * Internal object to get a Distributor&#39; settings
 */
@ApiModel(description = "Internal object to get a Distributor' settings")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-10-15T15:19:21.557+02:00[Europe/Rome]")

public class DistributorSettings   {
  @JsonProperty("apportionByContract")
  private Boolean apportionByContract = null;

  @JsonProperty("apportionBySubdistributor")
  private Boolean apportionBySubdistributor = null;

  @JsonProperty("assetAccountCodeRequired")
  private Boolean assetAccountCodeRequired = null;

  /**
   * Indicates whether the entity is able to deal using its own currencies's set (or XXX)
   */
  public enum DealingCurrencyPolicyEnum {
    INSTRUMENT_CURRENCY("INSTRUMENT_CURRENCY"),
    
    PAYMENT_CURRENCY("PAYMENT_CURRENCY"),
    
    ANY("ANY");

    private String value;

    DealingCurrencyPolicyEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DealingCurrencyPolicyEnum fromValue(String text) {
      for (DealingCurrencyPolicyEnum b : DealingCurrencyPolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }
  }

  @JsonProperty("dealingCurrencyPolicy")
  private DealingCurrencyPolicyEnum dealingCurrencyPolicy = null;

  @JsonProperty("italianRetailMarket")
  private Boolean italianRetailMarket = null;

  @JsonProperty("italianTaxation")
  private Boolean italianTaxation = null;

  @JsonProperty("orderCommentsPermmitted")
  private Boolean orderCommentsPermmitted = null;

  @JsonProperty("qualitativeInfomation")
  private Boolean qualitativeInfomation = null;

  @JsonProperty("spanishTransfersPermitted")
  private Boolean spanishTransfersPermitted = null;

  @JsonProperty("transactionIdAutogenerated")
  private Boolean transactionIdAutogenerated = null;

  /**
   * Defines whether the entity Transaction id must contain 7 Numerical characters or 17, or 20 alphanumerical characters.
   */
  public enum TransactionIdPolicyEnum {
    NUMERIC_7("NUMERIC_7"),
    
    ALPHANUMERIC_17("ALPHANUMERIC_17"),
    
    ALPHANUMERIC_20("ALPHANUMERIC_20");

    private String value;

    TransactionIdPolicyEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransactionIdPolicyEnum fromValue(String text) {
      for (TransactionIdPolicyEnum b : TransactionIdPolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }
  }

  @JsonProperty("transactionIdPolicy")
  private TransactionIdPolicyEnum transactionIdPolicy = null;

  public DistributorSettings apportionByContract(Boolean apportionByContract) {
    this.apportionByContract = apportionByContract;
    return this;
  }

  /**
   * Indicates whether the entity do apportions by {Contract}
   * @return apportionByContract
  **/
  @ApiModelProperty(value = "Indicates whether the entity do apportions by {Contract}")


  public Boolean getApportionByContract() {
    return apportionByContract;
  }

  public void setApportionByContract(Boolean apportionByContract) {
    this.apportionByContract = apportionByContract;
  }

  public DistributorSettings apportionBySubdistributor(Boolean apportionBySubdistributor) {
    this.apportionBySubdistributor = apportionBySubdistributor;
    return this;
  }

  /**
   * Indicates whether the entity do apportions by {Subdistributor}
   * @return apportionBySubdistributor
  **/
  @ApiModelProperty(value = "Indicates whether the entity do apportions by {Subdistributor}")


  public Boolean getApportionBySubdistributor() {
    return apportionBySubdistributor;
  }

  public void setApportionBySubdistributor(Boolean apportionBySubdistributor) {
    this.apportionBySubdistributor = apportionBySubdistributor;
  }

  public DistributorSettings assetAccountCodeRequired(Boolean assetAccountCodeRequired) {
    this.assetAccountCodeRequired = assetAccountCodeRequired;
    return this;
  }

  /**
   * Indicates whether the entity must inform the Asset Acount Code
   * @return assetAccountCodeRequired
  **/
  @ApiModelProperty(value = "Indicates whether the entity must inform the Asset Acount Code")


  public Boolean getAssetAccountCodeRequired() {
    return assetAccountCodeRequired;
  }

  public void setAssetAccountCodeRequired(Boolean assetAccountCodeRequired) {
    this.assetAccountCodeRequired = assetAccountCodeRequired;
  }

  public DistributorSettings dealingCurrencyPolicy(DealingCurrencyPolicyEnum dealingCurrencyPolicy) {
    this.dealingCurrencyPolicy = dealingCurrencyPolicy;
    return this;
  }

  /**
   * Indicates whether the entity is able to deal using its own currencies's set (or XXX)
   * @return dealingCurrencyPolicy
  **/
  @ApiModelProperty(value = "Indicates whether the entity is able to deal using its own currencies's set (or XXX)")


  public DealingCurrencyPolicyEnum getDealingCurrencyPolicy() {
    return dealingCurrencyPolicy;
  }

  public void setDealingCurrencyPolicy(DealingCurrencyPolicyEnum dealingCurrencyPolicy) {
    this.dealingCurrencyPolicy = dealingCurrencyPolicy;
  }

  public DistributorSettings italianRetailMarket(Boolean italianRetailMarket) {
    this.italianRetailMarket = italianRetailMarket;
    return this;
  }

  /**
   * Indicates whether the entity is included in the Italian Retail Market
   * @return italianRetailMarket
  **/
  @ApiModelProperty(value = "Indicates whether the entity is included in the Italian Retail Market")


  public Boolean getItalianRetailMarket() {
    return italianRetailMarket;
  }

  public void setItalianRetailMarket(Boolean italianRetailMarket) {
    this.italianRetailMarket = italianRetailMarket;
  }

  public DistributorSettings italianTaxation(Boolean italianTaxation) {
    this.italianTaxation = italianTaxation;
    return this;
  }

  /**
   * Indicates whether the entity adheres to the italian taxation
   * @return italianTaxation
  **/
  @ApiModelProperty(value = "Indicates whether the entity adheres to the italian taxation")


  public Boolean getItalianTaxation() {
    return italianTaxation;
  }

  public void setItalianTaxation(Boolean italianTaxation) {
    this.italianTaxation = italianTaxation;
  }

  public DistributorSettings orderCommentsPermmitted(Boolean orderCommentsPermmitted) {
    this.orderCommentsPermmitted = orderCommentsPermmitted;
    return this;
  }

  /**
   * Indicates whether the entity permits adding comments when adding a new order
   * @return orderCommentsPermmitted
  **/
  @ApiModelProperty(value = "Indicates whether the entity permits adding comments when adding a new order")


  public Boolean getOrderCommentsPermmitted() {
    return orderCommentsPermmitted;
  }

  public void setOrderCommentsPermmitted(Boolean orderCommentsPermmitted) {
    this.orderCommentsPermmitted = orderCommentsPermmitted;
  }

  public DistributorSettings qualitativeInfomation(Boolean qualitativeInfomation) {
    this.qualitativeInfomation = qualitativeInfomation;
    return this;
  }

  /**
   * Indicates {Scorecard}
   * @return qualitativeInfomation
  **/
  @ApiModelProperty(value = "Indicates {Scorecard}")


  public Boolean getQualitativeInfomation() {
    return qualitativeInfomation;
  }

  public void setQualitativeInfomation(Boolean qualitativeInfomation) {
    this.qualitativeInfomation = qualitativeInfomation;
  }

  public DistributorSettings spanishTransfersPermitted(Boolean spanishTransfersPermitted) {
    this.spanishTransfersPermitted = spanishTransfersPermitted;
    return this;
  }

  /**
   * Indicates whether the entity permits transfers acording to the SNCE (The spanish National Electronic Clearing System)
   * @return spanishTransfersPermitted
  **/
  @ApiModelProperty(value = "Indicates whether the entity permits transfers acording to the SNCE (The spanish National Electronic Clearing System)")


  public Boolean getSpanishTransfersPermitted() {
    return spanishTransfersPermitted;
  }

  public void setSpanishTransfersPermitted(Boolean spanishTransfersPermitted) {
    this.spanishTransfersPermitted = spanishTransfersPermitted;
  }

  public DistributorSettings transactionIdAutogenerated(Boolean transactionIdAutogenerated) {
    this.transactionIdAutogenerated = transactionIdAutogenerated;
    return this;
  }

  /**
   * Indicates whether the entity generates the transaction Id automatically
   * @return transactionIdAutogenerated
  **/
  @ApiModelProperty(value = "Indicates whether the entity generates the transaction Id automatically")


  public Boolean getTransactionIdAutogenerated() {
    return transactionIdAutogenerated;
  }

  public void setTransactionIdAutogenerated(Boolean transactionIdAutogenerated) {
    this.transactionIdAutogenerated = transactionIdAutogenerated;
  }

  public DistributorSettings transactionIdPolicy(TransactionIdPolicyEnum transactionIdPolicy) {
    this.transactionIdPolicy = transactionIdPolicy;
    return this;
  }

  /**
   * Defines whether the entity Transaction id must contain 7 Numerical characters or 17, or 20 alphanumerical characters.
   * @return transactionIdPolicy
  **/
  @ApiModelProperty(value = "Defines whether the entity Transaction id must contain 7 Numerical characters or 17, or 20 alphanumerical characters.")


  public TransactionIdPolicyEnum getTransactionIdPolicy() {
    return transactionIdPolicy;
  }

  public void setTransactionIdPolicy(TransactionIdPolicyEnum transactionIdPolicy) {
    this.transactionIdPolicy = transactionIdPolicy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DistributorSettings distributorSettings = (DistributorSettings) o;
    return Objects.equals(this.apportionByContract, distributorSettings.apportionByContract) &&
        Objects.equals(this.apportionBySubdistributor, distributorSettings.apportionBySubdistributor) &&
        Objects.equals(this.assetAccountCodeRequired, distributorSettings.assetAccountCodeRequired) &&
        Objects.equals(this.dealingCurrencyPolicy, distributorSettings.dealingCurrencyPolicy) &&
        Objects.equals(this.italianRetailMarket, distributorSettings.italianRetailMarket) &&
        Objects.equals(this.italianTaxation, distributorSettings.italianTaxation) &&
        Objects.equals(this.orderCommentsPermmitted, distributorSettings.orderCommentsPermmitted) &&
        Objects.equals(this.qualitativeInfomation, distributorSettings.qualitativeInfomation) &&
        Objects.equals(this.spanishTransfersPermitted, distributorSettings.spanishTransfersPermitted) &&
        Objects.equals(this.transactionIdAutogenerated, distributorSettings.transactionIdAutogenerated) &&
        Objects.equals(this.transactionIdPolicy, distributorSettings.transactionIdPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apportionByContract, apportionBySubdistributor, assetAccountCodeRequired, dealingCurrencyPolicy, italianRetailMarket, italianTaxation, orderCommentsPermmitted, qualitativeInfomation, spanishTransfersPermitted, transactionIdAutogenerated, transactionIdPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DistributorSettings {\n");
    
    sb.append("    apportionByContract: ").append(toIndentedString(apportionByContract)).append("\n");
    sb.append("    apportionBySubdistributor: ").append(toIndentedString(apportionBySubdistributor)).append("\n");
    sb.append("    assetAccountCodeRequired: ").append(toIndentedString(assetAccountCodeRequired)).append("\n");
    sb.append("    dealingCurrencyPolicy: ").append(toIndentedString(dealingCurrencyPolicy)).append("\n");
    sb.append("    italianRetailMarket: ").append(toIndentedString(italianRetailMarket)).append("\n");
    sb.append("    italianTaxation: ").append(toIndentedString(italianTaxation)).append("\n");
    sb.append("    orderCommentsPermmitted: ").append(toIndentedString(orderCommentsPermmitted)).append("\n");
    sb.append("    qualitativeInfomation: ").append(toIndentedString(qualitativeInfomation)).append("\n");
    sb.append("    spanishTransfersPermitted: ").append(toIndentedString(spanishTransfersPermitted)).append("\n");
    sb.append("    transactionIdAutogenerated: ").append(toIndentedString(transactionIdAutogenerated)).append("\n");
    sb.append("    transactionIdPolicy: ").append(toIndentedString(transactionIdPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

