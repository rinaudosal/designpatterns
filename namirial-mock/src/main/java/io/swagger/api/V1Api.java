/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ContractIN;
import io.swagger.model.ContractOUT;
import io.swagger.model.EnrollSuspendedOUT;
import io.swagger.model.ErrorResponse;
import io.swagger.model.ErrorResponseOtpRequest;
import io.swagger.model.OtpRequestWithCustomerIN;
import io.swagger.model.OtpRequestWithCustomerOUT;
import io.swagger.model.SendOtpSmsFromHolderIN;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-25T08:34:40.705Z")

@Api(value = "v1", description = "the v1 API")
public interface V1Api {

    @ApiOperation(value = "/v1/certificates/enrollment/{requestId}/{holderId}/{otpCode}", nickname = "enrollSuspendedUsingGET", notes = "Certificate enrollment in suspended state....", response = EnrollSuspendedOUT.class, tags={ "certificates-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Certificate enrolled successfully.", response = EnrollSuspendedOUT.class),
        @ApiResponse(code = 400, message = "An error occurred during the enrollment of certificate. Check that the data entered is correct.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorResponse.class) })
    @RequestMapping(value = "/v1/certificates/enrollment/{requestId}/{holderId}/{otpCode}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<EnrollSuspendedOUT> enrollSuspendedUsingGET(@ApiParam(value = "requestId",required=true) @PathVariable("requestId") String requestId,@ApiParam(value = "holderId",required=true) @PathVariable("holderId") Integer holderId,@ApiParam(value = "otpCode",required=true) @PathVariable("otpCode") String otpCode);


    @ApiOperation(value = "/v1/documents/contract", nickname = "getContractUsingPOST", notes = "Contract generator....", response = ContractOUT.class, tags={ "documents-generator-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Contract generated successfully.", response = ContractOUT.class),
        @ApiResponse(code = 400, message = "An error occurred at runtime. Probably the data entered are not complete or db not contains all the required data.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorResponse.class) })
    @RequestMapping(value = "/v1/documents/contract",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ContractOUT> getContractUsingPOST(@ApiParam(value = "contractIN" ,required=true )  @Valid @RequestBody ContractIN contractIN);


    @ApiOperation(value = "/v1/otps/request", nickname = "otpRequestUsingPOST", notes = "Otp request....", response = OtpRequestWithCustomerOUT.class, tags={ "otps-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Otp code sent successfully.", response = OtpRequestWithCustomerOUT.class),
        @ApiResponse(code = 400, message = "An error occurred at runtime. Probably the data entered are not complete.", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Holder created but an error occurred adding request.", response = ErrorResponseOtpRequest.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorResponse.class) })
    @RequestMapping(value = "/v1/otps/request",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<OtpRequestWithCustomerOUT> otpRequestUsingPOST(@ApiParam(value = "otpRequestWithCustomerIN" ,required=true )  @Valid @RequestBody OtpRequestWithCustomerIN otpRequestWithCustomerIN);


    @ApiOperation(value = "/v1/otps/sending", nickname = "sendOtpSmsFromHolderUsingPOST", notes = "Otp sending....", tags={ "otps-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Otp code sent successfully."),
        @ApiResponse(code = 400, message = "An error occurred while sending the otp code. Probably the entered holder is not present in the systems.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorResponse.class) })
    @RequestMapping(value = "/v1/otps/sending",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> sendOtpSmsFromHolderUsingPOST(@ApiParam(value = "sendOtpSmsFromHolderIN" ,required=true )  @Valid @RequestBody SendOtpSmsFromHolderIN sendOtpSmsFromHolderIN);

}
